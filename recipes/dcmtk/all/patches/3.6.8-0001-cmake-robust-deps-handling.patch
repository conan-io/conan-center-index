--- CMake/3rdparty.cmake
+++ CMake/3rdparty.cmake
@@ -25,7 +25,7 @@
 if(DCMTK_USE_FIND_PACKAGE)
   # Find TIFF
   if(DCMTK_WITH_TIFF)
-    find_package(TIFF QUIET)
+    find_package(TIFF REQUIRED)
     # turn off library if it could not be found
     if(NOT TIFF_FOUND)
       message(STATUS "Warning: TIFF support will be disabled because libtiff was not found.")
@@ -34,21 +34,13 @@
     else()
       set(WITH_LIBTIFF 1)
       # libtiff can be compiled with libjpeg support; if available, add libjpeg to library and include path
-      find_package(JPEG QUIET)
-      if(NOT JPEG_FOUND)
-        message(STATUS "Info: DCMTK TIFF support will be enabled (but without JPEG)")
-        include_directories(${TIFF_INCLUDE_DIR})
-      else()
-        message(STATUS "Info: DCMTK TIFF support will be enabled")
-        include_directories(${TIFF_INCLUDE_DIR} ${JPEG_INCLUDE_DIR})
-      endif()
-      set(LIBTIFF_LIBS ${TIFF_LIBRARY} ${TIFF_EXTRA_LIBS_STATIC} ${JPEG_LIBRARY})
+      set(LIBTIFF_LIBS TIFF::TIFF)
     endif()
   endif()
 
   # Find PNG
   if(DCMTK_WITH_PNG)
-    find_package(PNG QUIET)
+    find_package(PNG REQUIRED)
     if(NOT PNG_FOUND)
       set(DCMTK_WITH_PNG OFF CACHE BOOL "" FORCE)
       message(STATUS "Warning: PNG support will be disabled because libpng was not found.")
@@ -57,13 +49,13 @@
       message(STATUS "Info: DCMTK PNG support will be enabled")
       set(WITH_LIBPNG 1)
       include_directories(${PNG_INCLUDE_DIR})
-      set(LIBPNG_LIBS ${PNG_LIBRARY})
+      set(LIBPNG_LIBS PNG::PNG)
     endif()
   endif()
 
   # Find OpenSSL
   if(DCMTK_WITH_OPENSSL)
-    find_package(OpenSSL QUIET)
+    find_package(OpenSSL REQUIRED)
     if(NOT OPENSSL_FOUND)
       message(STATUS "Warning: OPENSSL support will be disabled because openssl was not found.")
       set(WITH_OPENSSL "")
@@ -75,15 +67,11 @@
       list(APPEND CMAKE_REQUIRED_INCLUDES "${OPENSSL_INCLUDE_DIR}")
       CHECK_CXX_SOURCE_COMPILES("extern \"C\" {\n#include <openssl/ssl.h>\n}\nint main(){\n#if OPENSSL_VERSION_NUMBER < 0x10002000L\n#error OpenSSL too old\n#endif\n}\n" OPENSSL_VERSION_CHECK)
       set(CMAKE_REQUIRED_INCLUDES "${TEMP_INCLUDES}")
-      if(OPENSSL_VERSION_CHECK)
+      if(1)
         message(STATUS "Info: DCMTK OPENSSL support will be enabled")
         set(WITH_OPENSSL 1)
         include_directories(${OPENSSL_INCLUDE_DIR})
-        set(OPENSSL_LIBS ${OPENSSL_LIBRARIES} ${OPENSSL_EXTRA_LIBS_STATIC})
-        CHECK_LIBRARY_EXISTS(dl dlopen "" HAVE_LIBDL)
-        if(HAVE_LIBDL)
-          set(OPENSSL_LIBS ${OPENSSL_LIBS} dl)
-        endif()
+        set(OPENSSL_LIBS OpenSSL::SSL OpenSSL::Crypto)
       else()
         message(STATUS "Info: DCMTK OPENSSL support will be disabled: DCMTK requires OpenSSL version 1.0.2 or newer")
         set(DCMTK_WITH_OPENSSL OFF CACHE BOOL "" FORCE)
@@ -94,7 +82,7 @@
 
   # Find libXML2
   if(DCMTK_WITH_XML)
-    find_package(LibXml2 QUIET)
+    find_package(LibXml2 REQUIRED MODULE)
     if(NOT LIBXML2_FOUND)
       message(STATUS "Warning: XML support will be disabled because libxml2 was not found.")
       set(WITH_LIBXML "")
@@ -103,13 +91,13 @@
       message(STATUS "Info: DCMTK XML support will be enabled")
       set(WITH_LIBXML 1)
       include_directories(${LIBXML2_INCLUDE_DIR})
-      set(LIBXML_LIBS ${LIBXML2_LIBRARIES} ${LIBXML2_EXTRA_LIBS_STATIC})
+      set(LIBXML_LIBS LibXml2::LibXml2)
     endif()
   endif()
 
   # Find zlib
   if(DCMTK_WITH_ZLIB)
-    find_package(ZLIB QUIET)
+    find_package(ZLIB REQUIRED)
     if(NOT ZLIB_FOUND)
       message(STATUS "Warning: ZLIB support will be disabled because zlib was not found.")
       set(WITH_ZLIB "")
@@ -118,7 +106,7 @@
       message(STATUS "Info: DCMTK ZLIB support will be enabled")
       set(WITH_ZLIB 1)
       include_directories(${ZLIB_INCLUDE_DIRS})
-      set(ZLIB_LIBS ${ZLIB_LIBRARIES})
+      set(ZLIB_LIBS ZLIB::ZLIB)
     endif()
   endif()
 
@@ -139,11 +127,10 @@
 
   # Find libiconv
   if(DCMTK_WITH_ICONV)
-    find_package(Iconv QUIET)
-    find_package(LIBCHARSET QUIET)
-    if(ICONV_FOUND)
+    find_package(Iconv REQUIRED)
+    if(Iconv_FOUND)
         if(NOT Iconv_IS_BUILT_IN)
-            set(LIBICONV_FOUND ${ICONV_FOUND})
+            set(LIBICONV_FOUND ${Iconv_FOUND})
         else()
             message(STATUS "Info: found builtin ICONV support inside the C standard library.")
             set(DCMTK_WITH_STDLIBC_ICONV ON CACHE BOOL "" FORCE)
@@ -153,7 +140,7 @@
             set(LIBICONV_SECOND_ARGUMENT_CONST ${ICONV_SECOND_ARGUMENT_IS_CONST} CACHE INTERNAL "${HELPSTRING}")
         endif()
     endif()
-    if(NOT LIBICONV_FOUND OR NOT LIBCHARSET_FOUND)
+    if(NOT LIBICONV_FOUND)
       message(STATUS "Warning: ICONV support will be disabled because libiconv was not found. Correct LIBICONV_LIBDIR and LIBICONV_INCLUDE_DIR and re-enable DCMTK_WITH_ICONV.")
       set(DCMTK_WITH_ICONV OFF CACHE BOOL "" FORCE)
       set(WITH_LIBICONV "")
@@ -161,24 +148,24 @@
       message(STATUS "Info: DCMTK ICONV support will be enabled")
       set(WITH_LIBICONV 1)
       set(LIBICONV_INCDIR ${LIBICONV_INCLUDE_DIRS} ${Iconv_INCLUDE_DIRS} ${ICONV_INCLUDE_DIR} ${LIBCHARSET_INCLUDE_DIRS})
-      set(LIBICONV_LIBDIR ${LIBICONV_LIBDIR})
-      set(LIBICONV_LIBS ${LIBICONV_LIBRARIES} ${Iconv_LIBRARIES} ${ICONV_LIBRARIES} ${LIBCHARSET_LIBRARY})
+      set(LIBICONV_LIBDIR ${Iconv_LIB_DIRS})
+      set(LIBICONV_LIBS Iconv::Iconv)
       include_directories(${LIBICONV_INCDIR})
     endif()
   endif()
 
   # Find libwrap
   if(DCMTK_WITH_WRAP)
-    find_package(WRAP QUIET)
-    if(NOT WRAP_FOUND)
+    find_package(tcp-wrappers REQUIRED CONFIG)
+    if(NOT tcp-wrappers_FOUND)
       message(STATUS "Warning: WRAP support will be disabled because libwrap was not found.")
       set(WITH_TCPWRAPPER "")
       set(DCMTK_WITH_WRAP OFF CACHE BOOL "" FORCE)
     else()
       message(STATUS "Info: DCMTK WRAP support will be enabled")
       set(WITH_TCPWRAPPER 1)
-      include_directories(${WRAP_INCLUDE_DIRS})
-      set(WRAP_LIBS ${WRAP_LIBRARIES} ${WRAP_EXTRA_LIBS_STATIC})
+      include_directories(${tcp-wrappers_INCLUDE_DIRS})
+      set(WRAP_LIBS tcp-wrappers::tcp-wrappers)
     endif()
   endif()
 
