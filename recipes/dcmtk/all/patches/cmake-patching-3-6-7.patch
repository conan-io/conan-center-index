--- CMake/3rdparty.cmake
+++ CMake/3rdparty.cmake
@@ -21,7 +21,7 @@ mark_as_advanced(DCMTK_USE_FIND_PACKAGE)
 if(DCMTK_USE_FIND_PACKAGE)
   # Find TIFF
   if(DCMTK_WITH_TIFF)
-    find_package(TIFF QUIET)
+    find_package(TIFF REQUIRED)
     # turn off library if it could not be found
     if(NOT TIFF_FOUND)
       message(STATUS "Warning: TIFF support will be disabled because libtiff was not found.")
@@ -30,21 +30,21 @@ if(DCMTK_USE_FIND_PACKAGE)
     else()
       set(WITH_LIBTIFF 1)
       # libtiff can be compiled with libjpeg support; if available, add libjpeg to library and include path
-      find_package(JPEG QUIET)
+      find_package(JPEG REQUIRED)
       if(NOT JPEG_FOUND)
         message(STATUS "Info: DCMTK TIFF support will be enabled (but without JPEG)")
-        include_directories(${TIFF_INCLUDE_DIR})
+        include_directories(${TIFF_INCLUDE_DIRS})
       else()
         message(STATUS "Info: DCMTK TIFF support will be enabled")
-        include_directories(${TIFF_INCLUDE_DIR} ${JPEG_INCLUDE_DIR})
+        include_directories(${TIFF_INCLUDE_DIRS} ${JPEG_INCLUDE_DIRS})
       endif()
-      set(LIBTIFF_LIBS ${TIFF_LIBRARY} ${TIFF_EXTRA_LIBS_STATIC} ${JPEG_LIBRARY})
+      set(LIBTIFF_LIBS ${TIFF_LIBRARIES} ${JPEG_LIBRARIES})
     endif()
   endif()
 
   # Find PNG
   if(DCMTK_WITH_PNG)
-    find_package(PNG QUIET)
+    find_package(PNG REQUIRED)
     if(NOT PNG_FOUND)
       set(DCMTK_WITH_PNG OFF CACHE BOOL "" FORCE)
       message(STATUS "Warning: PNG support will be disabled because libpng was not found.")
@@ -53,13 +53,13 @@ if(DCMTK_USE_FIND_PACKAGE)
       message(STATUS "Info: DCMTK PNG support will be enabled")
       set(WITH_LIBPNG 1)
       include_directories(${PNG_INCLUDE_DIR})
-      set(LIBPNG_LIBS ${PNG_LIBRARY})
+      set(LIBPNG_LIBS ${PNG_LIBRARIES})
     endif()
   endif()
 
   # Find OpenSSL
   if(DCMTK_WITH_OPENSSL)
-    find_package(OpenSSL QUIET)
+    find_package(OpenSSL REQUIRED)
     if(NOT OPENSSL_FOUND)
       message(STATUS "Warning: OPENSSL support will be disabled because openssl was not found.")
       set(WITH_OPENSSL "")
@@ -90,7 +90,7 @@ if(DCMTK_USE_FIND_PACKAGE)
 
   # Find libXML2
   if(DCMTK_WITH_XML)
-    find_package(LibXml2 QUIET)
+    find_package(LibXml2 REQUIRED)
     if(NOT LIBXML2_FOUND)
       message(STATUS "Warning: XML support will be disabled because libxml2 was not found.")
       set(WITH_LIBXML "")
@@ -105,7 +105,7 @@ if(DCMTK_USE_FIND_PACKAGE)
 
   # Find zlib
   if(DCMTK_WITH_ZLIB)
-    find_package(ZLIB QUIET)
+    find_package(ZLIB REQUIRED)
     if(NOT ZLIB_FOUND)
       message(STATUS "Warning: ZLIB support will be disabled because zlib was not found.")
       set(WITH_ZLIB "")
@@ -120,7 +120,7 @@ if(DCMTK_USE_FIND_PACKAGE)
 
   # Find libsndfile
   if(DCMTK_WITH_SNDFILE)
-    find_package(SNDFILE QUIET)
+    find_package(SNDFILE REQUIRED)
     if(NOT SNDFILE_LIBS)
       message(STATUS "Warning: SNDFILE support will be disabled because libsndfile was not found.")
       set(WITH_SNDFILE "")
@@ -135,9 +135,9 @@ if(DCMTK_USE_FIND_PACKAGE)
 
   # Find libiconv
   if(DCMTK_WITH_ICONV)
-    find_package(Iconv QUIET)
-    find_package(LIBCHARSET QUIET)
-    if(ICONV_FOUND)
+    find_package(Iconv REQUIRED)
+    find_package(LIBCHARSET REQUIRED)
+    if(Iconv_FOUND)
         if(NOT Iconv_IS_BUILT_IN)
             set(LIBICONV_FOUND ${ICONV_FOUND})
         else()
@@ -158,7 +158,7 @@ if(DCMTK_USE_FIND_PACKAGE)
       set(WITH_LIBICONV 1)
       set(LIBICONV_INCDIR ${LIBICONV_INCLUDE_DIRS} ${Iconv_INCLUDE_DIRS} ${ICONV_INCLUDE_DIR} ${LIBCHARSET_INCLUDE_DIRS})
       set(LIBICONV_LIBDIR ${LIBICONV_LIBDIR})
-      set(LIBICONV_LIBS ${LIBICONV_LIBRARIES} ${Iconv_LIBRARIES} ${ICONV_LIBRARIES} ${LIBCHARSET_LIBRARY})
+      set(LIBICONV_LIBS Iconv::Iconv)
       include_directories(${LIBICONV_INCDIR})
     endif()
   endif()
@@ -241,13 +241,15 @@ else()
   # libxml support: configure compiler
   if(DCMTK_WITH_XML)
     if(WITH_LIBXMLINC)
-      set(LIBXML_INCDIR "${WITH_LIBXMLINC}/include")
-      set(LIBXML_LIBDIR "${WITH_LIBXMLINC}/lib")
-      set(LIBXML_LIBS debug "${LIBXML_LIBDIR}/libxml2_d.lib" optimized "${LIBXML_LIBDIR}/libxml2_o.lib" debug "${LIBXML_LIBDIR}/iconv_d.lib" optimized "${LIBXML_LIBDIR}/iconv_o.lib")
+      set(LIBXML_INCDIR ${CONAN_INCLUDE_DIRS_LIBXML2} ${CONAN_INCLUDE_DIRS_ICONV})
+      link_directories(${WITH_LIBXMLINC}/lib)
+      set(LIBXML_LIBS ${CONAN_LIBS_LIBXML2})
       message(STATUS "Info: DCMTK XML support will be enabled")
       set(WITH_LIBXML 1)
+      if(NOT WITH_LIBXML_SHARED)
       # this hides some warnings that are emitted when linking against libxmlXXX.lib instead of linking the DLL directly
       add_definitions("-DLIBXML_STATIC")
+      endif()
     else() # turn off library if library path not set
       message(STATUS "Warning: XML support will be disabled because libxml2 directory is not specified. Correct path and re-enable DCMTK_WITH_XML.")
       set(DCMTK_WITH_XML OFF CACHE BOOL "" FORCE)
@@ -259,8 +261,8 @@ else()
   if(DCMTK_WITH_PNG)
     if(WITH_LIBPNGINC)
       set(LIBPNG_INCDIR "${WITH_LIBPNGINC}/include")
-      set(LIBPNG_LIBDIR "${WITH_LIBPNGINC}/lib")
-      set(LIBPNG_LIBS debug "${LIBPNG_LIBDIR}/libpng_d.lib" optimized "${LIBPNG_LIBDIR}/libpng_o.lib")
+      link_directories(${WITH_LIBPNGINC}/lib)
+      set(LIBPNG_LIBS CONAN_PKG::libpng)
       message(STATUS "Info: DCMTK PNG support will be enabled")
       set(WITH_LIBPNG 1)
     else() # turn off library if library path not set
@@ -274,8 +276,8 @@ else()
   if(DCMTK_WITH_TIFF)
     if(WITH_LIBTIFFINC)
       set(LIBTIFF_INCDIR "${WITH_LIBTIFFINC}/include")
-      set(LIBTIFF_LIBDIR "${WITH_LIBTIFFINC}/lib")
-      set(LIBTIFF_LIBS debug "${LIBTIFF_LIBDIR}/libtiff_d.lib" optimized "${LIBTIFF_LIBDIR}/libtiff_o.lib")
+      link_directories(${WITH_LIBTIFFINC}/lib)
+      set(LIBTIFF_LIBS CONAN_PKG::libtiff)
       message(STATUS "Info: DCMTK TIFF support will be enabled")
       set(WITH_LIBTIFF 1)
     else() # turn off library if library path not set
@@ -291,9 +293,9 @@ else()
       include(CheckCXXSourceCompiles)
       set(OPENSSL_BINDIR "${WITH_OPENSSLINC}/bin")
       set(OPENSSL_INCDIR "${WITH_OPENSSLINC}/include")
-      set(OPENSSL_LIBDIR "${WITH_OPENSSLINC}/lib")
+      link_directories(${WITH_OPENSSLINC}/lib)
       # starting with OpenSSL 1.1.0, the Windows crypt32 library is needed for a static link of OpenSSL.
-      set(OPENSSL_LIBS "crypt32" debug "${OPENSSL_LIBDIR}/dcmtkssl_d.lib" optimized "${OPENSSL_LIBDIR}/dcmtkssl_o.lib" debug "${OPENSSL_LIBDIR}/dcmtkcrypto_d.lib" optimized "${OPENSSL_LIBDIR}/dcmtkcrypto_o.lib")
+      set(OPENSSL_LIBS ${CONAN_LIBS_OPENSSL})
       set(TEMP_INCLUDES "${CMAKE_REQUIRED_INCLUDES}")
       list(APPEND CMAKE_REQUIRED_INCLUDES "${OPENSSL_INCDIR}")
       CHECK_CXX_SOURCE_COMPILES("extern \"C\" {\n#include <openssl/ssl.h>\n}\nint main(){\n#if OPENSSL_VERSION_NUMBER < 0x10001000L\n#error OpenSSL too old\n#endif\n}\n" OPENSSL_VERSION_CHECK)
@@ -317,8 +319,8 @@ else()
   if(DCMTK_WITH_ZLIB)
     if(WITH_ZLIBINC)
       set(ZLIB_INCDIR "${WITH_ZLIBINC}/include")
-      set(ZLIB_LIBDIR "${WITH_ZLIBINC}/lib")
-      set(ZLIB_LIBS debug "${ZLIB_LIBDIR}/zlib_d.lib" optimized "${ZLIB_LIBDIR}/zlib_o.lib")
+      link_directories(${WITH_ZLIBINC}/lib)
+      set(ZLIB_LIBS CONAN_PKG::zlib)
       message(STATUS "Info: DCMTK ZLIB support will be enabled")
       set(WITH_ZLIB 1)
     else() # turn off library if library path not set
@@ -332,8 +334,8 @@ else()
   if(DCMTK_WITH_SNDFILE)
     if(WITH_SNDFILEINC)
       set(SNDFILE_INCDIR "${WITH_SNDFILEINC}/include")
-      set(SNDFILE_LIBDIR "${WITH_SNDFILEINC}/lib")
-      set(SNDFILE_LIBS debug "${SNDFILE_LIBDIR}/libsndfile_d.lib" optimized "${SNDFILE_LIBDIR}/libsndfile_o.lib")
+      link_directories(${WITH_SNDFILEINC}/lib)
+      set(SNDFILE_LIBS CONAN_PKG::libsndfile)
       message(STATUS "Info: DCMTK SNDFILE support will be enabled")
       set(WITH_SNDFILE 1)
     else() # turn off library if library path not set
@@ -347,8 +349,8 @@ else()
   if(DCMTK_WITH_ICONV)
     if(WITH_LIBICONVINC)
       set(LIBICONV_INCDIR "${WITH_LIBICONVINC}/include")
-      set(LIBICONV_LIBDIR "${WITH_LIBICONVINC}/lib")
-      set(LIBICONV_LIBS debug "${LIBICONV_LIBDIR}/libiconv_d.lib" optimized "${LIBICONV_LIBDIR}/libiconv_o.lib")
+      link_directories(${WITH_LIBICONVINC}/lib)
+      set(LIBICONV_LIBS CONAN_PKG::libiconv)
       message(STATUS "Info: DCMTK ICONV support will be enabled")
       set(WITH_LIBICONV 1)
     else() # turn off library if library path not set
@@ -371,7 +373,7 @@ else()
       else()
           set(OPENJPEG_INCDIR "${WITH_OPENJPEGINC1}")
           set(OPENJPEG_LIBDIR "${WITH_OPENJPEGINC}/lib")
-          set(OPENJPEG_LIBS debug "${OPENJPEG_LIBDIR}/openjp2_d.lib" optimized "${OPENJPEG_LIBDIR}/openjp2_o.lib")
+          set(OPENJPEG_LIBS CONAN_PKG::openjpeg)
           message(STATUS "Info: DCMTK OpenJPEG support will be enabled")
           set(WITH_OPENJPEG 1)
       endif()
@@ -395,7 +397,7 @@ if(NOT DEFINED DCMTK_WITH_STDLIBC_ICONV)
 endif()
 
 if(DCMTK_WITH_ICU)
-  find_package(ICU COMPONENTS uc data QUIET)
+  find_package(ICU COMPONENTS uc data REQUIRED)
   if(NOT ICU_FOUND)
     message(STATUS "Warning: ICU support will be disabled because the ICU were not found.")
     set(DCMTK_WITH_ICU OFF CACHE BOOL "" FORCE)
@@ -411,7 +413,7 @@ endif()
 
 # Find doxygen
 if(DCMTK_WITH_DOXYGEN)
-  find_package(Doxygen QUIET) # will set variable DOXYGEN_EXECUTABLE
+  find_package(Doxygen REQUIRED) # will set variable DOXYGEN_EXECUTABLE
   if(NOT DOXYGEN_FOUND)
     message(STATUS "Warning: DOXYGEN support will be disabled because doxygen was not found.")
     set(DCMTK_WITH_DOXYGEN OFF CACHE BOOL "" FORCE)
