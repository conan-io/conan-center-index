--- CMake/3rdparty.cmake
+++ CMake/3rdparty.cmake
@@ -42,7 +42,7 @@
     if(WITH_LIBXMLINC)
-      set(LIBXML_INCDIR "${WITH_LIBXMLINC}/include")
-      set(LIBXML_LIBDIR "${WITH_LIBXMLINC}/lib")
-      set(LIBXML_LIBS debug "${LIBXML_LIBDIR}/libxml2_d.lib" optimized "${LIBXML_LIBDIR}/libxml2_o.lib" debug "${LIBXML_LIBDIR}/iconv_d.lib" optimized "${LIBXML_LIBDIR}/iconv_o.lib")
+      set(LIBXML_INCDIR ${CONAN_INCLUDE_DIRS_LIBXML2} ${CONAN_INCLUDE_DIRS_ICONV})
+      link_directories(${WITH_LIBXMLINC}/lib)
+      set(LIBXML_LIBS ${CONAN_LIBS_LIBXML2})
       message(STATUS "Info: DCMTK XML support will be enabled")
       set(WITH_LIBXML 1)
       # this hides some warnings that are emitted when linking against libxmlXXX.lib instead of linking the DLL directly
@@ -59,7 +59,7 @@
     if(WITH_LIBPNGINC)
       set(LIBPNG_INCDIR "${WITH_LIBPNGINC}/include")
-      set(LIBPNG_LIBDIR "${WITH_LIBPNGINC}/lib")
-      set(LIBPNG_LIBS debug "${LIBPNG_LIBDIR}/libpng_d.lib" optimized "${LIBPNG_LIBDIR}/libpng_o.lib")
+      link_directories(${WITH_LIBPNGINC}/lib)
+      set(LIBPNG_LIBS CONAN_PKG::libpng)
       message(STATUS "Info: DCMTK PNG support will be enabled")
       set(WITH_LIBPNG 1)
     else() # turn off library if library path not set
@@ -74,7 +74,7 @@
     if(WITH_LIBTIFFINC)
       set(LIBTIFF_INCDIR "${WITH_LIBTIFFINC}/include")
-      set(LIBTIFF_LIBDIR "${WITH_LIBTIFFINC}/lib")
-      set(LIBTIFF_LIBS debug "${LIBTIFF_LIBDIR}/libtiff_d.lib" optimized "${LIBTIFF_LIBDIR}/libtiff_o.lib")
+      link_directories(${WITH_LIBTIFFINC}/lib)
+      set(LIBTIFF_LIBS CONAN_PKG::libtiff)
       message(STATUS "Info: DCMTK TIFF support will be enabled")
       set(WITH_LIBTIFF 1)
     else() # turn off library if library path not set
@@ -92,7 +92,7 @@
       set(OPENSSL_INCDIR "${WITH_OPENSSLINC}/include")
-      set(OPENSSL_LIBDIR "${WITH_OPENSSLINC}/lib")
+      link_directories(${WITH_OPENSSLINC}/lib)
       # starting with OpenSSL 1.1.0, the Windows crypt32 library is needed for a static link of OpenSSL.
-      set(OPENSSL_LIBS "crypt32" debug "${OPENSSL_LIBDIR}/dcmtkssl_d.lib" optimized "${OPENSSL_LIBDIR}/dcmtkssl_o.lib" debug "${OPENSSL_LIBDIR}/dcmtkcrypto_d.lib" optimized "${OPENSSL_LIBDIR}/dcmtkcrypto_o.lib")
+      set(OPENSSL_LIBS ${CONAN_LIBS_OPENSSL})
       set(TEMP_INCLUDES "${CMAKE_REQUIRED_INCLUDES}")
       list(APPEND CMAKE_REQUIRED_INCLUDES "${OPENSSL_INCDIR}")
       CHECK_CXX_SOURCE_COMPILES("extern \"C\" {\n#include <openssl/ssl.h>\n}\nint main(){\n#if OPENSSL_VERSION_NUMBER < 0x10001000L\n#error OpenSSL too old\n#endif\n}\n" OPENSSL_VERSION_CHECK)
@@ -117,7 +117,7 @@
     if(WITH_ZLIBINC)
       set(ZLIB_INCDIR "${WITH_ZLIBINC}/include")
-      set(ZLIB_LIBDIR "${WITH_ZLIBINC}/lib")
-      set(ZLIB_LIBS debug "${ZLIB_LIBDIR}/zlib_d.lib" optimized "${ZLIB_LIBDIR}/zlib_o.lib")
+      link_directories(${WITH_ZLIBINC}/lib)
+      set(ZLIB_LIBS CONAN_PKG::zlib)
       message(STATUS "Info: DCMTK ZLIB support will be enabled")
       set(WITH_ZLIB 1)
     else() # turn off library if library path not set
@@ -132,7 +132,7 @@
     if(WITH_SNDFILEINC)
       set(SNDFILE_INCDIR "${WITH_SNDFILEINC}/include")
-      set(SNDFILE_LIBDIR "${WITH_SNDFILEINC}/lib")
-      set(SNDFILE_LIBS debug "${SNDFILE_LIBDIR}/libsndfile_d.lib" optimized "${SNDFILE_LIBDIR}/libsndfile_o.lib")
+      link_directories(${WITH_SNDFILEINC}/lib)
+      set(SNDFILE_LIBS CONAN_PKG::libsndfile)
       message(STATUS "Info: DCMTK SNDFILE support will be enabled")
       set(WITH_SNDFILE 1)
     else() # turn off library if library path not set
@@ -147,7 +147,7 @@
     if(WITH_LIBICONVINC)
       set(LIBICONV_INCDIR "${WITH_LIBICONVINC}/include")
-      set(LIBICONV_LIBDIR "${WITH_LIBICONVINC}/lib")
-      set(LIBICONV_LIBS debug "${LIBICONV_LIBDIR}/libiconv_d.lib" optimized "${LIBICONV_LIBDIR}/libiconv_o.lib")
+      link_directories(${WITH_LIBICONVINC}/lib)
+      set(LIBICONV_LIBS CONAN_PKG::libiconv)
       message(STATUS "Info: DCMTK ICONV support will be enabled")
       set(WITH_LIBICONV 1)
     else() # turn off library if library path not set
@@ -170,7 +170,7 @@
       else()
           set(OPENJPEG_INCDIR "${WITH_OPENJPEGINC1}")
           set(OPENJPEG_LIBDIR "${WITH_OPENJPEGINC}/lib")
-          set(OPENJPEG_LIBS debug "${OPENJPEG_LIBDIR}/openjp2_d.lib" optimized "${OPENJPEG_LIBDIR}/openjp2_o.lib")
+          set(OPENJPEG_LIBS CONAN_PKG::openjpeg)
           message(STATUS "Info: DCMTK OpenJPEG support will be enabled")
           set(WITH_OPENJPEG 1)
       endif()
@@ -185,7 +185,7 @@
 
   # Find TIFF
   if(DCMTK_WITH_TIFF)
-    find_package(TIFF QUIET)
+    find_package(TIFF REQUIRED)
     # turn off library if it could not be found
     if(NOT TIFF_FOUND)
       message(STATUS "Warning: TIFF support will be disabled because libtiff was not found.")
@@ -194,21 +194,21 @@
     else()
       set(WITH_LIBTIFF 1)
       # libtiff can be compiled with libjpeg support; if available, add libjpeg to library and include path
-      find_package(JPEG QUIET)
+      find_package(JPEG REQUIRED)
       if(NOT JPEG_FOUND)
         message(STATUS "Info: DCMTK TIFF support will be enabled (but without JPEG)")
-        include_directories(${TIFF_INCLUDE_DIR})
+        include_directories(${TIFF_INCLUDE_DIRS})
       else()
         message(STATUS "Info: DCMTK TIFF support will be enabled")
-        include_directories(${TIFF_INCLUDE_DIR} ${JPEG_INCLUDE_DIR})
+        include_directories(${TIFF_INCLUDE_DIRS} ${JPEG_INCLUDE_DIRS})
       endif()
-      set(LIBTIFF_LIBS ${TIFF_LIBRARY} ${JPEG_LIBRARY})
+      set(LIBTIFF_LIBS ${TIFF_LIBRARIES} ${JPEG_LIBRARIES})
     endif()
   endif()
 
   # Find PNG
   if(DCMTK_WITH_PNG)
-    find_package(PNG QUIET)
+    find_package(PNG REQUIRED)
     if(NOT PNG_FOUND)
       set(DCMTK_WITH_PNG OFF CACHE BOOL "" FORCE)
       message(STATUS "Warning: PNG support will be disabled because libpng was not found.")
@@ -217,13 +217,13 @@
       message(STATUS "Info: DCMTK PNG support will be enabled")
       set(WITH_LIBPNG 1)
       include_directories(${PNG_INCLUDE_DIR})
-      set(LIBPNG_LIBS ${PNG_LIBRARY})
+      set(LIBPNG_LIBS ${PNG_LIBRARIES})
     endif()
   endif()
 
   # Find OpenSSL
   if(DCMTK_WITH_OPENSSL)
-    find_package(OpenSSL QUIET)
+    find_package(OpenSSL REQUIRED)
     if(NOT OPENSSL_FOUND)
       message(STATUS "Warning: OPENSSL support will be disabled because openssl was not found.")
       set(WITH_OPENSSL "")
@@ -232,14 +232,14 @@
       include(CheckLibraryExists)
       include(CheckCXXSourceCompiles)
       set(TEMP_INCLUDES "${CMAKE_REQUIRED_INCLUDES}")
-      list(APPEND CMAKE_REQUIRED_INCLUDES "${OPENSSL_INCLUDE_DIR}")
+      list(APPEND CMAKE_REQUIRED_INCLUDES ${OpenSSL_INCLUDE_DIRS})
       CHECK_CXX_SOURCE_COMPILES("extern \"C\" {\n#include <openssl/ssl.h>\n}\nint main(){\n#if OPENSSL_VERSION_NUMBER < 0x10001000L\n#error OpenSSL too old\n#endif\n}\n" OPENSSL_VERSION_CHECK)
       set(CMAKE_REQUIRED_INCLUDES "${TEMP_INCLUDES}")
       if(OPENSSL_VERSION_CHECK)
         message(STATUS "Info: DCMTK OPENSSL support will be enabled")
         set(WITH_OPENSSL 1)
-        include_directories(${OPENSSL_INCLUDE_DIR})
-        set(OPENSSL_LIBS ${OPENSSL_LIBRARIES})
+        include_directories(${OpenSSL_INCLUDE_DIRS})
+        set(OPENSSL_LIBS ${OpenSSL_LIBRARIES})
         CHECK_LIBRARY_EXISTS(dl dlopen "" HAVE_LIBDL)
         if(HAVE_LIBDL)
           set(OPENSSL_LIBS ${OPENSSL_LIBS} dl)
@@ -254,7 +254,7 @@
 
   # Find libXML2
   if(DCMTK_WITH_XML)
-    find_package(LibXml2 QUIET)
+    find_package(LibXml2 REQUIRED)
     if(NOT LIBXML2_FOUND)
       message(STATUS "Warning: XML support will be disabled because libxml2 was not found.")
       set(WITH_LIBXML "")
@@ -262,14 +262,14 @@
     else()
       message(STATUS "Info: DCMTK XML support will be enabled")
       set(WITH_LIBXML 1)
-      include_directories(${LIBXML2_INCLUDE_DIR})
-      set(LIBXML_LIBS ${LIBXML2_LIBRARIES})
+      include_directories(${LibXml2_INCLUDE_DIR})
+      set(LIBXML_LIBS ${LibXml2_LIBRARIES})
     endif()
   endif()
 
   # Find zlib
   if(DCMTK_WITH_ZLIB)
-    find_package(ZLIB QUIET)
+    find_package(ZLIB REQUIRED)
     if(NOT ZLIB_FOUND)
       message(STATUS "Warning: ZLIB support will be disabled because zlib was not found.")
       set(WITH_ZLIB "")
@@ -284,7 +284,7 @@
 
   # Find libsndfile
   if(DCMTK_WITH_SNDFILE)
-    find_package(Sndfile QUIET)
+    find_package(Sndfile REQUIRED)
     if(NOT SNDFILE_LIBS)
       message(STATUS "Warning: SNDFILE support will be disabled because libsndfile was not found.")
       set(WITH_SNDFILE "")
@@ -292,16 +292,16 @@
     else()
       message(STATUS "Info: DCMTK SNDFILE support will be enabled")
       set(WITH_SNDFILE 1)
-      include_directories(${SNDFILE_INCLUDE_DIRS})
-      set(SNDFILE_LIBS ${SNDFILE_LIBRARIES})
+      include_directories(${Sndfile_INCLUDE_DIRS})
+      set(SNDFILE_LIBS ${Sndfile_LIBRARIES})
     endif()
   endif()
 
   # Find libiconv
   if(DCMTK_WITH_ICONV)
-    find_package(Iconv QUIET)
-    find_package(Charset QUIET)
-    if(ICONV_FOUND)
+    find_package(Iconv REQUIRED)
+    #find_package(Charset REQUIRED) #FIXME??
+    if(Iconv_FOUND)
         if(NOT Iconv_IS_BUILT_IN)
             set(LIBICONV_FOUND ${ICONV_FOUND})
         else()
@@ -322,29 +322,29 @@
       set(WITH_LIBICONV 1)
       set(LIBICONV_INCDIR ${LIBICONV_INCLUDE_DIRS} ${Iconv_INCLUDE_DIRS} ${ICONV_INCLUDE_DIR} ${LIBCHARSET_INCLUDE_DIRS})
       set(LIBICONV_LIBDIR ${LIBICONV_LIBDIR})
-      set(LIBICONV_LIBS ${LIBICONV_LIBRARIES} ${Iconv_LIBRARIES} ${ICONV_LIBRARIES} ${LIBCHARSET_LIBRARY})
+      set(LIBICONV_LIBS Iconv::Iconv)
       include_directories(${LIBICONV_INCDIR})
     endif()
   endif()
 
   # Find libwrap
   if(DCMTK_WITH_WRAP)
-    find_package(Wrap QUIET)
+    find_package(Wrap REQUIRED)
     if(NOT WRAP_FOUND)
       message(STATUS "Warning: WRAP support will be disabled because libwrap was not found.")
       set(WITH_TCPWRAPPER "")
       set(DCMTK_WITH_WRAP OFF CACHE BOOL "" FORCE)
     else()
       message(STATUS "Info: DCMTK WRAP support will be enabled")
       set(WITH_TCPWRAPPER 1)
       include_directories(${WRAP_INCLUDE_DIRS})
       set(WRAP_LIBS ${WRAP_LIBRARIES})
     endif()
   endif()
 
   # Find OpenJPEG
   if(DCMTK_WITH_OPENJPEG)
-    find_package(OpenJPEG QUIET)
+    find_package(OpenJPEG REQUIRED)
     if(NOT OPENJPEG_FOUND)
       message(STATUS "Warning: OpenJPEG support will be disabled because the OpenJPEG library was not found.")
       set(WITH_OPENJPEG "")
@@ -352,8 +352,8 @@
     else()
       message(STATUS "Info: DCMTK OpenJPEG support will be enabled")
       set(WITH_OPENJPEG 1)
-      include_directories(${OPENJPEG_INCLUDE_DIRS})
-      set(OPENJPEG_LIBS ${OPENJPEG_LIBRARIES})
+      include_directories(${OpenJPEG_INCLUDE_DIRS})
+      set(OPENJPEG_LIBS ${OpenJPEG_LIBRARIES})
     endif()
   endif()
 
@@ -371,7 +371,7 @@
 endif()
 
 if(DCMTK_WITH_ICU)
-  find_package(ICU COMPONENTS uc data QUIET)
+  find_package(ICU COMPONENTS uc data REQUIRED)
   if(NOT ICU_FOUND)
     message(STATUS "Warning: ICU support will be disabled because the ICU were not found.")
     set(DCMTK_WITH_ICU OFF CACHE BOOL "" FORCE)
@@ -387,7 +387,7 @@
 
 # Find doxygen
 if(DCMTK_WITH_DOXYGEN)
-  find_package(Doxygen QUIET) # will set variable DOXYGEN_EXECUTABLE
+  find_package(Doxygen REQUIRED) # will set variable DOXYGEN_EXECUTABLE
   if(NOT DOXYGEN_FOUND)
     message(STATUS "Warning: DOXYGEN support will be disabled because doxygen was not found.")
     set(DCMTK_WITH_DOXYGEN OFF CACHE BOOL "" FORCE)
