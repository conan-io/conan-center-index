diff --git a/ref-impl/libjpeg/ansi2knr.c b/ref-impl/libjpeg/ansi2knr.c
index 4e05fc2..2d6a6e4 100644
--- a/ref-impl/libjpeg/ansi2knr.c
+++ b/ref-impl/libjpeg/ansi2knr.c
@@ -427,7 +427,7 @@ wl:			fputs(buf, out);
 char *
 skipspace(p, dir)
     register char *p;
-    register int dir;			/* 1 for forward, -1 for backward */
+    int dir;			/* 1 for forward, -1 for backward */
 {	for ( ; ; )
 	   {	while ( is_space(*p) )
 		  p += dir;
diff --git a/ref-impl/libjpeg/cdjpeg.c b/ref-impl/libjpeg/cdjpeg.c
index b6250ff..62411e6 100644
--- a/ref-impl/libjpeg/cdjpeg.c
+++ b/ref-impl/libjpeg/cdjpeg.c
@@ -121,8 +121,8 @@ end_progress_monitor (j_common_ptr cinfo)
 GLOBAL(boolean)
 keymatch (char * arg, const char * keyword, int minchars)
 {
-  register int ca, ck;
-  register int nmatched = 0;
+  int ca, ck;
+  int nmatched = 0;
 
   while ((ca = *arg++) != '\0') {
     if ((ck = *keyword++) == '\0')
diff --git a/ref-impl/libjpeg/jccolor.c b/ref-impl/libjpeg/jccolor.c
index 0a8a4b5..9cefd80 100644
--- a/ref-impl/libjpeg/jccolor.c
+++ b/ref-impl/libjpeg/jccolor.c
@@ -132,7 +132,7 @@ rgb_ycc_convert (j_compress_ptr cinfo,
 		 JDIMENSION output_row, int num_rows)
 {
   my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
-  register int r, g, b;
+  int r, g, b;
   register INT32 * ctab = cconvert->rgb_ycc_tab;
   register JSAMPROW inptr;
   register JSAMPROW outptr0, outptr1, outptr2;
@@ -188,7 +188,7 @@ rgb_gray_convert (j_compress_ptr cinfo,
 		  JDIMENSION output_row, int num_rows)
 {
   my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
-  register int r, g, b;
+  int r, g, b;
   register INT32 * ctab = cconvert->rgb_ycc_tab;
   register JSAMPROW inptr;
   register JSAMPROW outptr;
@@ -227,7 +227,7 @@ cmyk_ycck_convert (j_compress_ptr cinfo,
 		   JDIMENSION output_row, int num_rows)
 {
   my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
-  register int r, g, b;
+  int r, g, b;
   register INT32 * ctab = cconvert->rgb_ycc_tab;
   register JSAMPROW inptr;
   register JSAMPROW outptr0, outptr1, outptr2, outptr3;
@@ -313,7 +313,7 @@ null_convert (j_compress_ptr cinfo,
   register JSAMPROW inptr;
   register JSAMPROW outptr;
   register JDIMENSION col;
-  register int ci;
+  int ci;
   int nc = cinfo->num_components;
   JDIMENSION num_cols = cinfo->image_width;
 
diff --git a/ref-impl/libjpeg/jcdctmgr.c b/ref-impl/libjpeg/jcdctmgr.c
index 61fa79b..c441e9c 100644
--- a/ref-impl/libjpeg/jcdctmgr.c
+++ b/ref-impl/libjpeg/jcdctmgr.c
@@ -196,7 +196,7 @@ forward_DCT (j_compress_ptr cinfo, jpeg_component_info * compptr,
     /* Load data into workspace, applying unsigned->signed conversion */
     { register DCTELEM *workspaceptr;
       register JSAMPROW elemptr;
-      register int elemr;
+      int elemr;
 
       workspaceptr = workspace;
       for (elemr = 0; elemr < DCTSIZE; elemr++) {
@@ -211,7 +211,7 @@ forward_DCT (j_compress_ptr cinfo, jpeg_component_info * compptr,
 	*workspaceptr++ = GETJSAMPLE(*elemptr++) - CENTERJSAMPLE;
 	*workspaceptr++ = GETJSAMPLE(*elemptr++) - CENTERJSAMPLE;
 #else
-	{ register int elemc;
+	{ int elemc;
 	  for (elemc = DCTSIZE; elemc > 0; elemc--) {
 	    *workspaceptr++ = GETJSAMPLE(*elemptr++) - CENTERJSAMPLE;
 	  }
@@ -225,7 +225,7 @@ forward_DCT (j_compress_ptr cinfo, jpeg_component_info * compptr,
 
     /* Quantize/descale the coefficients, and store into coef_blocks[] */
     { register DCTELEM temp, qval;
-      register int i;
+      int i;
       register JCOEFPTR output_ptr = coef_blocks[bi];
 
       for (i = 0; i < DCTSIZE2; i++) {
@@ -286,7 +286,7 @@ forward_DCT_float (j_compress_ptr cinfo, jpeg_component_info * compptr,
     /* Load data into workspace, applying unsigned->signed conversion */
     { register FAST_FLOAT *workspaceptr;
       register JSAMPROW elemptr;
-      register int elemr;
+      int elemr;
 
       workspaceptr = workspace;
       for (elemr = 0; elemr < DCTSIZE; elemr++) {
@@ -301,7 +301,7 @@ forward_DCT_float (j_compress_ptr cinfo, jpeg_component_info * compptr,
 	*workspaceptr++ = (FAST_FLOAT)(GETJSAMPLE(*elemptr++) - CENTERJSAMPLE);
 	*workspaceptr++ = (FAST_FLOAT)(GETJSAMPLE(*elemptr++) - CENTERJSAMPLE);
 #else
-	{ register int elemc;
+	{ int elemc;
 	  for (elemc = DCTSIZE; elemc > 0; elemc--) {
 	    *workspaceptr++ = (FAST_FLOAT)
 	      (GETJSAMPLE(*elemptr++) - CENTERJSAMPLE);
@@ -316,7 +316,7 @@ forward_DCT_float (j_compress_ptr cinfo, jpeg_component_info * compptr,
 
     /* Quantize/descale the coefficients, and store into coef_blocks[] */
     { register FAST_FLOAT temp;
-      register int i;
+      int i;
       register JCOEFPTR output_ptr = coef_blocks[bi];
 
       for (i = 0; i < DCTSIZE2; i++) {
diff --git a/ref-impl/libjpeg/jchuff.c b/ref-impl/libjpeg/jchuff.c
index f235250..2db96e4 100644
--- a/ref-impl/libjpeg/jchuff.c
+++ b/ref-impl/libjpeg/jchuff.c
@@ -304,7 +304,7 @@ emit_bits (working_state * state, unsigned int code, int size)
 {
   /* This routine is heavily used, so it's worth coding tightly. */
   register INT32 put_buffer = (INT32) code;
-  register int put_bits = state->cur.put_bits;
+  int put_bits = state->cur.put_bits;
 
   /* if size is 0, caller used an invalid Huffman table entry */
   if (size == 0)
@@ -353,9 +353,9 @@ LOCAL(boolean)
 encode_one_block (working_state * state, JCOEFPTR block, int last_dc_val,
 		  c_derived_tbl *dctbl, c_derived_tbl *actbl)
 {
-  register int temp, temp2;
-  register int nbits;
-  register int k, r, i;
+  int temp, temp2;
+  int nbits;
+  int k, r, i;
   
   /* Encode the DC coefficient difference per section F.1.2.1 */
   
@@ -572,9 +572,9 @@ LOCAL(void)
 htest_one_block (j_compress_ptr cinfo, JCOEFPTR block, int last_dc_val,
 		 long dc_counts[], long ac_counts[])
 {
-  register int temp;
-  register int nbits;
-  register int k, r;
+  int temp;
+  int nbits;
+  int k, r;
   
   /* Encode the DC coefficient difference per section F.1.2.1 */
   
diff --git a/ref-impl/libjpeg/jcphuff.c b/ref-impl/libjpeg/jcphuff.c
index 07f9178..d147b9d 100644
--- a/ref-impl/libjpeg/jcphuff.c
+++ b/ref-impl/libjpeg/jcphuff.c
@@ -230,7 +230,7 @@ emit_bits (phuff_entropy_ptr entropy, unsigned int code, int size)
 {
   /* This routine is heavily used, so it's worth coding tightly. */
   register INT32 put_buffer = (INT32) code;
-  register int put_bits = entropy->put_bits;
+  int put_bits = entropy->put_bits;
 
   /* if size is 0, caller used an invalid Huffman table entry */
   if (size == 0)
@@ -315,7 +315,7 @@ emit_buffered_bits (phuff_entropy_ptr entropy, char * bufstart,
 LOCAL(void)
 emit_eobrun (phuff_entropy_ptr entropy)
 {
-  register int temp, nbits;
+  int temp, nbits;
 
   if (entropy->EOBRUN > 0) {	/* if there is any pending EOBRUN */
     temp = entropy->EOBRUN;
@@ -377,8 +377,8 @@ METHODDEF(boolean)
 encode_mcu_DC_first (j_compress_ptr cinfo, JBLOCKROW *MCU_data)
 {
   phuff_entropy_ptr entropy = (phuff_entropy_ptr) cinfo->entropy;
-  register int temp, temp2;
-  register int nbits;
+  int temp, temp2;
+  int nbits;
   int blkn, ci;
   int Al = cinfo->Al;
   JBLOCKROW block;
@@ -464,9 +464,9 @@ METHODDEF(boolean)
 encode_mcu_AC_first (j_compress_ptr cinfo, JBLOCKROW *MCU_data)
 {
   phuff_entropy_ptr entropy = (phuff_entropy_ptr) cinfo->entropy;
-  register int temp, temp2;
-  register int nbits;
-  register int r, k;
+  int temp, temp2;
+  int nbits;
+  int r, k;
   int Se = cinfo->Se;
   int Al = cinfo->Al;
   JBLOCKROW block;
@@ -571,7 +571,7 @@ METHODDEF(boolean)
 encode_mcu_DC_refine (j_compress_ptr cinfo, JBLOCKROW *MCU_data)
 {
   phuff_entropy_ptr entropy = (phuff_entropy_ptr) cinfo->entropy;
-  register int temp;
+  int temp;
   int blkn;
   int Al = cinfo->Al;
   JBLOCKROW block;
@@ -618,8 +618,8 @@ METHODDEF(boolean)
 encode_mcu_AC_refine (j_compress_ptr cinfo, JBLOCKROW *MCU_data)
 {
   phuff_entropy_ptr entropy = (phuff_entropy_ptr) cinfo->entropy;
-  register int temp;
-  register int r, k;
+  int temp;
+  int r, k;
   int EOB;
   char *BR_buffer;
   unsigned int BR;
diff --git a/ref-impl/libjpeg/jcprepct.c b/ref-impl/libjpeg/jcprepct.c
index fa93333..9e7b9d4 100644
--- a/ref-impl/libjpeg/jcprepct.c
+++ b/ref-impl/libjpeg/jcprepct.c
@@ -106,7 +106,7 @@ LOCAL(void)
 expand_bottom_edge (JSAMPARRAY image_data, JDIMENSION num_cols,
 		    int input_rows, int output_rows)
 {
-  register int row;
+  int row;
 
   for (row = input_rows; row < output_rows; row++) {
     jcopy_sample_rows(image_data, input_rows-1, image_data, row,
diff --git a/ref-impl/libjpeg/jcsample.c b/ref-impl/libjpeg/jcsample.c
index 212ec87..ac23b96 100644
--- a/ref-impl/libjpeg/jcsample.c
+++ b/ref-impl/libjpeg/jcsample.c
@@ -89,7 +89,7 @@ expand_right_edge (JSAMPARRAY image_data, int num_rows,
 {
   register JSAMPROW ptr;
   register JSAMPLE pixval;
-  register int count;
+  int count;
   int row;
   int numcols = (int) (output_cols - input_cols);
 
@@ -216,7 +216,7 @@ h2v1_downsample (j_compress_ptr cinfo, jpeg_component_info * compptr,
   JDIMENSION outcol;
   JDIMENSION output_cols = compptr->width_in_blocks * DCTSIZE;
   register JSAMPROW inptr, outptr;
-  register int bias;
+  int bias;
 
   /* Expand input data enough to let all the output samples be generated
    * by the standard loop.  Special-casing padded output would be more
@@ -253,7 +253,7 @@ h2v2_downsample (j_compress_ptr cinfo, jpeg_component_info * compptr,
   JDIMENSION outcol;
   JDIMENSION output_cols = compptr->width_in_blocks * DCTSIZE;
   register JSAMPROW inptr0, inptr1, outptr;
-  register int bias;
+  int bias;
 
   /* Expand input data enough to let all the output samples be generated
    * by the standard loop.  Special-casing padded output would be more
diff --git a/ref-impl/libjpeg/jdcolor.c b/ref-impl/libjpeg/jdcolor.c
index 6c04dfe..0408d33 100644
--- a/ref-impl/libjpeg/jdcolor.c
+++ b/ref-impl/libjpeg/jdcolor.c
@@ -122,15 +122,15 @@ ycc_rgb_convert (j_decompress_ptr cinfo,
 		 JSAMPARRAY output_buf, int num_rows)
 {
   my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
-  register int y, cb, cr;
+  int y, cb, cr;
   register JSAMPROW outptr;
   register JSAMPROW inptr0, inptr1, inptr2;
   register JDIMENSION col;
   JDIMENSION num_cols = cinfo->output_width;
   /* copy these pointers into registers if possible */
   register JSAMPLE * range_limit = cinfo->sample_range_limit;
-  register int * Crrtab = cconvert->Cr_r_tab;
-  register int * Cbbtab = cconvert->Cb_b_tab;
+  int * Crrtab = cconvert->Cr_r_tab;
+  int * Cbbtab = cconvert->Cb_b_tab;
   register INT32 * Crgtab = cconvert->Cr_g_tab;
   register INT32 * Cbgtab = cconvert->Cb_g_tab;
   SHIFT_TEMPS
@@ -172,7 +172,7 @@ null_convert (j_decompress_ptr cinfo,
 {
   register JSAMPROW inptr, outptr;
   register JDIMENSION count;
-  register int num_components = cinfo->num_components;
+  int num_components = cinfo->num_components;
   JDIMENSION num_cols = cinfo->output_width;
   int ci;
 
@@ -247,15 +247,15 @@ ycck_cmyk_convert (j_decompress_ptr cinfo,
 		   JSAMPARRAY output_buf, int num_rows)
 {
   my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
-  register int y, cb, cr;
+  int y, cb, cr;
   register JSAMPROW outptr;
   register JSAMPROW inptr0, inptr1, inptr2, inptr3;
   register JDIMENSION col;
   JDIMENSION num_cols = cinfo->output_width;
   /* copy these pointers into registers if possible */
   register JSAMPLE * range_limit = cinfo->sample_range_limit;
-  register int * Crrtab = cconvert->Cr_r_tab;
-  register int * Cbbtab = cconvert->Cb_b_tab;
+  int * Crrtab = cconvert->Cr_r_tab;
+  int * Cbbtab = cconvert->Cb_b_tab;
   register INT32 * Crgtab = cconvert->Cr_g_tab;
   register INT32 * Cbgtab = cconvert->Cb_g_tab;
   SHIFT_TEMPS
diff --git a/ref-impl/libjpeg/jdhuff.c b/ref-impl/libjpeg/jdhuff.c
index b5ba39f..8215e12 100644
--- a/ref-impl/libjpeg/jdhuff.c
+++ b/ref-impl/libjpeg/jdhuff.c
@@ -290,7 +290,7 @@ jpeg_make_d_derived_tbl (j_decompress_ptr cinfo, boolean isDC, int tblno,
 
 GLOBAL(boolean)
 jpeg_fill_bit_buffer (bitread_working_state * state,
-		      register bit_buf_type get_buffer, register int bits_left,
+		      register bit_buf_type get_buffer, int bits_left,
 		      int nbits)
 /* Load up the bit buffer to a depth of at least nbits */
 {
@@ -305,7 +305,7 @@ jpeg_fill_bit_buffer (bitread_working_state * state,
 
   if (cinfo->unread_marker == 0) {	/* cannot advance past a marker */
     while (bits_left < MIN_GET_BITS) {
-      register int c;
+      int c;
 
       /* Attempt to read a byte */
       if (bytes_in_buffer == 0) {
@@ -396,10 +396,10 @@ jpeg_fill_bit_buffer (bitread_working_state * state,
 
 GLOBAL(int)
 jpeg_huff_decode (bitread_working_state * state,
-		  register bit_buf_type get_buffer, register int bits_left,
+		  register bit_buf_type get_buffer, int bits_left,
 		  d_derived_tbl * htbl, int min_bits)
 {
-  register int l = min_bits;
+  int l = min_bits;
   register INT32 code;
 
   /* HUFF_DECODE has determined that the code is at least min_bits */
@@ -543,7 +543,7 @@ decode_mcu (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
       JBLOCKROW block = MCU_data[blkn];
       d_derived_tbl * dctbl = entropy->dc_cur_tbls[blkn];
       d_derived_tbl * actbl = entropy->ac_cur_tbls[blkn];
-      register int s, k, r;
+      int s, k, r;
 
       /* Decode a single block's worth of coefficients */
 
diff --git a/ref-impl/libjpeg/jdhuff.h b/ref-impl/libjpeg/jdhuff.h
index ae19b6c..6f497c8 100644
--- a/ref-impl/libjpeg/jdhuff.h
+++ b/ref-impl/libjpeg/jdhuff.h
@@ -101,7 +101,7 @@ typedef struct {		/* Bitreading working state within an MCU */
 /* Macros to declare and load/save bitread local variables. */
 #define BITREAD_STATE_VARS  \
 	register bit_buf_type get_buffer;  \
-	register int bits_left;  \
+	int bits_left;  \
 	bitread_working_state br_state
 
 #define BITREAD_LOAD_STATE(cinfop,permstate)  \
@@ -153,7 +153,7 @@ typedef struct {		/* Bitreading working state within an MCU */
 /* Load up the bit buffer to a depth of at least nbits */
 EXTERN(boolean) jpeg_fill_bit_buffer
 	JPP((bitread_working_state * state, register bit_buf_type get_buffer,
-	     register int bits_left, int nbits));
+	     int bits_left, int nbits));
 
 
 /*
@@ -174,7 +174,7 @@ EXTERN(boolean) jpeg_fill_bit_buffer
  */
 
 #define HUFF_DECODE(result,state,htbl,failaction,slowlabel) \
-{ register int nb, look; \
+{ int nb, look; \
   if (bits_left < HUFF_LOOKAHEAD) { \
     if (! jpeg_fill_bit_buffer(&state,get_buffer,bits_left, 0)) {failaction;} \
     get_buffer = state.get_buffer; bits_left = state.bits_left; \
@@ -198,4 +198,4 @@ slowlabel: \
 /* Out-of-line case for Huffman code fetching */
 EXTERN(int) jpeg_huff_decode
 	JPP((bitread_working_state * state, register bit_buf_type get_buffer,
-	     register int bits_left, d_derived_tbl * htbl, int min_bits));
+	     int bits_left, d_derived_tbl * htbl, int min_bits));
diff --git a/ref-impl/libjpeg/jdmerge.c b/ref-impl/libjpeg/jdmerge.c
index 3744446..b1cb5e0 100644
--- a/ref-impl/libjpeg/jdmerge.c
+++ b/ref-impl/libjpeg/jdmerge.c
@@ -228,7 +228,7 @@ h2v1_merged_upsample (j_decompress_ptr cinfo,
 		      JSAMPARRAY output_buf)
 {
   my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
-  register int y, cred, cgreen, cblue;
+  int y, cred, cgreen, cblue;
   int cb, cr;
   register JSAMPROW outptr;
   JSAMPROW inptr0, inptr1, inptr2;
@@ -290,7 +290,7 @@ h2v2_merged_upsample (j_decompress_ptr cinfo,
 		      JSAMPARRAY output_buf)
 {
   my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
-  register int y, cred, cgreen, cblue;
+  int y, cred, cgreen, cblue;
   int cb, cr;
   register JSAMPROW outptr0, outptr1;
   JSAMPROW inptr00, inptr01, inptr1, inptr2;
diff --git a/ref-impl/libjpeg/jdphuff.c b/ref-impl/libjpeg/jdphuff.c
index 2267809..c1dd7c3 100644
--- a/ref-impl/libjpeg/jdphuff.c
+++ b/ref-impl/libjpeg/jdphuff.c
@@ -287,7 +287,7 @@ decode_mcu_DC_first (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
 {   
   phuff_entropy_ptr entropy = (phuff_entropy_ptr) cinfo->entropy;
   int Al = cinfo->Al;
-  register int s, r;
+  int s, r;
   int blkn, ci;
   JBLOCKROW block;
   BITREAD_STATE_VARS;
@@ -359,7 +359,7 @@ decode_mcu_AC_first (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
   phuff_entropy_ptr entropy = (phuff_entropy_ptr) cinfo->entropy;
   int Se = cinfo->Se;
   int Al = cinfo->Al;
-  register int s, k, r;
+  int s, k, r;
   unsigned int EOBRUN;
   JBLOCKROW block;
   BITREAD_STATE_VARS;
@@ -494,7 +494,7 @@ decode_mcu_AC_refine (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
   int Se = cinfo->Se;
   int p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
   int m1 = (-1) << cinfo->Al;	/* -1 in the bit position being coded */
-  register int s, k, r;
+  int s, k, r;
   unsigned int EOBRUN;
   JBLOCKROW block;
   JCOEFPTR thiscoef;
diff --git a/ref-impl/libjpeg/jdsample.c b/ref-impl/libjpeg/jdsample.c
index 80ffefb..d04886c 100644
--- a/ref-impl/libjpeg/jdsample.c
+++ b/ref-impl/libjpeg/jdsample.c
@@ -193,7 +193,7 @@ int_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
   JSAMPARRAY output_data = *output_data_ptr;
   register JSAMPROW inptr, outptr;
   register JSAMPLE invalue;
-  register int h;
+  int h;
   JSAMPROW outend;
   int h_expand, v_expand;
   int inrow, outrow;
@@ -306,7 +306,7 @@ h2v1_fancy_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
 {
   JSAMPARRAY output_data = *output_data_ptr;
   register JSAMPROW inptr, outptr;
-  register int invalue;
+  int invalue;
   register JDIMENSION colctr;
   int inrow;
 
@@ -348,7 +348,7 @@ h2v2_fancy_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
   JSAMPARRAY output_data = *output_data_ptr;
   register JSAMPROW inptr0, inptr1, outptr;
 #if BITS_IN_JSAMPLE == 8
-  register int thiscolsum, lastcolsum, nextcolsum;
+  int thiscolsum, lastcolsum, nextcolsum;
 #else
   register INT32 thiscolsum, lastcolsum, nextcolsum;
 #endif
diff --git a/ref-impl/libjpeg/jquant1.c b/ref-impl/libjpeg/jquant1.c
index b2f96aa..e76bade 100644
--- a/ref-impl/libjpeg/jquant1.c
+++ b/ref-impl/libjpeg/jquant1.c
@@ -462,12 +462,12 @@ color_quantize (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
 {
   my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
   JSAMPARRAY colorindex = cquantize->colorindex;
-  register int pixcode, ci;
+  int pixcode, ci;
   register JSAMPROW ptrin, ptrout;
   int row;
   JDIMENSION col;
   JDIMENSION width = cinfo->output_width;
-  register int nc = cinfo->out_color_components;
+  int nc = cinfo->out_color_components;
 
   for (row = 0; row < num_rows; row++) {
     ptrin = input_buf[row];
@@ -489,7 +489,7 @@ color_quantize3 (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
 /* Fast path for out_color_components==3, no dithering */
 {
   my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
-  register int pixcode;
+  int pixcode;
   register JSAMPROW ptrin, ptrout;
   JSAMPROW colorindex0 = cquantize->colorindex[0];
   JSAMPROW colorindex1 = cquantize->colorindex[1];
@@ -567,7 +567,7 @@ quantize3_ord_dither (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
 /* Fast path for out_color_components==3, with ordered dithering */
 {
   my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
-  register int pixcode;
+  int pixcode;
   register JSAMPROW input_ptr;
   register JSAMPROW output_ptr;
   JSAMPROW colorindex0 = cquantize->colorindex[0];
diff --git a/ref-impl/libjpeg/jquant2.c b/ref-impl/libjpeg/jquant2.c
index af601e3..d47be3a 100644
--- a/ref-impl/libjpeg/jquant2.c
+++ b/ref-impl/libjpeg/jquant2.c
@@ -275,7 +275,7 @@ find_biggest_color_pop (boxptr boxlist, int numboxes)
 /* Returns NULL if no splittable boxes remain */
 {
   register boxptr boxp;
-  register int i;
+  int i;
   register long maxc = 0;
   boxptr which = NULL;
   
@@ -295,7 +295,7 @@ find_biggest_volume (boxptr boxlist, int numboxes)
 /* Returns NULL if no splittable boxes remain */
 {
   register boxptr boxp;
-  register int i;
+  int i;
   register INT32 maxv = 0;
   boxptr which = NULL;
   
@@ -920,7 +920,7 @@ pass2_no_dither (j_decompress_ptr cinfo,
   hist3d histogram = cquantize->histogram;
   register JSAMPROW inptr, outptr;
   register histptr cachep;
-  register int c0, c1, c2;
+  int c0, c1, c2;
   int row;
   JDIMENSION col;
   JDIMENSION width = cinfo->output_width;
@@ -1030,7 +1030,7 @@ pass2_fs_dither (j_decompress_ptr cinfo,
       if (*cachep == 0)
 	fill_inverse_cmap(cinfo, cur0>>C0_SHIFT,cur1>>C1_SHIFT,cur2>>C2_SHIFT);
       /* Now emit the colormap index for this cell */
-      { register int pixcode = *cachep - 1;
+      { int pixcode = *cachep - 1;
 	*outptr = (JSAMPLE) pixcode;
 	/* Compute representation error for this pixel */
 	cur0 -= GETJSAMPLE(colormap0[pixcode]);
diff --git a/ref-impl/libjpeg/jutils.c b/ref-impl/libjpeg/jutils.c
index d18a955..34175ce 100644
--- a/ref-impl/libjpeg/jutils.c
+++ b/ref-impl/libjpeg/jutils.c
@@ -123,7 +123,7 @@ jcopy_sample_rows (JSAMPARRAY input_array, int source_row,
 #else
   register JDIMENSION count;
 #endif
-  register int row;
+  int row;
 
   input_array += source_row;
   output_array += dest_row;
diff --git a/ref-impl/libjpeg/rdbmp.c b/ref-impl/libjpeg/rdbmp.c
index b05fe2a..b051e91 100644
--- a/ref-impl/libjpeg/rdbmp.c
+++ b/ref-impl/libjpeg/rdbmp.c
@@ -69,7 +69,7 @@ read_byte (bmp_source_ptr sinfo)
 /* Read next byte from BMP file */
 {
   register FILE *infile = sinfo->pub.input_file;
-  register int c;
+  int c;
 
   if ((c = getc(infile)) == EOF)
     ERREXIT(sinfo->cinfo, JERR_INPUT_EOF);
@@ -122,7 +122,7 @@ get_8bit_row (j_compress_ptr cinfo, cjpeg_source_ptr sinfo)
   bmp_source_ptr source = (bmp_source_ptr) sinfo;
   register JSAMPARRAY colormap = source->colormap;
   JSAMPARRAY image_ptr;
-  register int t;
+  int t;
   register JSAMPROW inptr, outptr;
   register JDIMENSION col;
 
@@ -188,7 +188,7 @@ preload_image (j_compress_ptr cinfo, cjpeg_source_ptr sinfo)
 {
   bmp_source_ptr source = (bmp_source_ptr) sinfo;
   register FILE *infile = source->pub.input_file;
-  register int c;
+  int c;
   register JSAMPROW out_ptr;
   JSAMPARRAY image_ptr;
   JDIMENSION row, col;
diff --git a/ref-impl/libjpeg/rdcolmap.c b/ref-impl/libjpeg/rdcolmap.c
index 42b3437..13c33b8 100644
--- a/ref-impl/libjpeg/rdcolmap.c
+++ b/ref-impl/libjpeg/rdcolmap.c
@@ -122,7 +122,7 @@ pbm_getc (FILE * infile)
 /* Read next char, skipping over any comments */
 /* A comment/newline sequence is returned as a newline */
 {
-  register int ch;
+  int ch;
   
   ch = getc(infile);
   if (ch == '#') {
@@ -141,7 +141,7 @@ read_pbm_integer (j_decompress_ptr cinfo, FILE * infile)
 /* Note that on a 16-bit-int machine, only values up to 64k can be read. */
 /* This should not be a problem in practice. */
 {
-  register int ch;
+  int ch;
   register unsigned int val;
   
   /* Skip any leading whitespace */
diff --git a/ref-impl/libjpeg/rdjpgcom.c b/ref-impl/libjpeg/rdjpgcom.c
index ffe6fc6..8519eeb 100644
--- a/ref-impl/libjpeg/rdjpgcom.c
+++ b/ref-impl/libjpeg/rdjpgcom.c
@@ -410,8 +410,8 @@ keymatch (char * arg, const char * keyword, int minchars)
 /* keyword is the constant keyword (must be lower case already), */
 /* minchars is length of minimum legal abbreviation. */
 {
-  register int ca, ck;
-  register int nmatched = 0;
+  int ca, ck;
+  int nmatched = 0;
 
   while ((ca = *arg++) != '\0') {
     if ((ck = *keyword++) == '\0')
diff --git a/ref-impl/libjpeg/rdppm.c b/ref-impl/libjpeg/rdppm.c
index 1df35c1..d6b1ec4 100644
--- a/ref-impl/libjpeg/rdppm.c
+++ b/ref-impl/libjpeg/rdppm.c
@@ -85,7 +85,7 @@ pbm_getc (FILE * infile)
 /* Read next char, skipping over any comments */
 /* A comment/newline sequence is returned as a newline */
 {
-  register int ch;
+  int ch;
 
   ch = getc(infile);
   if (ch == '#') {
@@ -104,7 +104,7 @@ read_pbm_integer (j_compress_ptr cinfo, FILE * infile)
 /* Note that on a 16-bit-int machine, only values up to 64k can be read. */
 /* This should not be a problem in practice. */
 {
-  register int ch;
+  int ch;
   register unsigned int val;
 
   /* Skip any leading whitespace */
@@ -249,7 +249,7 @@ get_word_gray_row (j_compress_ptr cinfo, cjpeg_source_ptr sinfo)
   ptr = source->pub.buffer[0];
   bufferptr = source->iobuffer;
   for (col = cinfo->image_width; col > 0; col--) {
-    register int temp;
+    int temp;
     temp  = UCH(*bufferptr++);
     temp |= UCH(*bufferptr++) << 8;
     *ptr++ = rescale[temp];
@@ -273,7 +273,7 @@ get_word_rgb_row (j_compress_ptr cinfo, cjpeg_source_ptr sinfo)
   ptr = source->pub.buffer[0];
   bufferptr = source->iobuffer;
   for (col = cinfo->image_width; col > 0; col--) {
-    register int temp;
+    int temp;
     temp  = UCH(*bufferptr++);
     temp |= UCH(*bufferptr++) << 8;
     *ptr++ = rescale[temp];
diff --git a/ref-impl/libjpeg/rdswitch.c b/ref-impl/libjpeg/rdswitch.c
index 4f4bb4f..4c77281 100644
--- a/ref-impl/libjpeg/rdswitch.c
+++ b/ref-impl/libjpeg/rdswitch.c
@@ -22,7 +22,7 @@ text_getc (FILE * file)
 /* Read next char, skipping over any comments (# to end of line) */
 /* A comment/newline sequence is returned as a newline */
 {
-  register int ch;
+  int ch;
   
   ch = getc(file);
   if (ch == '#') {
@@ -39,7 +39,7 @@ read_text_integer (FILE * file, long * result, int * termchar)
 /* Read an unsigned decimal integer from a file, store it in result */
 /* Reads one trailing character after the integer; returns it in termchar */
 {
-  register int ch;
+  int ch;
   register long val;
   
   /* Skip any leading whitespace, detect EOF */
@@ -131,7 +131,7 @@ read_scan_integer (FILE * file, long * result, int * termchar)
  * this simplifies parsing of punctuation in scan scripts.
  */
 {
-  register int ch;
+  int ch;
 
   if (! read_text_integer(file, result, termchar))
     return FALSE;
diff --git a/ref-impl/libjpeg/rdtarga.c b/ref-impl/libjpeg/rdtarga.c
index 4c2cd26..f73d22d 100644
--- a/ref-impl/libjpeg/rdtarga.c
+++ b/ref-impl/libjpeg/rdtarga.c
@@ -89,7 +89,7 @@ read_byte (tga_source_ptr sinfo)
 /* Read next byte from Targa file */
 {
   register FILE *infile = sinfo->pub.input_file;
-  register int c;
+  int c;
 
   if ((c = getc(infile)) == EOF)
     ERREXIT(sinfo->cinfo, JERR_INPUT_EOF);
@@ -124,7 +124,7 @@ read_non_rle_pixel (tga_source_ptr sinfo)
 /* Read one Targa pixel from the input file; no RLE expansion */
 {
   register FILE *infile = sinfo->pub.input_file;
-  register int i;
+  int i;
 
   for (i = 0; i < sinfo->pixel_size; i++) {
     sinfo->tga_pixel[i] = (U_CHAR) getc(infile);
@@ -137,7 +137,7 @@ read_rle_pixel (tga_source_ptr sinfo)
 /* Read one Targa pixel from the input file, expanding RLE data as needed */
 {
   register FILE *infile = sinfo->pub.input_file;
-  register int i;
+  int i;
 
   /* Duplicate previously read pixel? */
   if (sinfo->dup_pixel_count > 0) {
@@ -191,7 +191,7 @@ get_8bit_row (j_compress_ptr cinfo, cjpeg_source_ptr sinfo)
 /* This version is for reading 8-bit colormap indexes */
 {
   tga_source_ptr source = (tga_source_ptr) sinfo;
-  register int t;
+  int t;
   register JSAMPROW ptr;
   register JDIMENSION col;
   register JSAMPARRAY colormap = source->colormap;
@@ -212,7 +212,7 @@ get_16bit_row (j_compress_ptr cinfo, cjpeg_source_ptr sinfo)
 /* This version is for reading 16-bit pixels */
 {
   tga_source_ptr source = (tga_source_ptr) sinfo;
-  register int t;
+  int t;
   register JSAMPROW ptr;
   register JDIMENSION col;
   
diff --git a/ref-impl/libjpeg/wrjpgcom.c b/ref-impl/libjpeg/wrjpgcom.c
index 8c04b05..bdb400d 100644
--- a/ref-impl/libjpeg/wrjpgcom.c
+++ b/ref-impl/libjpeg/wrjpgcom.c
@@ -386,8 +386,8 @@ keymatch (char * arg, const char * keyword, int minchars)
 /* keyword is the constant keyword (must be lower case already), */
 /* minchars is length of minimum legal abbreviation. */
 {
-  register int ca, ck;
-  register int nmatched = 0;
+  int ca, ck;
+  int nmatched = 0;
 
   while ((ca = *arg++) != '\0') {
     if ((ck = *keyword++) == '\0')
diff --git a/ref-impl/libjpeg/wrppm.c b/ref-impl/libjpeg/wrppm.c
index 6c6d908..ce99fd8 100644
--- a/ref-impl/libjpeg/wrppm.c
+++ b/ref-impl/libjpeg/wrppm.c
@@ -42,7 +42,7 @@
 #else
 /* The word-per-sample format always puts the LSB first. */
 #define PUTPPMSAMPLE(ptr,v)			\
-	{ register int val_ = v;		\
+	{ int val_ = v;		\
 	  *ptr++ = (char) (val_ & 0xFF);	\
 	  *ptr++ = (char) ((val_ >> 8) & 0xFF);	\
 	}
@@ -130,7 +130,7 @@ put_demapped_rgb (j_decompress_ptr cinfo, djpeg_dest_ptr dinfo,
 {
   ppm_dest_ptr dest = (ppm_dest_ptr) dinfo;
   register char * bufferptr;
-  register int pixval;
+  int pixval;
   register JSAMPROW ptr;
   register JSAMPROW color_map0 = cinfo->colormap[0];
   register JSAMPROW color_map1 = cinfo->colormap[1];
diff --git a/ref-impl/plugins/AAFPluginUtils.cpp b/ref-impl/plugins/AAFPluginUtils.cpp
index daa02ca..5c6767b 100755
--- a/ref-impl/plugins/AAFPluginUtils.cpp
+++ b/ref-impl/plugins/AAFPluginUtils.cpp
@@ -96,7 +96,7 @@ aafBool aafIsEqualGUID( const GUID& guid1, const GUID& guid2 )
 void AAFByteSwap16(
 			aafInt16 * wp)	/* IN/OUT -- Byte swap this value */
 {
-	register unsigned char *cp = (unsigned char *) wp;
+	unsigned char *cp = (unsigned char *) wp;
 	int             t;
 
 	t = cp[1];
@@ -122,7 +122,7 @@ void AAFByteSwap16(
 void AAFByteSwap32(
 			aafInt32 *lp)	/* IN/OUT -- Byte swap this value */
 {
-	register unsigned char *cp = (unsigned char *) lp;
+	unsigned char *cp = (unsigned char *) lp;
 	int             t;
 
 	t = cp[3];
@@ -151,7 +151,7 @@ void AAFByteSwap32(
 void AAFByteSwap64(
 			aafInt64 *lp)	/* IN/OUT -- Byte swap this value */
 {
-	register unsigned char *cp = (unsigned char *) lp;
+	unsigned char *cp = (unsigned char *) lp;
 	int             t;
 
 	t = cp[7];
diff --git a/ref-impl/src/impl/aafTable.cpp b/ref-impl/src/impl/aafTable.cpp
index 8f18b8e..16f2314 100644
--- a/ref-impl/src/impl/aafTable.cpp
+++ b/ref-impl/src/impl/aafTable.cpp
@@ -1068,8 +1068,8 @@ static aafBool cmpSensitive( void *temp1, void *temp2)
 	
 static aafBool cmpInsensitive( void *temp1, void *temp2)
 {
-	register char *a = (char *)temp1;
-	register char *b = (char *)temp2;
+	char *a = (char *)temp1;
+	char *b = (char *)temp2;
 
 	for ( ; (*a != '\0') && (*b != '\0'); a++, b++)
 	{	
