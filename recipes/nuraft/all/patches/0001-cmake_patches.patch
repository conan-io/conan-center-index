diff --git a/CMakeLists.txt b/CMakeLists.txt
index 87685ff..1fc9199 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -26,41 +44,41 @@ endif()
 
 
 # === Find ASIO ===
-if (BOOST_INCLUDE_PATH AND BOOST_LIBRARY_PATH)
-    # If Boost path (both include and library) is given,
-    # use Boost's ASIO.
-    message(STATUS "Boost include path: " ${BOOST_INCLUDE_PATH})
-    message(STATUS "Boost library path: " ${BOOST_LIBRARY_PATH})
-
-    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_BOOST_ASIO")
-
-    set(ASIO_INCLUDE_DIR ${BOOST_INCLUDE_PATH})
-    set(LIBBOOST_SYSTEM "${BOOST_LIBRARY_PATH}/libboost_system.a")
-
-else ()
-    # If not, ASIO standalone mode.
-    FIND_PATH(ASIO_INCLUDE_DIR
-              NAME asio.hpp
-              HINTS ${PROJECT_SOURCE_DIR}/asio/asio/include
-                    $ENV{HOME}/local/include
-                    /opt/local/include
-                    /usr/local/include
-                    /usr/include)
-
-    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DASIO_STANDALONE")
-
-endif ()
-
-if (NOT ASIO_INCLUDE_DIR)
-    message(FATAL_ERROR "Can't find ASIO header files")
-else ()
-    message(STATUS "ASIO include path: " ${ASIO_INCLUDE_DIR})
-endif ()
+#if (BOOST_INCLUDE_PATH AND BOOST_LIBRARY_PATH)
+#    # If Boost path (both include and library) is given,
+#    # use Boost's ASIO.
+#    message(STATUS "Boost include path: " ${BOOST_INCLUDE_PATH})
+#    message(STATUS "Boost library path: " ${BOOST_LIBRARY_PATH})
+#
+#    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_BOOST_ASIO")
+#
+#    set(ASIO_INCLUDE_DIR ${BOOST_INCLUDE_PATH})
+#    set(LIBBOOST_SYSTEM "${BOOST_LIBRARY_PATH}/libboost_system.a")
+#
+#else ()
+#    # If not, ASIO standalone mode.
+#    FIND_PATH(ASIO_INCLUDE_DIR
+#              NAME asio.hpp
+#              HINTS ${PROJECT_SOURCE_DIR}/asio/asio/include
+#                    $ENV{HOME}/local/include
+#                    /opt/local/include
+#                    /usr/local/include
+#                    /usr/include)
+#
+#    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DASIO_STANDALONE")
+#
+#endif ()
+
+#if (NOT ASIO_INCLUDE_DIR)
+#    message(FATAL_ERROR "Can't find ASIO header files")
+#else ()
+#    message(STATUS "ASIO include path: " ${ASIO_INCLUDE_DIR})
+#endif ()
 
 
 # === Includes ===
 include_directories(BEFORE ./)
-include_directories(BEFORE ${ASIO_INCLUDE_DIR})
+#include_directories(BEFORE ${ASIO_INCLUDE_DIR})
 include_directories(BEFORE ${PROJECT_SOURCE_DIR}/include)
 include_directories(BEFORE ${PROJECT_SOURCE_DIR}/include/libnuraft)
 include_directories(BEFORE ${PROJECT_SOURCE_DIR}/examples)
@@ -213,6 +231,7 @@ if (NOT (DISABLE_SSL GREATER 0))
     )
 endif ()
 
+include_directories(BEFORE "${PROJECT_SOURCE_DIR}/include/libnuraft")
 # === Source files ===
 set(RAFT_CORE
     ${ROOT_SRC}/asio_service.cxx
@@ -240,6 +259,7 @@ set(RAFT_CORE
     ${ROOT_SRC}/snapshot_sync_req.cxx
     ${ROOT_SRC}/srv_config.cxx
     ${ROOT_SRC}/stat_mgr.cxx
     )
 add_library(RAFT_CORE_OBJ OBJECT ${RAFT_CORE})
+target_link_libraries(RAFT_CORE_OBJ Boost::Boost OpenSSL::OpenSSL)
 
@@ -249,54 +269,25 @@ set(STATIC_LIB_SRC
 # === Executables ===
 set(LIBRARY_NAME "nuraft")
 
-add_library(static_lib ${STATIC_LIB_SRC})
-set_target_properties(static_lib PROPERTIES OUTPUT_NAME ${LIBRARY_NAME} CLEAN_DIRECT_OUTPUT 1)
-
-add_library(shared_lib SHARED ${STATIC_LIB_SRC})
-set_target_properties(shared_lib PROPERTIES OUTPUT_NAME ${LIBRARY_NAME} CLEAN_DIRECT_OUTPUT 1)
-if (APPLE)
-    target_link_libraries(shared_lib ${LIBRARIES})
-endif ()
-
-if (WIN32)
-    set(LIBRARY_OUTPUT_NAME "${LIBRARY_NAME}.lib")
-else ()
-    set(LIBRARY_OUTPUT_NAME "lib${LIBRARY_NAME}.a")
-endif ()
-message(STATUS "Output library file name: ${LIBRARY_OUTPUT_NAME}")
-
-# === Examples ===
-add_subdirectory("${PROJECT_SOURCE_DIR}/examples")
-
+add_library(nuraft ${STATIC_LIB_SRC})
+target_link_libraries(nuraft Boost::Boost OpenSSL::OpenSSL)
+
+include_directories(BEFORE ${EXAMPLES_SRC})
+#set(TEST_SRCS
+#      "tests/src/test_async_result.cxx"
+#      "tests/src/test_buffer.cxx"
+#      "tests/src/test_everything_together.cxx"
+#      "tests/src/test_impls.cxx"
+#      "tests/src/test_logger.cxx"
+#      "tests/src/test_log_store.cxx"
+#      "tests/src/test_ptr.cxx"
+#      "tests/src/test_runner.cxx"
+#      "tests/src/test_scheduler.cxx"
+#      "tests/src/test_serialization.cxx"
+#      "tests/src/test_strfmt.cxx"
+#    )
+#add_executable(test_runner ${TEST_SRCS})
+#target_link_libraries(test_runner nuraft)
+#add_test(NAME TestRunner COMMAND test_runner)
 
 # === Tests ===
-add_subdirectory("${PROJECT_SOURCE_DIR}/tests")
-
-
-if (CODE_COVERAGE GREATER 0)
-    set(CODE_COVERAGE_DEPS
-        raft_server_test
-        failure_test
-        asio_service_test
-        buffer_test
-        serialization_test
-        timer_test
-        strfmt_test
-        stat_mgr_test
-    )
-
-    # lcov
-    SETUP_TARGET_FOR_COVERAGE(
-        NAME raft_cov
-        EXECUTABLE ./runtests.sh
-        DEPENDENCIES ${CODE_COVERAGE_DEPS}
-    )
-endif()
-
-
-# === Install Targets ===
-install(TARGETS static_lib ARCHIVE DESTINATION lib)
-install(TARGETS shared_lib LIBRARY DESTINATION lib)
-install(DIRECTORY ${PROJECT_SOURCE_DIR}/include/libnuraft DESTINATION include)
-
-
