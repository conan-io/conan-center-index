diff --git a/example/aliases/glide_computer_example.cpp b/example/aliases/glide_computer_example.cpp
index 5644a55b..130798b3 100644
--- a/example/aliases/glide_computer_example.cpp
+++ b/example/aliases/glide_computer_example.cpp
@@ -80,7 +80,7 @@ auto get_waypoints()
   return waypoints;
 }
 
-template<std::ranges::forward_range R>
+template<std::ranges::input_range R>
   requires std::same_as<std::ranges::range_value_t<R>, glider>
 void print(const R& gliders)
 {
@@ -95,7 +95,7 @@ void print(const R& gliders)
   }
 }
 
-template<std::ranges::forward_range R>
+template<std::ranges::input_range R>
   requires std::same_as<std::ranges::range_value_t<R>, std::pair<const char*, weather>>
 void print(const R& conditions)
 {
@@ -110,7 +110,7 @@ void print(const R& conditions)
   }
 }
 
-template<std::ranges::forward_range R>
+template<std::ranges::input_range R>
   requires std::same_as<std::ranges::range_value_t<R>, waypoint>
 void print(const R& waypoints)
 {
diff --git a/example/kalman_filter/kalman.h b/example/kalman_filter/kalman.h
index 3e416a8b..f78cc289 100644
--- a/example/kalman_filter/kalman.h
+++ b/example/kalman_filter/kalman.h
@@ -75,7 +75,7 @@ public:
   uncertainty_type uncertainty;
 };
 
-#if UNITS_COMP_CLANG == 12 || UNITS_COMP_MSVC
+#if UNITS_COMP_CLANG <= 13 || UNITS_COMP_MSVC
 
 template<QuantityOrQuantityPoint QQP, units::Quantity U>
 estimation(state<QQP>, U) -> estimation<QQP>;
diff --git a/example/literals/glide_computer_example.cpp b/example/literals/glide_computer_example.cpp
index ae63734c..9f542299 100644
--- a/example/literals/glide_computer_example.cpp
+++ b/example/literals/glide_computer_example.cpp
@@ -80,7 +80,7 @@ auto get_waypoints()
   return waypoints;
 }
 
-template<std::ranges::forward_range R>
+template<std::ranges::input_range R>
   requires std::same_as<std::ranges::range_value_t<R>, glider>
 void print(const R& gliders)
 {
@@ -95,7 +95,7 @@ void print(const R& gliders)
   }
 }
 
-template<std::ranges::forward_range R>
+template<std::ranges::input_range R>
   requires std::same_as<std::ranges::range_value_t<R>, std::pair<const char*, weather>>
 void print(const R& conditions)
 {
@@ -110,7 +110,7 @@ void print(const R& conditions)
   }
 }
 
-template<std::ranges::forward_range R>
+template<std::ranges::input_range R>
   requires std::same_as<std::ranges::range_value_t<R>, waypoint>
 void print(const R& waypoints)
 {
diff --git a/example/references/glide_computer_example.cpp b/example/references/glide_computer_example.cpp
index 50d67dfa..ed6e88ed 100644
--- a/example/references/glide_computer_example.cpp
+++ b/example/references/glide_computer_example.cpp
@@ -80,7 +80,7 @@ auto get_waypoints()
   return waypoints;
 }
 
-template<std::ranges::forward_range R>
+template<std::ranges::input_range R>
   requires std::same_as<std::ranges::range_value_t<R>, glider>
 void print(const R& gliders)
 {
@@ -95,7 +95,7 @@ void print(const R& gliders)
   }
 }
 
-template<std::ranges::forward_range R>
+template<std::ranges::input_range R>
   requires std::same_as<std::ranges::range_value_t<R>, std::pair<const char*, weather>>
 void print(const R& conditions)
 {
@@ -110,7 +110,7 @@ void print(const R& conditions)
   }
 }
 
-template<std::ranges::forward_range R>
+template<std::ranges::input_range R>
   requires std::same_as<std::ranges::range_value_t<R>, waypoint>
 void print(const R& waypoints)
 {
diff --git a/src/core/CMakeLists.txt b/src/core/CMakeLists.txt
index d4f4f06c..59e155b6 100644
--- a/src/core/CMakeLists.txt
+++ b/src/core/CMakeLists.txt
@@ -45,7 +45,7 @@ target_include_directories(mp-units-core ${units_as_system} INTERFACE
 )
 
 if(CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
-    if(UNITS_LIBCXX)
+    if(UNITS_LIBCXX AND CMAKE_CXX_COMPILER_VERSION VERSION_LESS "14")
         find_package(range-v3 CONFIG REQUIRED)
         target_link_libraries(mp-units-core INTERFACE range-v3::range-v3)
     endif()
diff --git a/src/core/include/units/bits/external/hacks.h b/src/core/include/units/bits/external/hacks.h
index 847293f5..880b3dd1 100644
--- a/src/core/include/units/bits/external/hacks.h
+++ b/src/core/include/units/bits/external/hacks.h
@@ -57,24 +57,27 @@
 #define UNITS_DIAGNOSTIC_IGNORE_UNREACHABLE UNITS_DIAGNOSTIC_IGNORE(4702)
 #endif
 
-#if UNITS_COMP_CLANG
-
-#include <ciso646>
 #if _LIBCPP_VERSION
 #define UNITS_LIBCXX _LIBCPP_VERSION
 #endif
 
-#endif
+#if UNITS_LIBCXX
 
-#if UNITS_COMP_CLANG == 12 && UNITS_LIBCXX
+#if UNITS_LIBCXX < 13000
 
-#include <concepts/compare.hpp>
 #include <concepts/concepts.hpp>
+#include <range/v3/algorithm/lower_bound.hpp>
+#include <range/v3/algorithm/transform.hpp>
 #include <range/v3/functional/comparisons.hpp>
 #include <range/v3/iterator.hpp>
+#include <range/v3/iterator/concepts.hpp>
 #include <range/v3/range/concepts.hpp>
-#include <range/v3/algorithm/lower_bound.hpp>
-#include <range/v3/algorithm/transform.hpp>
+
+#elif UNITS_LIBCXX < 14000
+
+#include <range/v3/functional/comparisons.hpp>
+
+#endif
 
 #endif
 
@@ -99,7 +102,9 @@ namespace std {
 template<class T>
 concept default_constructible = constructible_from<T>;
 
-#elif UNITS_COMP_CLANG && UNITS_LIBCXX
+#elif UNITS_LIBCXX
+
+#if UNITS_LIBCXX < 13000
 
 // concepts
 using concepts::common_with;
@@ -118,13 +123,16 @@ using concepts::totally_ordered;
 
 using ranges::compare_three_way;
 
+using ranges::input_iterator;
+using ranges::sentinel_for;
+using ranges::iter_value_t;
+
 namespace ranges {
 
 using ::ranges::begin;
 using ::ranges::end;
 using ::ranges::distance;
 
-using ::ranges::forward_range;
 using ::ranges::input_range;
 using ::ranges::range_value_t;
 
@@ -209,6 +217,14 @@ constexpr bool in_range(T t) noexcept
         std::cmp_less_equal(t, std::numeric_limits<R>::max());
 }
 
+#elif UNITS_LIBCXX < 14000
+
+using concepts::three_way_comparable;
+using concepts::three_way_comparable_with;
+using ::ranges::compare_three_way;
+
+#endif
+
 #endif
 
 } // namespace std
diff --git a/src/mp-unitsConfig.cmake b/src/mp-unitsConfig.cmake
index a6360a6d..afe3f7a1 100644
--- a/src/mp-unitsConfig.cmake
+++ b/src/mp-unitsConfig.cmake
@@ -45,7 +45,7 @@ find_dependency(gsl-lite)
 # add range-v3 dependency only for clang + libc++
 if(CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
     __check_libcxx_in_use(__units_libcxx)
-    if(__units_libcxx)
+    if(__units_libcxx AND CMAKE_CXX_COMPILER_VERSION VERSION_LESS "14")
         find_dependency(range-v3)
     endif()
     unset(__units_libcxx)
