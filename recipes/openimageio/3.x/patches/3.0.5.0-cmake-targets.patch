diff --git CMakeLists.txt CMakeLists.txt
index 58893b450..2fd34c68c 100644
--- CMakeLists.txt
+++ CMakeLists.txt
@@ -42,7 +42,7 @@ endif ()
 
 # Set up module path for our own cmake modules and add some esential ones
 list (APPEND CMAKE_MODULE_PATH
-      "${PROJECT_SOURCE_DIR}/src/cmake/modules"
+      #"${PROJECT_SOURCE_DIR}/src/cmake/modules"
       "${PROJECT_SOURCE_DIR}/src/cmake")
 
 # Utilities
@@ -276,7 +276,7 @@ if (OIIO_BUILD_TOOLS AND NOT BUILD_OIIOUTIL_ONLY)
     add_subdirectory (src/iinfo)
     add_subdirectory (src/maketx)
     add_subdirectory (src/oiiotool)
-    add_subdirectory (src/testtex)
+    #add_subdirectory (src/testtex)
     add_subdirectory (src/iv)
 endif ()
 
diff --git src/cmake/add_oiio_plugin.cmake src/cmake/add_oiio_plugin.cmake
index f66bf756e..6cea07a17 100644
--- src/cmake/add_oiio_plugin.cmake
+++ src/cmake/add_oiio_plugin.cmake
@@ -75,7 +75,7 @@ macro (add_oiio_plugin)
             target_compile_options (${_plugin_NAME} PRIVATE ${_plugin_COMPILE_OPTIONS})
             target_include_directories (${_plugin_NAME} BEFORE PRIVATE ${_plugin_INCLUDE_DIRS})
             target_link_libraries (${_plugin_NAME} PUBLIC OpenImageIO
-                                                   PRIVATE ${_plugin_LINK_LIBRARIES})
+                                                   PUBLIC ${_plugin_LINK_LIBRARIES})
             set_target_properties (${_plugin_NAME} PROPERTIES PREFIX "" FOLDER "Plugins")
             install_targets (${_plugin_NAME})
         endif ()
diff --git src/cmake/externalpackages.cmake src/cmake/externalpackages.cmake
index 6cb6aaf50..a25798e48 100644
--- src/cmake/externalpackages.cmake
+++ src/cmake/externalpackages.cmake
@@ -73,16 +73,15 @@ set (OPENIMAGEIO_CONFIG_DO_NOT_FIND_IMATH OFF CACHE BOOL
      "Exclude find_dependency(Imath) from the exported OpenImageIOConfig.cmake")
 
 # JPEG -- prefer JPEG-Turbo to regular libjpeg
-checked_find_package (libjpeg-turbo
-                      VERSION_MIN 2.1
-                      DEFINITIONS USE_JPEG_TURBO=1)
-if (TARGET libjpeg-turbo::jpeg) # Try to find the non-turbo version
-    # Doctor it so libjpeg-turbo is aliased as JPEG::JPEG
-    alias_library_if_not_exists (JPEG::JPEG libjpeg-turbo::jpeg)
-    set (JPEG_FOUND TRUE)
-else ()
-    # Try to find the non-turbo version
+if (USE_JPEGTURBO)
+    checked_find_package (libjpeg-turbo REQUIRED
+                          DEFINITIONS -DUSE_JPEG_TURBO=1
+                          PRINT libjpeg-turbo_INCLUDES libjpeg-turbo_LIBRARIES)
+    add_library(JPEG::JPEG ALIAS libjpeg-turbo::libjpeg-turbo)
+elseif (USE_JPEG) # Try to find the non-turbo version
     checked_find_package (JPEG REQUIRED)
+else ()
+    message(FATAL_ERROR "JPEG library was not found!")
 endif ()
 
 
@@ -96,9 +95,11 @@ alias_library_if_not_exists (TIFF::TIFF TIFF::tiff)
 
 # JPEG XL
 option (USE_JXL "Enable JPEG XL support" ON)
-checked_find_package (JXL
-                      VERSION_MIN 0.10.1
-                      DEFINITIONS USE_JXL=1)
+if (USE_LIBJXL)
+    checked_find_package (libjxl REQUIRED CONFIG
+                          VERSION_MIN 0.10.1
+                          DEFINITIONS USE_JXL=1)
+endif()
 
 # Pugixml setup.  Normally we just use the version bundled with oiio, but
 # some linux distros are quite particular about having separate packages so we
@@ -113,9 +114,9 @@ else ()
 endif()
 
 # From pythonutils.cmake
-if (USE_PYTHON)
-    find_python()
-endif ()
+#if (USE_PYTHON)
+#    find_python()
+#endif ()
 if (USE_PYTHON)
     checked_find_package (pybind11 REQUIRED VERSION_MIN 2.7)
 endif ()
@@ -125,77 +126,105 @@ endif ()
 # Dependencies for optional formats and features. If these are not found,
 # we will continue building, but the related functionality will be disabled.
 
-checked_find_package (PNG VERSION_MIN 1.6.0)
-if (TARGET PNG::png_static)
-    set (PNG_TARGET PNG::png_static)
-elseif (TARGET PNG::PNG)
-    set (PNG_TARGET PNG::PNG)
-endif ()
-
-checked_find_package (Freetype
-                      VERSION_MIN 2.10.0
-                      DEFINITIONS USE_FREETYPE=1 )
+if (USE_LIBPNG)
+    checked_find_package (PNG REQUIRED VERSION_MIN 1.6.0)
+    set (PNG_TARGET PNG::PNG PARENT_SCOPE)
+endif()
 
-checked_find_package (OpenColorIO REQUIRED
-                      VERSION_MIN 2.2
-                      VERSION_MAX 2.9
-                     )
-if (NOT OPENCOLORIO_INCLUDES)
-    get_target_property(OPENCOLORIO_INCLUDES OpenColorIO::OpenColorIO INTERFACE_INCLUDE_DIRECTORIES)
-endif ()
-include_directories(BEFORE ${OPENCOLORIO_INCLUDES})
+if (USE_FREETYPE)
+    checked_find_package (Freetype REQUIRED
+                          VERSION_MIN 2.10.0
+                          DEFINITIONS USE_FREETYPE=1 )
+endif()
 
-checked_find_package (OpenCV 4.0
-                      DEFINITIONS USE_OPENCV=1)
+#if (USE_OPENCOLORIO)
+    checked_find_package (OpenColorIO REQUIRED
+                          VERSION_MIN 2.2
+                          VERSION_MAX 2.9
+                         )
+#endif()
+# if (NOT OPENCOLORIO_INCLUDES)
+#     get_target_property(OPENCOLORIO_INCLUDES OpenColorIO::OpenColorIO INTERFACE_INCLUDE_DIRECTORIES)
+# endif ()
+# include_directories(BEFORE ${OPENCOLORIO_INCLUDES})
+
+if (USE_OPENCV)
+    checked_find_package (OpenCV 4.0 REQUIRED
+                          DEFINITIONS USE_OPENCV=1)
+endif()
 
 # Intel TBB
-set (TBB_USE_DEBUG_BUILD OFF)
-checked_find_package (TBB 2017
-                      SETVARIABLES OIIO_TBB
-                      PREFER_CONFIG)
+if (USE_TBCC)
+    set (TBB_USE_DEBUG_BUILD OFF)
+    checked_find_package (TBB 2017 REQUIRED
+                          SETVARIABLES OIIO_TBB
+                          PREFER_CONFIG)
+endif()
 
 # DCMTK is used to read DICOM images
-checked_find_package (DCMTK CONFIG VERSION_MIN 3.6.1)
+if (USE_DCMTK)
+    checked_find_package (DCMTK REQUIRED CONFIG VERSION_MIN 3.6.1)
+endif()
 
-checked_find_package (FFmpeg VERSION_MIN 4.0)
+if (USE_FFMPEG)
+    checked_find_package (ffmpeg REQUIRED VERSION_MIN 4.0)
+endif()
 
-checked_find_package (GIF VERSION_MIN 5.0)
+if (USE_GIF)
+    checked_find_package (GIF REQUIRED VERSION_MIN 5.0)
+endif()
 
 # For HEIF/HEIC/AVIF formats
-checked_find_package (Libheif VERSION_MIN 1.11
-                      RECOMMEND_MIN 1.16
-                      RECOMMEND_MIN_REASON "for orientation support")
-
-checked_find_package (LibRaw
-                      VERSION_MIN 0.20.0
-                      PRINT LibRaw_r_LIBRARIES)
-
-checked_find_package (OpenJPEG VERSION_MIN 2.0
-                      RECOMMEND_MIN 2.2
-                      RECOMMEND_MIN_REASON "for multithreading support")
-# Note: Recent OpenJPEG versions have exported cmake configs, but we don't
-# find them reliable at all, so we stick to our FindOpenJPEG.cmake module.
-
-checked_find_package (OpenVDB
-                      VERSION_MIN  9.0
-                      DEPS         TBB
-                      DEFINITIONS  USE_OPENVDB=1)
-
-checked_find_package (Ptex PREFER_CONFIG)
-if (NOT Ptex_FOUND OR NOT Ptex_VERSION)
-    # Fallback for inadequate Ptex exported configs. This will eventually
-    # disappear when we can 100% trust Ptex's exports.
-    unset (Ptex_FOUND)
-    checked_find_package (Ptex)
+if (USE_LIBHEIF)
+    checked_find_package (libheif REQUIRED VERSION_MIN 1.11
+                          RECOMMEND_MIN 1.16
+                          RECOMMEND_MIN_REASON "for orientation support")
+endif()
+
+if (USE_LIBRAW)
+    checked_find_package (LibRaw REQUIRED
+                          VERSION_MIN 0.20.0
+                          PRINT LibRaw_r_LIBRARIES)
+endif()
+
+if (USE_OPENJPEG)
+    checked_find_package (OpenJPEG REQUIRED
+                          VERSION_MIN 2.0
+                          RECOMMEND_MIN 2.2
+                          RECOMMEND_MIN_REASON "for multithreading support")
+    # Note: Recent OpenJPEG versions have exported cmake configs, but we don't
+    # find them reliable at all, so we stick to our FindOpenJPEG.cmake module.
+endif()
+
+if (USE_OPENVDB)
+    checked_find_package (OpenVDB REQUIRED
+                          VERSION_MIN  9.0
+                          DEPS         TBB
+                          DEFINITIONS  USE_OPENVDB=1)
+endif()
+
+if (USE_PTEX)
+    checked_find_package (ptex REQUIRED PREFER_CONFIG)
+    # if (NOT Ptex_FOUND OR NOT Ptex_VERSION)
+    #     # Fallback for inadequate Ptex exported configs. This will eventually
+    #     # disappear when we can 100% trust Ptex's exports.
+    #     unset (Ptex_FOUND)
+    #     checked_find_package (Ptex)
 endif ()
 
-checked_find_package (WebP VERSION_MIN 1.1)
+if (USE_LIBWEBP)
+    checked_find_package (WebP REQUIRED VERSION_MIN 1.1)
+endif()
 
 option (USE_R3DSDK "Enable R3DSDK (RED camera) support" OFF)
-checked_find_package (R3DSDK NO_RECORD_NOTFOUND)  # RED camera
+if (USE_R3DSDK)
+    checked_find_package (R3DSDK NO_RECORD_NOTFOUND)  # RED camera
+endif()
 
 set (NUKE_VERSION "7.0" CACHE STRING "Nuke version to target")
-checked_find_package (Nuke NO_RECORD_NOTFOUND)
+if (USE_NUKE)
+    checked_find_package (Nuke NO_RECORD_NOTFOUND)
+endif()
 
 if (FFmpeg_FOUND OR FREETYPE_FOUND)
     checked_find_package (BZip2)   # Used by ffmpeg and freetype
@@ -207,10 +236,10 @@ endif()
 
 # Qt -- used for iv
 option (USE_QT "Use Qt if found" ON)
-if (USE_QT)
-    checked_find_package (OpenGL)   # used for iv
+if (USE_OPENGL)
+    checked_find_package (OpenGL REQUIRED)   # used for iv
 endif ()
-if (USE_QT AND OPENGL_FOUND)
+if (USE_QT AND USE_OPENGL)
     checked_find_package (Qt6 COMPONENTS Core Gui Widgets OpenGLWidgets)
     if (NOT Qt6_FOUND)
         checked_find_package (Qt5 COMPONENTS Core Gui Widgets OpenGL)
@@ -223,18 +252,13 @@ endif ()
 
 
 # Tessil/robin-map
-checked_find_package (Robinmap REQUIRED
-                      VERSION_MIN 1.2.0
-                      BUILD_LOCAL missing
-                     )
+find_package (tsl-robin-map REQUIRED)
 
 # fmtlib
-option (OIIO_INTERNALIZE_FMT "Copy fmt headers into <install>/include/OpenImageIO/detail/fmt" ON)
+option (OIIO_INTERNALIZE_FMT "Copy fmt headers into <install>/include/OpenImageIO/detail/fmt" OFF)
 checked_find_package (fmt REQUIRED
-                      VERSION_MIN 7.0
-                      BUILD_LOCAL missing
-                     )
-get_target_property(FMT_INCLUDE_DIR fmt::fmt-header-only INTERFACE_INCLUDE_DIRECTORIES)
+                      VERSION_MIN 7.0)
+get_target_property(FMT_INCLUDE_DIR fmt::fmt INTERFACE_INCLUDE_DIRECTORIES)
 
 
 ###########################################################################
diff --git src/ffmpeg.imageio/CMakeLists.txt src/ffmpeg.imageio/CMakeLists.txt
index c84ef3c90..11da54bc2 100644
--- src/ffmpeg.imageio/CMakeLists.txt
+++ src/ffmpeg.imageio/CMakeLists.txt
@@ -2,7 +2,7 @@
 # SPDX-License-Identifier: Apache-2.0
 # https://github.com/AcademySoftwareFoundation/OpenImageIO
 
-if (FFmpeg_FOUND)
+if (USE_FFMPEG)
     if (LINKSTATIC)
         set (_static_suffixes .lib .a)
         set (_static_libraries_found 0)
@@ -26,11 +26,9 @@ if (FFmpeg_FOUND)
     endif()
 
     add_oiio_plugin (ffmpeginput.cpp
-                     INCLUDE_DIRS ${FFMPEG_INCLUDES}
-                     LINK_LIBRARIES ${FFMPEG_LIBRARIES}
-                                    ${BZIP2_LIBRARIES}
+                     LINK_LIBRARIES ffmpeg::avcodec ffmpeg::avformat ffmpeg::swscale
                      DEFINITIONS "USE_FFMPEG"
-                                 "-DOIIO_FFMPEG_VERSION=\"${FFMPEG_VERSION}\"")
+                                 "-DOIIO_FFMPEG_VERSION=\"${ffmpeg_VERSION}\"")
 else()
     message (STATUS "FFmpeg not found: ffmpeg plugin will not be built")
 endif()
diff --git src/heif.imageio/CMakeLists.txt src/heif.imageio/CMakeLists.txt
index 25606a139..5f520249a 100644
--- src/heif.imageio/CMakeLists.txt
+++ src/heif.imageio/CMakeLists.txt
@@ -2,32 +2,9 @@
 # SPDX-License-Identifier: Apache-2.0
 # https://github.com/AcademySoftwareFoundation/OpenImageIO
 
-if (Libheif_FOUND)
-    if (LINKSTATIC)
-        set (_static_suffixes .lib .a)    
-        set (_static_libraries_found 0)
-
-        foreach (_libeheif_library IN LISTS LIBHEIF_LIBRARIES)
-            get_filename_component (_ext ${_libeheif_library} LAST_EXT)
-            list (FIND _static_suffixes ${_ext} _index)
-            if (${_index} GREATER -1)
-                MATH (EXPR _static_libraries_found "${static_libraries_found}+1")
-            endif()
-        endforeach()
-
-        if (${_static_libraries_found} GREATER 0)
-            message (STATUS "${ColorYellow}")
-            message (STATUS "You are linking OpenImageIO against a static version of libheif, which is LGPL")
-            message (STATUS "licensed. If you intend to redistribute this build of OpenImageIO, we recommend")
-            message (STATUS "that you review the libheif license terms, or you may wish to switch to using a")
-            message (STATUS "dynamically-linked libheif.")
-            message ("${ColorReset}")
-        endif()
-    endif()
-
+if (USE_LIBHEIF)
     add_oiio_plugin (heifinput.cpp heifoutput.cpp
-                     INCLUDE_DIRS ${LIBHEIF_INCLUDES}
-                     LINK_LIBRARIES ${LIBHEIF_LIBRARIES}
+                     LINK_LIBRARIES libheif::heif
                      DEFINITIONS "USE_HEIF=1")
 else ()
     message (WARNING "heif plugin will not be built")
diff --git src/ico.imageio/CMakeLists.txt src/ico.imageio/CMakeLists.txt
index 31d205d53..6d6a5390f 100644
--- src/ico.imageio/CMakeLists.txt
+++ src/ico.imageio/CMakeLists.txt
@@ -2,11 +2,9 @@
 # SPDX-License-Identifier: Apache-2.0
 # https://github.com/AcademySoftwareFoundation/OpenImageIO
 
-if (PNG_TARGET)
+if (USE_LIBPNG)
     add_oiio_plugin (icoinput.cpp icooutput.cpp
-                     INCLUDE_DIRS ${PNG_INCLUDE_DIRS}
-                     DEFINITIONS ${PNG_DEFINITIONS}
-                     LINK_LIBRARIES ${PNG_LIBRARIES} ${PNG_TARGET} ZLIB::ZLIB)
+                     LINK_LIBRARIES PNG::PNG ZLIB::ZLIB)
 else ()
     message (WARNING "libpng not found, so ICO support will not work")
     set (format_plugin_definitions ${format_plugin_definitions} DISABLE_ICO=1 PARENT_SCOPE)
diff --git src/iconvert/CMakeLists.txt src/iconvert/CMakeLists.txt
index c83dbe0e8..8f5bb3b54 100644
--- src/iconvert/CMakeLists.txt
+++ src/iconvert/CMakeLists.txt
@@ -2,4 +2,4 @@
 # SPDX-License-Identifier: Apache-2.0
 # https://github.com/AcademySoftwareFoundation/OpenImageIO
 
-fancy_add_executable (LINK_LIBRARIES OpenImageIO)
\ No newline at end of file
+fancy_add_executable (LINK_LIBRARIES OpenImageIO fmt::fmt)
diff --git src/idiff/CMakeLists.txt src/idiff/CMakeLists.txt
index c83dbe0e8..8f5bb3b54 100644
--- src/idiff/CMakeLists.txt
+++ src/idiff/CMakeLists.txt
@@ -2,4 +2,4 @@
 # SPDX-License-Identifier: Apache-2.0
 # https://github.com/AcademySoftwareFoundation/OpenImageIO
 
-fancy_add_executable (LINK_LIBRARIES OpenImageIO)
\ No newline at end of file
+fancy_add_executable (LINK_LIBRARIES OpenImageIO fmt::fmt)
diff --git src/igrep/CMakeLists.txt src/igrep/CMakeLists.txt
index 735b88def..8f5bb3b54 100644
--- src/igrep/CMakeLists.txt
+++ src/igrep/CMakeLists.txt
@@ -2,4 +2,4 @@
 # SPDX-License-Identifier: Apache-2.0
 # https://github.com/AcademySoftwareFoundation/OpenImageIO
 
-fancy_add_executable (LINK_LIBRARIES OpenImageIO)
+fancy_add_executable (LINK_LIBRARIES OpenImageIO fmt::fmt)
diff --git src/iinfo/CMakeLists.txt src/iinfo/CMakeLists.txt
index 735b88def..8f5bb3b54 100644
--- src/iinfo/CMakeLists.txt
+++ src/iinfo/CMakeLists.txt
@@ -2,4 +2,4 @@
 # SPDX-License-Identifier: Apache-2.0
 # https://github.com/AcademySoftwareFoundation/OpenImageIO
 
-fancy_add_executable (LINK_LIBRARIES OpenImageIO)
+fancy_add_executable (LINK_LIBRARIES OpenImageIO fmt::fmt)
diff --git src/include/CMakeLists.txt src/include/CMakeLists.txt
index 3ab45a570..9b6511b78 100644
--- src/include/CMakeLists.txt
+++ src/include/CMakeLists.txt
@@ -49,7 +49,7 @@ install (FILES ${detail_headers}
          DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/${PROJECT_NAME}/detail
          COMPONENT developer)
 
-if (OIIO_INTERNALIZE_FMT OR fmt_LOCAL_BUILD)
+if (0)
     set (fmt_headers_base_names)
     foreach (header_name core.h format-inl.h format.h ostream.h printf.h
              std.h base.h chrono.h)
diff --git src/jpeg2000.imageio/CMakeLists.txt src/jpeg2000.imageio/CMakeLists.txt
index 2bce60968..4492f7550 100644
--- src/jpeg2000.imageio/CMakeLists.txt
+++ src/jpeg2000.imageio/CMakeLists.txt
@@ -2,10 +2,9 @@
 # SPDX-License-Identifier: Apache-2.0
 # https://github.com/AcademySoftwareFoundation/OpenImageIO
 
-if (OPENJPEG_FOUND)
+if (USE_OPENJPEG)
     add_oiio_plugin (jpeg2000input.cpp jpeg2000output.cpp
-                     INCLUDE_DIRS ${OPENJPEG_INCLUDES}
-                     LINK_LIBRARIES ${OPENJPEG_LIBRARIES}
+                     LINK_LIBRARIES openjp2
                      DEFINITIONS "USE_OPENJPEG")
 else()
     message (WARNING "Jpeg-2000 plugin will not be built")
diff --git src/jpegxl.imageio/CMakeLists.txt src/jpegxl.imageio/CMakeLists.txt
index 70d28318a..aec47621f 100644
--- src/jpegxl.imageio/CMakeLists.txt
+++ src/jpegxl.imageio/CMakeLists.txt
@@ -2,10 +2,9 @@
 # SPDX-License-Identifier: Apache-2.0
 # https://github.com/AcademySoftwareFoundation/OpenImageIO
 
-if (JXL_FOUND)
+if (USE_LIBJXL)
     add_oiio_plugin (jxlinput.cpp jxloutput.cpp
-                     INCLUDE_DIRS ${JXL_INCLUDE_DIRS}
-                     LINK_LIBRARIES ${JXL_LIBRARIES}
+                     LINK_LIBRARIES libjxl::libjxl libjxl::jxl_cms
                      DEFINITIONS "USE_JXL")
 else()
     message (WARNING "JPEG XL plugin will not be built")
diff --git src/libOpenImageIO/CMakeLists.txt src/libOpenImageIO/CMakeLists.txt
index dcd3059b3..4a4b98aba 100644
--- src/libOpenImageIO/CMakeLists.txt
+++ src/libOpenImageIO/CMakeLists.txt
@@ -155,18 +155,29 @@ target_link_libraries (OpenImageIO
             OpenImageIO_Util
             ${OPENIMAGEIO_IMATH_DEPENDENCY_VISIBILITY}
             ${OPENIMAGEIO_IMATH_TARGETS}
-        PRIVATE
             ${OPENIMAGEIO_OPENEXR_TARGETS}
+            fmt::fmt
+        PRIVATE
+            #${OPENIMAGEIO_OPENEXR_TARGETS}
             ${format_plugin_libs} # Add all the target link libraries from the plugins
             OpenColorIO::OpenColorIO
             $<TARGET_NAME_IF_EXISTS:OpenColorIO::OpenColorIOHeaders>
             $<TARGET_NAME_IF_EXISTS:pugixml::pugixml>
             $<TARGET_NAME_IF_EXISTS:TBB::tbb>
-            $<TARGET_NAME_IF_EXISTS:Freetype::Freetype>
-            ${BZIP2_LIBRARIES}
+            #$<TARGET_NAME_IF_EXISTS:Freetype::Freetype>
+            #${BZIP2_LIBRARIES}
             ZLIB::ZLIB
+            tsl::robin_map
             ${CMAKE_DL_LIBS}
         )
+if (USE_OPENCV)
+    target_link_libraries (OpenImageIO PRIVATE opencv::opencv_core
+                                               opencv::opencv_imgproc
+                                               opencv::opencv_videoio)
+endif()
+if (USE_FREETYPE)
+    target_link_libraries (OpenImageIO PRIVATE Freetype::Freetype)
+endif()
 
 if (WIN32)
     target_link_libraries (OpenImageIO PRIVATE psapi)
diff --git src/libutil/CMakeLists.txt src/libutil/CMakeLists.txt
index c1b8b5dc0..26693306f 100644
--- src/libutil/CMakeLists.txt
+++ src/libutil/CMakeLists.txt
@@ -58,6 +58,8 @@ function (setup_oiio_util_library targetname)
                 ${GCC_ATOMIC_LIBRARIES}
                 ${OPENIMAGEIO_IMATH_DEPENDENCY_VISIBILITY}
                 ${OPENIMAGEIO_IMATH_TARGETS}
+                fmt::fmt
+                tsl::robin_map
             PRIVATE
                 $<TARGET_NAME_IF_EXISTS:TBB::tbb>
                 ${CMAKE_DL_LIBS}
@@ -69,13 +71,6 @@ function (setup_oiio_util_library targetname)
                                PRIVATE stdc++_libbacktrace)
     endif ()
 
-    if (OIIO_INTERNALIZE_FMT OR fmt_LOCAL_BUILD)
-        add_dependencies(${targetname} fmt_internal_target)
-    else ()
-        target_link_libraries (${targetname}
-                               PUBLIC fmt::fmt-header-only)
-    endif ()
-
     if (WIN32)
         target_compile_definitions(${targetname} PRIVATE
                                    WIN32_LEAN_AND_MEAN NOMINMAX
diff --git src/maketx/CMakeLists.txt src/maketx/CMakeLists.txt
index 735b88def..ab9732756 100644
--- src/maketx/CMakeLists.txt
+++ src/maketx/CMakeLists.txt
@@ -2,4 +2,5 @@
 # SPDX-License-Identifier: Apache-2.0
 # https://github.com/AcademySoftwareFoundation/OpenImageIO
 
-fancy_add_executable (LINK_LIBRARIES OpenImageIO)
+fancy_add_executable (LINK_LIBRARIES OpenImageIO
+                                     fmt::fmt)
diff --git src/oiiotool/CMakeLists.txt src/oiiotool/CMakeLists.txt
index 87b6a3e78..acd0cb985 100644
--- src/oiiotool/CMakeLists.txt
+++ src/oiiotool/CMakeLists.txt
@@ -9,4 +9,6 @@ fancy_add_executable (SYSTEM_INCLUDE_DIRS
                         OpenImageIO
                         $<TARGET_NAME_IF_EXISTS:OpenEXR::OpenEXR>
                         ${OpenCV_LIBRARIES}
+                        tsl::robin_map
+                        fmt::fmt
                      )
diff --git src/openvdb.imageio/CMakeLists.txt src/openvdb.imageio/CMakeLists.txt
index 55178d451..f292934ba 100644
--- src/openvdb.imageio/CMakeLists.txt
+++ src/openvdb.imageio/CMakeLists.txt
@@ -1,10 +1,8 @@
-# Copyright Contributors to the OpenImageIO project.
 # SPDX-License-Identifier: Apache-2.0
 # https://github.com/AcademySoftwareFoundation/OpenImageIO
 
 if (OpenVDB_FOUND)
     add_oiio_plugin (openvdbinput.cpp
-                     INCLUDE_DIRS  ${OPENVDB_INCLUDES} ${TBB_INCLUDE_DIRS}
-                     LINK_LIBRARIES  ${OPENVDB_LIBRARIES}
+                     LINK_LIBRARIES  OpenVDB::openvdb
                                      $<TARGET_NAME_IF_EXISTS:TBB::tbb>)
 endif()
diff --git src/ptex.imageio/CMakeLists.txt src/ptex.imageio/CMakeLists.txt
index 73e3ad843..da45e8c5f 100644
--- src/ptex.imageio/CMakeLists.txt
+++ src/ptex.imageio/CMakeLists.txt
@@ -2,12 +2,9 @@
 # SPDX-License-Identifier: Apache-2.0
 # https://github.com/AcademySoftwareFoundation/OpenImageIO
 
-if (Ptex_FOUND)
-    set(ptex_target Ptex::Ptex_dynamic)
-    if (TARGET Ptex::Ptex_static AND (NOT TARGET Ptex::Ptex_dynamic OR LINKSTATIC))
-        set(ptex_target Ptex::Ptex_static)
-    endif()
+if (USE_PTEX)
     add_oiio_plugin (ptexinput.cpp
-                     LINK_LIBRARIES ${ptex_target} ZLIB::ZLIB
+                     LINK_LIBRARIES ${ptex_LIBRARIES} ZLIB::ZLIB
+                     INCLUDE_DIRS ${ptex_INCLUDE_DIRS}
                      DEFINITIONS "USE_PTEX")
 endif ()
