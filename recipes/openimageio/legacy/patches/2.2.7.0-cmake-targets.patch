diff --git a/CMakeLists.txt b/CMakeLists.txt
index 447c6170..702fb50b 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -99,7 +99,7 @@ message(STATUS "Setting Namespace to: ${PROJ_NAMESPACE_V}")
 
 
 list (APPEND CMAKE_MODULE_PATH
-      "${PROJECT_SOURCE_DIR}/src/cmake/modules"
+      # "${PROJECT_SOURCE_DIR}/src/cmake/modules"
       "${PROJECT_SOURCE_DIR}/src/cmake")
 
 include (GNUInstallDirs)
@@ -172,7 +172,7 @@ if (OIIO_BUILD_TOOLS AND NOT BUILD_OIIOUTIL_ONLY)
     add_subdirectory (src/iinfo)
     add_subdirectory (src/maketx)
     add_subdirectory (src/oiiotool)
-    add_subdirectory (src/testtex)
+    #add_subdirectory (src/testtex)
     add_subdirectory (src/iv)
 endif ()
 
diff --git a/src/cmake/compiler.cmake b/src/cmake/compiler.cmake
index 12a8e819..46c1d0f8 100644
--- a/src/cmake/compiler.cmake
+++ b/src/cmake/compiler.cmake
@@ -88,7 +88,7 @@ if (NOT MSVC)
         add_compile_options ("-Wextra")
     endif ()
     if (STOP_ON_WARNING OR DEFINED ENV{CI})
-        add_compile_options ("-Werror")
+        # add_compile_options ("-Werror")
         # N.B. Force CI builds (Travis defines $CI) to use -Werror, even if
         # STOP_ON_WARNING has been switched off by default, which we may do
         # in release branches.
diff --git a/src/cmake/externalpackages.cmake b/src/cmake/externalpackages.cmake
index 03d521dc..9fe73388 100644
--- a/src/cmake/externalpackages.cmake
+++ b/src/cmake/externalpackages.cmake
@@ -39,7 +39,7 @@ if (LINKSTATIC)
     endif ()
 else ()
     if (MSVC)
-        add_definitions (-DBOOST_ALL_DYN_LINK=1)
+        # add_definitions (-DBOOST_ALL_DYN_LINK=1)
     endif ()
 endif ()
 if (BOOST_CUSTOM)
@@ -89,23 +89,27 @@ checked_find_package (OpenEXR 2.0 REQUIRED
                       RECOMMEND_MIN 2.2
                       RECOMMEND_MIN_REASON "for DWA compression")
 # We use Imath so commonly, may as well include it everywhere.
-include_directories ("${OPENEXR_INCLUDES}" "${ILMBASE_INCLUDES}"
-                     "${ILMBASE_INCLUDES}/OpenEXR")
-if (CMAKE_COMPILER_IS_CLANG AND OPENEXR_VERSION VERSION_LESS 2.3)
+# include_directories ("${OPENEXR_INCLUDES}" "${ILMBASE_INCLUDES}"
+#                      "${ILMBASE_INCLUDES}/OpenEXR")
+if (CMAKE_COMPILER_IS_CLANG AND OpenEXR_VERSION VERSION_LESS 2.3)
     # clang C++ >= 11 doesn't like 'register' keyword in old exr headers
     add_compile_options (-Wno-deprecated-register)
 endif ()
 if (MSVC AND NOT LINKSTATIC)
-    add_definitions (-DOPENEXR_DLL) # Is this needed for new versions?
+    # add_definitions (-DOPENEXR_DLL) # Is this needed for new versions?
 endif ()
 
 
 # JPEG -- prefer Turbo-JPEG to regular libjpeg
-checked_find_package (JPEGTurbo
+if (USE_JPEGTURBO)
+    checked_find_package (libjpeg-turbo REQUIRED
                       DEFINITIONS -DUSE_JPEG_TURBO=1
-                      PRINT       JPEG_INCLUDES JPEG_LIBRARIES)
-if (NOT JPEG_FOUND) # Try to find the non-turbo version
+                      PRINT       libjpeg-turbo_INCLUDES libjpeg-turbo_LIBRARIES)
+    add_library(JPEG::JPEG ALIAS libjpeg-turbo::libjpeg-turbo)
+elseif (USE_JPEG) # Try to find the non-turbo version
     checked_find_package (JPEG REQUIRED)
+else ()
+    message(FATAL_ERROR "JPEG library was not found!")
 endif ()
 
 # Pugixml setup.  Normally we just use the version bundled with oiio, but
@@ -123,56 +127,93 @@ endif()
 # Dependencies for optional formats and features. If these are not found,
 # we will continue building, but the related functionality will be disabled.
 
-checked_find_package (PNG)
-
-checked_find_package (BZip2)   # Used by ffmpeg and freetype
-if (NOT BZIP2_FOUND)
-    set (BZIP2_LIBRARIES "")  # TODO: why does it break without this?
+if (USE_LIBPNG)
+    checked_find_package (PNG REQUIRED)
 endif ()
 
-checked_find_package (Freetype
+# checked_find_package (BZip2)   # Used by ffmpeg and freetype
+# if (NOT BZIP2_FOUND)
+#     set (BZIP2_LIBRARIES "")  # TODO: why does it break without this?
+# endif ()
+
+if (USE_FREETYPE)
+    checked_find_package (Freetype REQUIRED
                    DEFINITIONS  -DUSE_FREETYPE=1 )
+endif ()
 
-checked_find_package (HDF5
+if (USE_HDF5)
+    checked_find_package (HDF5 REQUIRED
                    ISDEPOF      Field3D)
-checked_find_package (OpenColorIO
+endif ()
+if (USE_OPENCOLORIO)
+    checked_find_package (OpenColorIO REQUIRED
                    DEFINITIONS  -DUSE_OCIO=1 -DUSE_OPENCOLORIO=1)
-checked_find_package (OpenCV
+endif ()
+if (USE_OPENCV)
+    checked_find_package (OpenCV REQUIRED
                    DEFINITIONS  -DUSE_OPENCV=1)
+endif ()
 
 # Intel TBB
 set (TBB_USE_DEBUG_BUILD OFF)
-checked_find_package (TBB 2017
+if (USE_TBB)
+    checked_find_package (TBB 2017 REQUIRED
                    DEFINITIONS  -DUSE_TBB=1
                    ISDEPOF      OpenVDB)
+endif ()
 
-checked_find_package (DCMTK 3.6.1)  # For DICOM images
-checked_find_package (FFmpeg 2.6)
-checked_find_package (Field3D
+if (USE_DCMTK)
+    checked_find_package (DCMTK 3.6.1 REQUIRED)  # For DICOM images
+endif ()
+if (USE_FFMPEG)
+    checked_find_package (ffmpeg 2.6 REQUIRED)
+endif ()
+if (USE_FIELD3D)
+    checked_find_package (Field3D REQUIRED
                    DEPS         HDF5
                    DEFINITIONS  -DUSE_FIELD3D=1)
-checked_find_package (GIF 4
+endif ()
+if (USE_GIF)
+    checked_find_package (GIF 4 REQUIRED
                       RECOMMEND_MIN 5.0
                       RECOMMEND_MIN_REASON "for stability and thread safety")
-checked_find_package (Libheif 1.3)  # For HEIF/HEIC format
-checked_find_package (LibRaw
-                      PRINT LibRaw_r_LIBRARIES
+endif ()
+if (USE_LIBHEIF)
+    checked_find_package (libheif 1.3 REQUIRED)  # For HEIF/HEIC format
+endif ()
+if (USE_LIBRAW)
+    checked_find_package (libraw REQUIRED
                       RECOMMEND_MIN 0.18
                       RECOMMEND_MIN_REASON "for ACES support")
-checked_find_package (OpenJpeg 2.0)
-checked_find_package (OpenVDB 5.0
+endif ()
+if (USE_OPENJPEG)
+    checked_find_package (OpenJPEG 2.0 REQUIRED)
+endif ()
+if (USE_OPENVDB)
+    checked_find_package (OpenVDB 5.0 REQUIRED
                    DEPS         TBB
                    DEFINITIONS  -DUSE_OPENVDB=1)
-checked_find_package (PTex)
-checked_find_package (Webp)
+endif ()
+if (USE_PTEX)
+    checked_find_package (ptex REQUIRED)
+endif ()
+if (USE_LIBWEBP)
+    checked_find_package (WebP REQUIRED)
+endif ()
 
 option (USE_R3DSDK "Enable R3DSDK (RED camera) support" OFF)
-checked_find_package (R3DSDK)  # RED camera
+if (USE_R3DSDK)
+    checked_find_package (R3DSDK REQUIRED)  # RED camera
+endif ()
 
 set (NUKE_VERSION "7.0" CACHE STRING "Nuke version to target")
-checked_find_package (Nuke)
+if (USE_NUKE)
+    checked_find_package (Nuke REQUIRED)
+endif ()
 
-checked_find_package (OpenGL)   # used for iv
+if (USE_OPENGL)
+    checked_find_package (OpenGL REQUIRED)   # used for iv
+endif ()
 
 # Qt -- used for iv
 set (qt5_modules Core Gui Widgets)
@@ -180,7 +221,9 @@ if (OPENGL_FOUND)
     list (APPEND qt5_modules OpenGL)
 endif ()
 option (USE_QT "Use Qt if found" ON)
-checked_find_package (Qt5 COMPONENTS ${qt5_modules})
+if (USE_QT)
+    checked_find_package (Qt5 REQUIRED COMPONENTS ${qt5_modules})
+endif ()
 if (USE_QT AND NOT Qt5_FOUND AND APPLE)
     message (STATUS "  If you think you installed qt5 with Homebrew and it still doesn't work,")
     message (STATUS "  try:   export PATH=/usr/local/opt/qt5/bin:$PATH")
@@ -201,13 +244,13 @@ macro (find_or_download_robin_map)
     # for an installed version. Still prefer a copy that seems to be
     # locally installed in this tree.
     if (NOT BUILD_ROBINMAP_FORCE)
-        find_package (Robinmap QUIET)
+        find_package (tsl-robin-map REQUIRED)
     endif ()
     # If an external copy wasn't found and we requested that missing
     # packages be built, or we we are forcing a local copy to be built, then
     # download and build it.
     # Download the headers from github
-    if ((BUILD_MISSING_ROBINMAP AND NOT ROBINMAP_FOUND) OR BUILD_ROBINMAP_FORCE)
+    if ((BUILD_MISSING_ROBINMAP AND NOT tsl-robin-map_FOUND) OR BUILD_ROBINMAP_FORCE)
         message (STATUS "Downloading local Tessil/robin-map")
         set (ROBINMAP_INSTALL_DIR "${PROJECT_SOURCE_DIR}/ext/robin-map")
         set (ROBINMAP_GIT_REPOSITORY "https://github.com/Tessil/robin-map")
@@ -225,7 +268,7 @@ macro (find_or_download_robin_map)
         endif ()
         set (ROBINMAP_INCLUDE_DIR "${ROBINMAP_INSTALL_DIR}/include")
     endif ()
-    checked_find_package (Robinmap REQUIRED)
+    checked_find_package (tsl-robin-map REQUIRED)
 endmacro()
 
 
@@ -235,7 +278,7 @@ endmacro()
 option (USE_EMBEDDED_LIBSQUISH
         "Force use of embedded Libsquish, even if external is found" OFF)
 if (NOT USE_EMBEDDED_LIBSQUISH)
-    checked_find_package (Libsquish)
+    checked_find_package (libsquish REQUIRED)
 endif ()
 
 
@@ -251,12 +294,12 @@ macro (find_or_download_fmt)
     # for an installed version. Still prefer a copy that seems to be
     # locally installed in this tree.
     if (NOT BUILD_FMT_FORCE)
-        find_package (fmt QUIET)
+        find_package (fmt REQUIRED)
     endif ()
     # If an external copy wasn't found and we requested that missing
     # packages be built, or we we are forcing a local copy to be built, then
     # download and build it.
-    if ((BUILD_MISSING_FMT AND NOT FMT_FOUND) OR BUILD_FMT_FORCE)
+    if ((BUILD_MISSING_FMT AND NOT fmt_FOUND) OR BUILD_FMT_FORCE)
         message (STATUS "Downloading local fmtlib/fmt")
         set (FMT_INSTALL_DIR "${PROJECT_SOURCE_DIR}/ext/fmt")
         set (FMT_GIT_REPOSITORY "https://github.com/fmtlib/fmt")
diff --git a/src/dds.imageio/CMakeLists.txt b/src/dds.imageio/CMakeLists.txt
index d693453a..7ff6e9ce 100644
--- a/src/dds.imageio/CMakeLists.txt
+++ b/src/dds.imageio/CMakeLists.txt
@@ -2,10 +2,10 @@
 # SPDX-License-Identifier: BSD-3-Clause
 # https://github.com/OpenImageIO/oiio/blob/master/LICENSE.md
 
-if (Libsquish_FOUND)
+if (libsquish_FOUND)
     # External libsquish was found -- use it
     add_oiio_plugin (ddsinput.cpp
-                     LINK_LIBRARIES Libsquish::Libsquish
+                     LINK_LIBRARIES libsquish::libsquish
                      )
 else ()
     # No external libsquish was found -- use the embedded version.
diff --git a/src/dicom.imageio/CMakeLists.txt b/src/dicom.imageio/CMakeLists.txt
index ddd72044..3603eaa3 100644
--- a/src/dicom.imageio/CMakeLists.txt
+++ b/src/dicom.imageio/CMakeLists.txt
@@ -4,8 +4,8 @@
 
 if (DCMTK_FOUND)
     add_oiio_plugin (dicominput.cpp
-                     INCLUDE_DIRS ${DCMTK_INCLUDE_DIR}
-                     LINK_LIBRARIES ${DCMTK_LIBRARIES}
+                     # INCLUDE_DIRS ${DCMTK_INCLUDE_DIR}
+                     LINK_LIBRARIES DCMTK::DCMTK
                      DEFINITIONS "-DUSE_DCMTK=1")
 else ()
     message (WARNING "DICOM plugin will not be built, no DCMTK")
diff --git a/src/dpx.imageio/CMakeLists.txt b/src/dpx.imageio/CMakeLists.txt
index 858beb9d..dd169af4 100644
--- a/src/dpx.imageio/CMakeLists.txt
+++ b/src/dpx.imageio/CMakeLists.txt
@@ -6,4 +6,4 @@ add_oiio_plugin (dpxinput.cpp dpxoutput.cpp
   libdpx/DPX.cpp libdpx/OutStream.cpp libdpx/RunLengthEncoding.cpp
   libdpx/Codec.cpp libdpx/Reader.cpp libdpx/Writer.cpp libdpx/DPXHeader.cpp
   libdpx/ElementReadStream.cpp libdpx/InStream.cpp libdpx/DPXColorConverter.cpp
-  LINK_LIBRARIES ${OPENEXR_LIBRARIES})
+  LINK_LIBRARIES OpenEXR::OpenEXR)
diff --git a/src/ffmpeg.imageio/CMakeLists.txt b/src/ffmpeg.imageio/CMakeLists.txt
index 6cf07636..d3bb5f61 100644
--- a/src/ffmpeg.imageio/CMakeLists.txt
+++ b/src/ffmpeg.imageio/CMakeLists.txt
@@ -11,11 +11,11 @@ if (NOT MSVC)
                              PROPERTIES COMPILE_FLAGS "-Wno-deprecated-declarations")
 endif()
 
-if (FFmpeg_FOUND)
+if (ffmpeg_FOUND)
     add_oiio_plugin (ffmpeginput.cpp
-                     INCLUDE_DIRS ${FFMPEG_INCLUDES}
-                     LINK_LIBRARIES ${FFMPEG_LIBRARIES}
-                                    ${BZIP2_LIBRARIES}
+                     # INCLUDE_DIRS ${FFMPEG_INCLUDES}
+                     LINK_LIBRARIES ffmpeg::avcodec ffmpeg::avformat ffmpeg::swscale
+                     #                ${BZIP2_LIBRARIES}
                      DEFINITIONS "-DUSE_FFMPEG")
 else()
     message (STATUS "FFmpeg not found: ffmpeg plugin will not be built")
diff --git a/src/gif.imageio/CMakeLists.txt b/src/gif.imageio/CMakeLists.txt
index c9e7392c..eda8b482 100644
--- a/src/gif.imageio/CMakeLists.txt
+++ b/src/gif.imageio/CMakeLists.txt
@@ -4,8 +4,8 @@
 
 if (GIF_FOUND)
     add_oiio_plugin (gifinput.cpp gifoutput.cpp
-                     INCLUDE_DIRS ${GIF_INCLUDE_DIRS}
-                     LINK_LIBRARIES ${GIF_LIBRARIES}
+                     # INCLUDE_DIRS ${GIF_INCLUDE_DIRS}
+                     LINK_LIBRARIES GIF::GIF
                      DEFINITIONS "-DUSE_GIF")
 else()
     message (WARNING "GIF plugin will not be built")
diff --git a/src/heif.imageio/CMakeLists.txt b/src/heif.imageio/CMakeLists.txt
index fed80015..2593f585 100644
--- a/src/heif.imageio/CMakeLists.txt
+++ b/src/heif.imageio/CMakeLists.txt
@@ -2,9 +2,9 @@
 # SPDX-License-Identifier: BSD-3-Clause
 # https://github.com/OpenImageIO/oiio/blob/master/LICENSE.md
 
-if (Libheif_FOUND)
+if (libheif_FOUND)
     add_oiio_plugin (heifinput.cpp heifoutput.cpp
-                     LINK_LIBRARIES Libheif::Libheif
+                     LINK_LIBRARIES libheif::libheif
                      DEFINITIONS "-DUSE_HEIF=1")
 else ()
     message (WARNING "heif plugin will not be built")
diff --git a/src/ico.imageio/CMakeLists.txt b/src/ico.imageio/CMakeLists.txt
index 5a46174d..a8919f63 100644
--- a/src/ico.imageio/CMakeLists.txt
+++ b/src/ico.imageio/CMakeLists.txt
@@ -4,8 +4,8 @@
 
 if (PNG_FOUND)
     add_oiio_plugin (icoinput.cpp icooutput.cpp
-                     INCLUDE_DIRS ${PNG_INCLUDE_DIRS} ${ZLIB_INCLUDE_DIRS}
-                     LINK_LIBRARIES ${PNG_LIBRARIES} ${ZLIB_LIBRARIES})
+                     # INCLUDE_DIRS ${PNG_INCLUDE_DIRS} ${ZLIB_INCLUDE_DIRS}
+                     LINK_LIBRARIES PNG::PNG ZLIB::ZLIB)
 else ()
     message (WARNING "libpng not found, so ICO support will not work")
     set (format_plugin_definitions ${format_plugin_definitions} DISABLE_ICO=1 PARENT_SCOPE)
diff --git a/src/igrep/CMakeLists.txt b/src/igrep/CMakeLists.txt
index 3fde566a..adaac8bd 100644
--- a/src/igrep/CMakeLists.txt
+++ b/src/igrep/CMakeLists.txt
@@ -3,5 +3,5 @@
 # https://github.com/OpenImageIO/oiio/blob/master/LICENSE.md
 
 fancy_add_executable (LINK_LIBRARIES OpenImageIO
-                                     ${Boost_LIBRARIES} # because regex
+                                     Boost::regex # because regex
                       )
diff --git a/src/iinfo/CMakeLists.txt b/src/iinfo/CMakeLists.txt
index 3fde566a..adaac8bd 100644
--- a/src/iinfo/CMakeLists.txt
+++ b/src/iinfo/CMakeLists.txt
@@ -3,5 +3,5 @@
 # https://github.com/OpenImageIO/oiio/blob/master/LICENSE.md
 
 fancy_add_executable (LINK_LIBRARIES OpenImageIO
-                                     ${Boost_LIBRARIES} # because regex
+                                     Boost::regex # because regex
                       )
diff --git a/src/include/CMakeLists.txt b/src/include/CMakeLists.txt
index a60b3b21..050911c8 100644
--- a/src/include/CMakeLists.txt
+++ b/src/include/CMakeLists.txt
@@ -44,17 +44,20 @@ install (FILES ${public_headers}
          DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/${PROJECT_NAME}
          COMPONENT developer)
 
+set(FMT_INCLUDES "${fmt_INCLUDE_DIR}")
 set (fmt_headers
         ${FMT_INCLUDES}/fmt/core.h
         ${FMT_INCLUDES}/fmt/format-inl.h
         ${FMT_INCLUDES}/fmt/format.h
         ${FMT_INCLUDES}/fmt/ostream.h
         ${FMT_INCLUDES}/fmt/printf.h )
+if (0)
 file (COPY ${fmt_headers}
       DESTINATION ${CMAKE_BINARY_DIR}/include/OpenImageIO/detail/fmt)
 install (FILES ${fmt_headers}
          DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/${PROJECT_NAME}/detail/fmt
          COMPONENT developer)
+endif ()
 
 if (NOT USE_EXTERNAL_PUGIXML)
     set (pugixml_headers
diff --git a/src/include/OpenImageIO/strutil.h b/src/include/OpenImageIO/strutil.h
index db356f03..003df7f8 100644
--- a/src/include/OpenImageIO/strutil.h
+++ b/src/include/OpenImageIO/strutil.h
@@ -39,9 +39,9 @@
 #ifndef FMT_USE_GRISU
 #    define FMT_USE_GRISU 1
 #endif
-#include "detail/fmt/ostream.h"
-#include "detail/fmt/format.h"
-#include "detail/fmt/printf.h"
+#include <fmt/ostream.h>
+#include <fmt/format.h>
+#include <fmt/printf.h>
 #if OIIO_GNUC_VERSION >= 70000
 #    pragma GCC diagnostic pop
 #endif
diff --git a/src/jpeg.imageio/CMakeLists.txt b/src/jpeg.imageio/CMakeLists.txt
index 548faeb7..95e4feb5 100644
--- a/src/jpeg.imageio/CMakeLists.txt
+++ b/src/jpeg.imageio/CMakeLists.txt
@@ -3,5 +3,5 @@
 # https://github.com/OpenImageIO/oiio/blob/master/LICENSE.md
 
 add_oiio_plugin (jpeginput.cpp jpegoutput.cpp
-                 INCLUDE_DIRS ${JPEG_INCLUDE_DIR}
-                 LINK_LIBRARIES ${JPEG_LIBRARIES})
+                 # INCLUDE_DIRS ${JPEG_INCLUDE_DIR}
+                 LINK_LIBRARIES JPEG::JPEG)
diff --git a/src/jpeg2000.imageio/CMakeLists.txt b/src/jpeg2000.imageio/CMakeLists.txt
index 575ed0b7..5644bcf3 100644
--- a/src/jpeg2000.imageio/CMakeLists.txt
+++ b/src/jpeg2000.imageio/CMakeLists.txt
@@ -2,10 +2,10 @@
 # SPDX-License-Identifier: BSD-3-Clause
 # https://github.com/OpenImageIO/oiio/blob/master/LICENSE.md
 
-if (OPENJPEG_FOUND)
+if (OpenJPEG_FOUND)
     add_oiio_plugin (jpeg2000input.cpp jpeg2000output.cpp
-                     INCLUDE_DIRS ${OPENJPEG_INCLUDES}
-                     LINK_LIBRARIES ${OPENJPEG_LIBRARIES}
+                     # INCLUDE_DIRS ${OPENJPEG_INCLUDES}
+                     LINK_LIBRARIES OpenJPEG::OpenJPEG
                      DEFINITIONS "-DUSE_OPENJPEG")
 else()
     message (WARNING "Jpeg-2000 plugin will not be built")
diff --git a/src/libOpenImageIO/CMakeLists.txt b/src/libOpenImageIO/CMakeLists.txt
index fe39cdd4..b877cc4d 100644
--- a/src/libOpenImageIO/CMakeLists.txt
+++ b/src/libOpenImageIO/CMakeLists.txt
@@ -135,31 +135,33 @@ endif ()
 
 target_link_libraries (OpenImageIO
         PUBLIC
-            ${ILMBASE_LIBRARIES}
-            ${OPENEXR_LIBRARIES}
-            ${OpenCV_LIBRARIES}
+            OpenEXR::OpenEXR
+            $<$<BOOL:${OpenColorIO_FOUND}>:OpenColorIO::OpenColorIO>
             ${GCC_ATOMIC_LIBRARIES}
         PRIVATE
             ${SANITIZE_LIBRARIES}
             ${format_plugin_libs} # Add all the target link libraries from the plugins
-            $<$<BOOL:${OpenColorIO_FOUND}>:OpenColorIO::OpenColorIO>
-            ${BZIP2_LIBRARIES}
-            ${ZLIB_LIBRARIES}
-            ${Boost_LIBRARIES}
+            tsl::robin_map
+            ZLIB::ZLIB
+            Boost::Boost
             ${CMAKE_DL_LIBS}
         )
 
+if (OpenCV_FOUND)
+    target_link_libraries (OpenImageIO PUBLIC opencv::opencv_core opencv::opencv_imgproc opencv::opencv_videoio)
+endif ()
+
 if (USE_EXTERNAL_PUGIXML)
-    if(TARGET pugixml)
-        target_link_libraries (OpenImageIO PRIVATE pugixml)
+    if(pugixml_FOUND)
+        target_link_libraries (OpenImageIO PRIVATE pugixml::pugixml)
     else()
         target_include_directories (OpenImageIO PRIVATE ${PUGIXML_INCLUDES})
         target_link_libraries (OpenImageIO PRIVATE ${PUGIXML_LIBRARIES})
     endif()
 endif()
 
-if (FREETYPE_FOUND)
-    target_link_libraries (OpenImageIO PRIVATE ${FREETYPE_LIBRARIES})
+if (Freetype_FOUND)
+    target_link_libraries (OpenImageIO PRIVATE Freetype::Freetype)
 endif()
 
 if (WIN32)
diff --git a/src/libutil/CMakeLists.txt b/src/libutil/CMakeLists.txt
index 083b077c..4cdd4e6b 100644
--- a/src/libutil/CMakeLists.txt
+++ b/src/libutil/CMakeLists.txt
@@ -13,11 +13,11 @@ target_include_directories (OpenImageIO_Util
         )
 target_link_libraries (OpenImageIO_Util
         PUBLIC
-            ${ILMBASE_LIBRARIES}
+            OpenEXR::OpenEXR
             ${GCC_ATOMIC_LIBRARIES}
         PRIVATE
             ${SANITIZE_LIBRARIES}
-            ${Boost_LIBRARIES}
+            Boost::Boost
             ${CMAKE_DL_LIBS}
         )
 
diff --git a/src/oiiotool/CMakeLists.txt b/src/oiiotool/CMakeLists.txt
index 3fde566a..adaac8bd 100644
--- a/src/oiiotool/CMakeLists.txt
+++ b/src/oiiotool/CMakeLists.txt
@@ -3,5 +3,5 @@
 # https://github.com/OpenImageIO/oiio/blob/master/LICENSE.md
 
 fancy_add_executable (LINK_LIBRARIES OpenImageIO
-                                     ${Boost_LIBRARIES} # because regex
+                                     Boost::regex # because regex
                       )
diff --git a/src/openexr.imageio/CMakeLists.txt b/src/openexr.imageio/CMakeLists.txt
index 3226eb13..bf8e0358 100644
--- a/src/openexr.imageio/CMakeLists.txt
+++ b/src/openexr.imageio/CMakeLists.txt
@@ -3,5 +3,5 @@
 # https://github.com/OpenImageIO/oiio/blob/master/LICENSE.md
 
 add_oiio_plugin (exrinput.cpp exroutput.cpp
-                 LINK_LIBRARIES ${OPENEXR_LIBRARIES})
+                 LINK_LIBRARIES OpenEXR::OpenEXR)
 
diff --git a/src/openvdb.imageio/CMakeLists.txt b/src/openvdb.imageio/CMakeLists.txt
index 57a0f625..61dc2459 100644
--- a/src/openvdb.imageio/CMakeLists.txt
+++ b/src/openvdb.imageio/CMakeLists.txt
@@ -2,8 +2,8 @@
 # SPDX-License-Identifier: BSD-3-Clause
 # https://github.com/OpenImageIO/oiio/blob/master/LICENSE.md
 
-if (OpenVDB_FOUND)
+if (OpenVDB_FOUND AND TBB_FOUND)
     add_oiio_plugin (openvdbinput.cpp
-                     INCLUDE_DIRS ${TBB_INCLUDE_DIRS}
-                     LINK_LIBRARIES OpenVDB::OpenVDB ${TBB_tbb_LIBRARY} ${BOOST_LIBRARIES})
+                     # INCLUDE_DIRS ${TBB_INCLUDE_DIRS}
+                     LINK_LIBRARIES OpenVDB::OpenVDB TBB::TBB Boost::Boost)
 endif()
diff --git a/src/png.imageio/CMakeLists.txt b/src/png.imageio/CMakeLists.txt
index be2724f2..ac16da21 100644
--- a/src/png.imageio/CMakeLists.txt
+++ b/src/png.imageio/CMakeLists.txt
@@ -4,8 +4,8 @@
 
 if (PNG_FOUND)
     add_oiio_plugin (pnginput.cpp pngoutput.cpp
-                     INCLUDE_DIRS ${PNG_INCLUDE_DIRS} ${ZLIB_INCLUDE_DIRS}
-                     LINK_LIBRARIES ${PNG_LIBRARIES} ${ZLIB_LIBRARIES})
+                     # INCLUDE_DIRS ${PNG_INCLUDE_DIRS} ${ZLIB_INCLUDE_DIRS}
+                     LINK_LIBRARIES PNG::PNG ZLIB::ZLIB)
 else ()
     message (WARNING "libpng not found, so PNG support will not work")
     set (format_plugin_definitions ${format_plugin_definitions} DISABLE_PNG=1 PARENT_SCOPE)
diff --git a/src/psd.imageio/CMakeLists.txt b/src/psd.imageio/CMakeLists.txt
index 48bf24fb..7e1d9257 100644
--- a/src/psd.imageio/CMakeLists.txt
+++ b/src/psd.imageio/CMakeLists.txt
@@ -3,6 +3,6 @@
 # https://github.com/OpenImageIO/oiio/blob/master/LICENSE.md
 
 add_oiio_plugin (psdinput.cpp jpeg_memory_src.cpp
-                 INCLUDE_DIRS ${JPEG_INCLUDE_DIR}
-                 LINK_LIBRARIES ${JPEG_LIBRARIES})
+                 # INCLUDE_DIRS ${JPEG_INCLUDE_DIR}
+                 LINK_LIBRARIES JPEG::JPEG)
 
diff --git a/src/ptex.imageio/CMakeLists.txt b/src/ptex.imageio/CMakeLists.txt
index 912081b1..6039fc58 100644
--- a/src/ptex.imageio/CMakeLists.txt
+++ b/src/ptex.imageio/CMakeLists.txt
@@ -2,9 +2,9 @@
 # SPDX-License-Identifier: BSD-3-Clause
 # https://github.com/OpenImageIO/oiio/blob/master/LICENSE.md
 
-if (PTEX_FOUND)
+if (PTex_FOUND)
     add_oiio_plugin (ptexinput.cpp
-                     INCLUDE_DIRS ${ZLIB_INCLUDE_DIRS} ${PTEX_INCLUDE_DIR}
-                     LINK_LIBRARIES ${PTEX_LIBRARIES} ${ZLIB_LIBRARIES}
+                     # INCLUDE_DIRS ${ZLIB_INCLUDE_DIRS} ${PTEX_INCLUDE_DIR}
+                     LINK_LIBRARIES PTex::PTex ZLIB::ZLIB
                      DEFINITIONS "-DUSE_PTEX")
 endif ()
diff --git a/src/raw.imageio/CMakeLists.txt b/src/raw.imageio/CMakeLists.txt
index 81a0ff54..ae229e31 100644
--- a/src/raw.imageio/CMakeLists.txt
+++ b/src/raw.imageio/CMakeLists.txt
@@ -2,10 +2,10 @@
 # SPDX-License-Identifier: BSD-3-Clause
 # https://github.com/OpenImageIO/oiio/blob/master/LICENSE.md
 
-if (LIBRAW_FOUND)
+if (libraw_FOUND)
     add_oiio_plugin (rawinput.cpp
-                     INCLUDE_DIRS ${LibRaw_INCLUDE_DIR}
-                     LINK_LIBRARIES ${LibRaw_r_LIBRARIES}
+                     # INCLUDE_DIRS ${LibRaw_INCLUDE_DIR}
+                     LINK_LIBRARIES libraw::libraw
                      DEFINITIONS "-DUSE_LIBRAW=1")
 else ()
     message (WARNING "Raw plugin will not be built")
diff --git a/src/tiff.imageio/CMakeLists.txt b/src/tiff.imageio/CMakeLists.txt
index f6d648c8..385607c9 100644
--- a/src/tiff.imageio/CMakeLists.txt
+++ b/src/tiff.imageio/CMakeLists.txt
@@ -3,6 +3,6 @@
 # https://github.com/OpenImageIO/oiio/blob/master/LICENSE.md
 
 add_oiio_plugin (tiffinput.cpp tiffoutput.cpp
-                 INCLUDE_DIRS ${TIFF_INCLUDE_DIR} ${ZLIB_INCLUDE_DIRS}
-                 LINK_LIBRARIES ${TIFF_LIBRARIES} ${JPEG_LIBRARIES}
-                                ${ZLIB_LIBRARIES})
+                 # INCLUDE_DIRS ${TIFF_INCLUDE_DIR} ${ZLIB_INCLUDE_DIRS}
+                 LINK_LIBRARIES TIFF::TIFF JPEG::JPEG
+                                ZLIB::ZLIB)
diff --git a/src/webp.imageio/CMakeLists.txt b/src/webp.imageio/CMakeLists.txt
index 9e01bd7f..78fe1a58 100644
--- a/src/webp.imageio/CMakeLists.txt
+++ b/src/webp.imageio/CMakeLists.txt
@@ -2,9 +2,9 @@
 # SPDX-License-Identifier: BSD-3-Clause
 # https://github.com/OpenImageIO/oiio/blob/master/LICENSE.md
 
-if (Webp_FOUND)
+if (WebP_FOUND)
     add_oiio_plugin (webpinput.cpp webpoutput.cpp
-                     LINK_LIBRARIES Webp::Webp
+                     LINK_LIBRARIES WebP::WebP
                      DEFINITIONS "-DUSE_WEBP=1")
 else ()
     message (STATUS "WebP plugin will not be built")
diff --git a/src/zfile.imageio/CMakeLists.txt b/src/zfile.imageio/CMakeLists.txt
index 36a7ad99..c8fd99d3 100644
--- a/src/zfile.imageio/CMakeLists.txt
+++ b/src/zfile.imageio/CMakeLists.txt
@@ -3,5 +3,5 @@
 # https://github.com/OpenImageIO/oiio/blob/master/LICENSE.md
 
 add_oiio_plugin (zfile.cpp
-                 INCLUDE_DIRS ${ZLIB_INCLUDE_DIRS}
-                 LINK_LIBRARIES ${ZLIB_LIBRARIES})
+                 # INCLUDE_DIRS ${ZLIB_INCLUDE_DIRS}
+                 LINK_LIBRARIES ZLIB::ZLIB)
