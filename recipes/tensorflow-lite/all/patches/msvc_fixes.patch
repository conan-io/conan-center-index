From 79be9efa5190a4a9c828369ba358e6f9e59fbbe5 Mon Sep 17 00:00:00 2001
From: Jamie Cook <jimi.cook@gmail.com>
Date: Thu, 9 Jun 2022 17:54:52 +1000
Subject: [PATCH 1/4] Use the help macro from absl to avoid gcc specific
 compiler macro (__PRETTY_FUNCTION__)

---
 tensorflow/lite/kernels/internal/compatibility.h      | 11 +++++++++++
 .../kernels/internal/optimized/depthwiseconv_float.h  |  2 +-
 .../kernels/internal/optimized/depthwiseconv_uint8.h  |  2 +-
 .../internal/optimized/integer_ops/depthwise_conv.h   |  2 +-
 4 files changed, 14 insertions(+), 3 deletions(-)

diff --git a/tensorflow/lite/kernels/internal/compatibility.h b/tensorflow/lite/kernels/internal/compatibility.h
index 61becad30c5c2..1b275095092dd 100644
--- a/tensorflow/lite/kernels/internal/compatibility.h
+++ b/tensorflow/lite/kernels/internal/compatibility.h
@@ -86,6 +86,17 @@ using int32 = std::int32_t;
 using uint32 = std::uint32_t;
 #endif  // !defined(TF_LITE_STATIC_MEMORY)
 
+
+// Allow for cross-compiler usage of function signatures - used for specifying 
+// named RUY profiler regions in templated methods.
+#if defined(_MSC_VER)
+#define TFLITE_PRETTY_FUNCTION __FUNCSIG__
+#elif defined(__GNUC__)
+#define TFLITE_PRETTY_FUNCTION __PRETTY_FUNCTION__
+#else
+#define TFLITE_PRETTY_FUNCTION __func__
+#endif
+
 // TFLITE_DEPRECATED()
 //
 // Duplicated from absl/base/macros.h to avoid pulling in that library.
diff --git a/tensorflow/lite/kernels/internal/optimized/depthwiseconv_float.h b/tensorflow/lite/kernels/internal/optimized/depthwiseconv_float.h
index a8903c1d2758a..daafa93ef3baa 100644
--- a/tensorflow/lite/kernels/internal/optimized/depthwiseconv_float.h
+++ b/tensorflow/lite/kernels/internal/optimized/depthwiseconv_float.h
@@ -768,7 +768,7 @@ void FloatDepthwiseConvAccumRow(int stride, int dilation_factor,
                                 const float* filter_data,
                                 int out_x_buffer_start, int out_x_buffer_end,
                                 int output_depth, float* acc_buffer) {
-  ruy::profiler::ScopeLabel label(__PRETTY_FUNCTION__);
+  ruy::profiler::ScopeLabel label(TFLITE_PRETTY_FUNCTION);
   // Consistency check parameters. This is important in particular to ensure
   // that we keep the number of template instantiations minimal, so we don't
   // increase binary size unnecessarily.
diff --git a/tensorflow/lite/kernels/internal/optimized/depthwiseconv_uint8.h b/tensorflow/lite/kernels/internal/optimized/depthwiseconv_uint8.h
index 52469b34c8703..8ebb7411e0ff7 100644
--- a/tensorflow/lite/kernels/internal/optimized/depthwiseconv_uint8.h
+++ b/tensorflow/lite/kernels/internal/optimized/depthwiseconv_uint8.h
@@ -1519,7 +1519,7 @@ void QuantizedDepthwiseConvAccumRow(int stride, int dilation_factor,
                                     int16 filter_offset, int out_x_buffer_start,
                                     int out_x_buffer_end, int output_depth,
                                     int32* acc_buffer) {
-  ruy::profiler::ScopeLabel label(__PRETTY_FUNCTION__);
+  ruy::profiler::ScopeLabel label(TFLITE_PRETTY_FUNCTION);;
   // Consistency check parameters. This is important in particular to ensure
   // that we keep the number of template instantiations minimal, so we don't
   // increase binary size unnecessarily.
diff --git a/tensorflow/lite/kernels/internal/optimized/integer_ops/depthwise_conv.h b/tensorflow/lite/kernels/internal/optimized/integer_ops/depthwise_conv.h
index d38d05e81bd3e..b9727e4ad40c3 100644
--- a/tensorflow/lite/kernels/internal/optimized/integer_ops/depthwise_conv.h
+++ b/tensorflow/lite/kernels/internal/optimized/integer_ops/depthwise_conv.h
@@ -1429,7 +1429,7 @@ void QuantizedDepthwiseConvAccumRow(int stride, int dilation_factor,
                                     int out_x_buffer_start,
                                     int out_x_buffer_end, int output_depth,
                                     int32* acc_buffer) {
-  ruy::profiler::ScopeLabel label(__PRETTY_FUNCTION__);
+  ruy::profiler::ScopeLabel label(TFLITE_PRETTY_FUNCTION);
   // Consistency check parameters. This is important in particular to ensure
   // that we keep the number of template instantiations minimal, so we don't
   // increase binary size unnecessarily.

From 3616d189a87a3f7cd3cabb8f3ec44f29f58f7e14 Mon Sep 17 00:00:00 2001
From: Jamie Cook <jamie.cook@veitchlister.com.au>
Date: Fri, 10 Jun 2022 08:19:52 +1000
Subject: [PATCH 2/4] designated initializers are only supported on MSVC 2019
 with stdc++20

---
 .../lite/delegates/external/external_delegate.cc     | 12 ++++++------
 1 file changed, 6 insertions(+), 6 deletions(-)

diff --git a/tensorflow/lite/delegates/external/external_delegate.cc b/tensorflow/lite/delegates/external/external_delegate.cc
index 7fe5c5329dd2a..39a2d04cfca43 100644
--- a/tensorflow/lite/delegates/external/external_delegate.cc
+++ b/tensorflow/lite/delegates/external/external_delegate.cc
@@ -155,12 +155,12 @@ ExternalDelegateWrapper::ExternalDelegateWrapper(
                                               ckeys.size(), nullptr);
     if (external_delegate_) {
       wrapper_delegate_ = {
-          .data_ = reinterpret_cast<void*>(this),
-          .Prepare = DelegatePrepare,
-          .CopyFromBufferHandle = nullptr,
-          .CopyToBufferHandle = nullptr,
-          .FreeBufferHandle = nullptr,
-          .flags = external_delegate_->flags,
+          reinterpret_cast<void*>(this),    // .data =
+          DelegatePrepare,                  // .Prepare =
+          nullptr,                          // .CopyFromBufferHandle =
+          nullptr,                          // .CopyToBufferHandle =
+          nullptr,                          // .FreeBufferHandle =
+          external_delegate_->flags,        // .flags =
       };
       if (external_delegate_->CopyFromBufferHandle) {
         wrapper_delegate_.CopyFromBufferHandle = DelegateCopyFromBufferHandle;

From 6e7e5291950e8f72f9ad50674ba0162247f5d078 Mon Sep 17 00:00:00 2001
From: Jamie Cook <jimi.cook@gmail.com>
Date: Mon, 13 Jun 2022 14:29:51 +1000
Subject: [PATCH 3/4] Trigger build which was failing last week with DNS issues

---
 tensorflow/lite/kernels/internal/compatibility.h | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/tensorflow/lite/kernels/internal/compatibility.h b/tensorflow/lite/kernels/internal/compatibility.h
index 1b275095092dd..037697f19fb6c 100644
--- a/tensorflow/lite/kernels/internal/compatibility.h
+++ b/tensorflow/lite/kernels/internal/compatibility.h
@@ -87,7 +87,7 @@ using uint32 = std::uint32_t;
 #endif  // !defined(TF_LITE_STATIC_MEMORY)
 
 
-// Allow for cross-compiler usage of function signatures - used for specifying 
+// Allow for cross-compiler usage of function signatures - currently used for specifying 
 // named RUY profiler regions in templated methods.
 #if defined(_MSC_VER)
 #define TFLITE_PRETTY_FUNCTION __FUNCSIG__

From d12d20dfc989f2ebdc74bdcfb8a9155eb51ba03e Mon Sep 17 00:00:00 2001
From: Mihai Maruseac <mihai.maruseac@gmail.com>
Date: Wed, 15 Jun 2022 17:14:47 -0700
Subject: [PATCH 4/4] Update
 tensorflow/lite/kernels/internal/optimized/depthwiseconv_uint8.h

---
 .../lite/kernels/internal/optimized/depthwiseconv_uint8.h       | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/tensorflow/lite/kernels/internal/optimized/depthwiseconv_uint8.h b/tensorflow/lite/kernels/internal/optimized/depthwiseconv_uint8.h
index 8ebb7411e0ff7..f7176bb8bc7db 100644
--- a/tensorflow/lite/kernels/internal/optimized/depthwiseconv_uint8.h
+++ b/tensorflow/lite/kernels/internal/optimized/depthwiseconv_uint8.h
@@ -1519,7 +1519,7 @@ void QuantizedDepthwiseConvAccumRow(int stride, int dilation_factor,
                                     int16 filter_offset, int out_x_buffer_start,
                                     int out_x_buffer_end, int output_depth,
                                     int32* acc_buffer) {
-  ruy::profiler::ScopeLabel label(TFLITE_PRETTY_FUNCTION);;
+  ruy::profiler::ScopeLabel label(TFLITE_PRETTY_FUNCTION);
   // Consistency check parameters. This is important in particular to ensure
   // that we keep the number of template instantiations minimal, so we don't
   // increase binary size unnecessarily.
