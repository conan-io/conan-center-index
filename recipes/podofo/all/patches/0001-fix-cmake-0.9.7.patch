--- a/CMakeLists.txt	2021-01-05 17:56:54.000000000 +0100
+++ b/CMakeLists.txt	2022-09-02 09:31:40.383547800 +0200
@@ -38,7 +38,7 @@
 endif()
 
 # Load modules from our source tree too
-SET(CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules")
+LIST(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules")
 
 
 # Builds must use this CMakeLists.txt, not the one in src/ or somewhere else.
@@ -322,73 +322,55 @@
 ENDIF(CMAKE_COMPILER_IS_GNUCXX)
 
 FIND_PACKAGE(ZLIB REQUIRED)
+LINK_LIBRARIES(ZLIB::ZLIB)
 MESSAGE("Found zlib headers in ${ZLIB_INCLUDE_DIR}, library at ${ZLIB_LIBRARIES}")
 
-FIND_PACKAGE(LIBCRYPTO)
-
-IF(LIBCRYPTO_FOUND)
+if(PODOFO_WITH_OPENSSL)
+  FIND_PACKAGE(OpenSSL REQUIRED)
 	SET(PODOFO_HAVE_OPENSSL TRUE)
-	INCLUDE_DIRECTORIES(${LIBCRYPTO_INCLUDE_DIR})
-	MESSAGE("Found OpenSSL's libCrypto headers in ${LIBCRYPTO_INCLUDE_DIR}, library at ${LIBCRYPTO_LIBRARIES}")
-ELSE(LIBCRYPTO_FOUND)
-	MESSAGE("OpenSSL's libCrypto not found. Encryption support will be disabled")
-ENDIF(LIBCRYPTO_FOUND)
-
-FIND_PACKAGE(LIBIDN)
-
-IF(LIBIDN_FOUND)
-  MESSAGE("Found libidn headers in ${LIBIDN_INCLUDE_DIR}, library at ${LIBIDN_LIBRARIES}")
-ENDIF(LIBIDN_FOUND)
+	LINK_LIBRARIES(OpenSSL::SSL OpenSSL::Crypto)
+  INCLUDE(CheckCSourceCompiles)
+
+  SET(CMAKE_REQUIRED_INCLUDES ${OPENSSL_INCLUDE_DIR})
+  SET(CMAKE_REQUIRED_LIBRARIES ${OPENSSL_LIBRARIES})
 
-IF(LIBIDN_FOUND)
+  UNSET(CMAKE_REQUIRED_INCLUDES)
+  UNSET(CMAKE_REQUIRED_LIBRARIES)
+ENDIF()
+
+if(PODOFO_WITH_LIBIDN)
+  FIND_PACKAGE(LIBIDN)
 	SET(PODOFO_HAVE_LIBIDN TRUE)
-	INCLUDE_DIRECTORIES(${LIBIDN_INCLUDE_DIR})
-	MESSAGE("Libidn found. AES-256 Encryption support will be enabled")
-ELSE(LIBIDN_FOUND)
-	MESSAGE("Libidn not found. AES-256 Encryption support will be disabled")
-ENDIF(LIBIDN_FOUND)
+	LINK_LIBRARIES(libidn::libidn)
+ENDIF()
 
-FIND_PACKAGE(LIBJPEG)
 
-IF(LIBJPEG_FOUND)
-  MESSAGE("Found libjpeg headers in ${LIBJPEG_INCLUDE_DIR}, library at ${LIBJPEG_LIBRARIES}")
+IF(PODOFO_WITH_LIBJPEG)
+  FIND_PACKAGE(JPEG REQUIRED)
   SET(PODOFO_HAVE_JPEG_LIB TRUE)
-  INCLUDE_DIRECTORIES(${LIBJPEG_INCLUDE_DIR})
-ELSE(LIBJPEG_FOUND)
-  MESSAGE("Libjpeg not found. JPEG support will be disabled")
-ENDIF(LIBJPEG_FOUND)
+  LINK_LIBRARIES(JPEG::JPEG)
+ENDIF()
 
-FIND_PACKAGE(TIFF)
 
-IF(TIFF_FOUND)
-  MESSAGE("Found libtiff headers in ${TIFF_INCLUDE_DIR}, library at ${TIFF_LIBRARIES}")
+IF(PODOFO_WITH_TIFF)
+  FIND_PACKAGE(TIFF REQUIRED)
   SET(PODOFO_HAVE_TIFF_LIB TRUE)
-  INCLUDE_DIRECTORIES(${TIFF_INCLUDE_DIR})
-ELSE(TIFF_FOUND)
-  MESSAGE("Libtiff not found. TIFF support will be disabled")
-ENDIF(TIFF_FOUND)
+  LINK_LIBRARIES(TIFF::TIFF)
+ENDIF()
 
-FIND_PACKAGE(PNG)
 
-IF(PNG_FOUND)
-  MESSAGE("Found LibPng headers in ${PNG_INCLUDE_DIR}, library at ${PNG_LIBRARIES}")
+IF(PODOFO_WITH_PNG)
+  FIND_PACKAGE(PNG REQUIRED)
   SET(PODOFO_HAVE_PNG_LIB TRUE)
-  INCLUDE_DIRECTORIES(${PNG_INCLUDE_DIR})
-ELSE(PNG_FOUND)
-  MESSAGE("LibPng not found. PNG support will be disabled")
-  SET(PNG_LIBRARIES "")
-ENDIF(PNG_FOUND)
+  LINK_LIBRARIES(PNG::PNG)
+ENDIF()
 
-FIND_PACKAGE(UNISTRING)
 
-IF(UNISTRING_FOUND)
-  MESSAGE("Found LibUnistring headers in ${UNISTRING_INCLUDE_DIR}, library at ${UNISTRING_LIBRARY}")
+IF(PODOFO_WITH_UNISTRING)
   SET(PODOFO_HAVE_UNISTRING_LIB TRUE)
-  INCLUDE_DIRECTORIES(${UNISTRING_INCLUDE_DIR})
-ELSE(UNISTRING_FOUND)
-  MESSAGE("LibUnistring not found. Unistring support will be disabled")
-  SET(UNISTRING_LIBRARY "")
-ENDIF(UNISTRING_FOUND)
+  FIND_PACKAGE(libunistring REQUIRED)
+  LINK_LIBRARIES(libunistring::libunistring)
+ENDIF()
 
 
 IF(NOT PODOFO_BUILD_LIB_ONLY)
@@ -405,11 +387,11 @@
 
 ENDIF(NOT PODOFO_BUILD_LIB_ONLY)
 
-FIND_PACKAGE(OpenSSL)
 
-FIND_PACKAGE(FREETYPE REQUIRED)
-MESSAGE("Found freetype library at ${FREETYPE_LIBRARIES}, headers ${FREETYPE_INCLUDE_DIR}")
+FIND_PACKAGE(Freetype REQUIRED MODULE)
+LINK_LIBRARIES(Freetype::Freetype)
 
+if(0)
 FIND_PACKAGE(LIBSTLPORT)
 SET(stlport_libraries_if_use_stlport)
 IF(USE_STLPORT)
@@ -424,16 +406,13 @@
 		MESSAGE(FATAL_ERROR "STLPort use requested, but STLPort not found.")
 	ENDIF(LIBSTLPORT_FOUND)
 ENDIF(USE_STLPORT)
+endif()
 
 IF(WANT_FONTCONFIG)
-	FIND_PACKAGE(FONTCONFIG REQUIRED)
+	FIND_PACKAGE(Fontconfig REQUIRED)
 	SET(PODOFO_HAVE_FONTCONFIG TRUE)
+	LINK_LIBRARIES(Fontconfig::Fontconfig)
 	SET(PODOFO_LIB_FONTCONFIG:STRING fontconfig)
-	IF(FONTCONFIG_FOUND)
-	  MESSAGE("Found fontconfig headers in ${FONTCONFIG_INCLUDE_DIR}, library at ${FONTCONFIG_LIBRARIES}")
-	ELSE(FONTCONFIG_FOUND)
-	  MESSAGE("Could not find fontconfig.")
-        ENDIF(FONTCONFIG_FOUND)
 ELSE(WANT_FONTCONFIG)
 	# Might as well look for it anyway. This also sets the appropriate
 	# variables to empty values.
@@ -525,6 +504,7 @@
   INCLUDE_DIRECTORIES(${FONTCONFIG_INCLUDE_DIR})
 ENDIF(FONTCONFIG_FOUND AND WANT_FONTCONFIG)
 
+LINK_DIRECTORIES(${CMAKE_LIBRARY_OUTPUT_DIRECTORY})
 IF(WIN32 OR PODOFO_BUILD_STATIC)
   SET(PODOFO_LIB
       podofo
@@ -555,10 +535,18 @@
 
 ADD_SUBDIRECTORY(src/podofo)
 IF(NOT PODOFO_BUILD_LIB_ONLY)
-ADD_SUBDIRECTORY(test)
-ADD_SUBDIRECTORY(tools)
-ADD_SUBDIRECTORY(examples)
-ADD_SUBDIRECTORY(man)
+IF(PODOFO_BUILD_TEST)
+    ADD_SUBDIRECTORY(test)
+ENDIF(PODOFO_BUILD_TEST)
+IF(PODOFO_BUILD_TOOLS)
+    ADD_SUBDIRECTORY(tools)
+ENDIF(PODOFO_BUILD_TOOLS)
+IF(PODOFO_BUILD_EXAMPLES)
+    ADD_SUBDIRECTORY(examples)
+ENDIF(PODOFO_BUILD_EXAMPLES)
+IF(PODOFO_BUILD_MAN)
+    ADD_SUBDIRECTORY(man)
+ENDIF(PODOFO_BUILD_MAN)
 ENDIF(NOT PODOFO_BUILD_LIB_ONLY)
 
 # Generate our configure file
