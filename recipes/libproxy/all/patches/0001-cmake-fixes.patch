--- CMakeLists.txt
+++ CMakeLists.txt
@@ -30,11 +30,11 @@ include(cmake/paths.cmk)
 option(WITH_WEBKIT3 "Build against gtk-3 version of webkitgtk" OFF)
 
 ### Subdirectories
 # Conditionally build bundled libmodman
 option(FORCE_SYSTEM_LIBMODMAN "Force using system libmodman" OFF)
-find_package(libmodman QUIET)
-if(LIBMODMAN_FOUND)
-    if("${LIBMODMAN_VERSION_MAJOR}" STREQUAL "2")
+find_package(libmodman REQUIRED)
+if(1)
+    if("${libmodman_VERSION}" VERSION_GREATER "2")
       message(STATUS "Building with system libmodman")    
     else()
       message(FATAL_ERROR "Found incompatible libmodman on your system (libmodman 2.X is needed)")
--- libproxy/CMakeLists.txt
+++ libproxy/CMakeLists.txt
@@ -20,4 +20,4 @@ include(cmake/devfiles.cmk)
 include(cmake/libproxy.cmk)
 
 ### Tests
-add_testdirectory(test)
+#add_testdirectory(test)
--- libproxy/cmake/libproxy.cmk
+++ libproxy/cmake/libproxy.cmk
@@ -1,4 +1,4 @@
-add_library(libproxy SHARED extension_config.cpp extension_pacrunner.cpp extension_wpad.cpp proxy.cpp url.cpp ${LIBPROXY_SOURCES})
+add_library(libproxy extension_config.cpp extension_pacrunner.cpp extension_wpad.cpp proxy.cpp url.cpp ${LIBPROXY_SOURCES})
 if(WIN32)
   target_link_libraries(libproxy modman;ws2_32;${LIBPROXY_LIBRARIES})
 else()
@@ -21,1 +21,1 @@
-set_target_properties(libproxy PROPERTIES PREFIX "" VERSION 1.0.0 SOVERSION 1)
+set_target_properties(libproxy PROPERTIES PREFIX "" IMPORT_PREFIX "" VERSION 1.0.0 SOVERSION 1)
@@ -24,1 +24,1 @@
-install(TARGETS libproxy DESTINATION ${LIB_INSTALL_DIR})
+install(TARGETS libproxy LIBRARY DESTINATION lib RUNTIME DESTINATION bin ARCHIVE DESTINATION lib)
--- libproxy/cmake/modules/config_gnome.cmk
+++ libproxy/cmake/modules/config_gnome.cmk
@@ -3,7 +3,7 @@ if (NOT WIN32 AND NOT APPLE)
   option(WITH_GNOME3 "Target a GNOME 3 system (gsettings)" ON)
   if(WITH_GNOME3)
     px_check_modules(GNOME3 gio-2.0>=2.26 gobject-2.0)
-  else(WITH_GNOME3)
+  elseif(WITH_GNOME2)
     px_check_modules(GNOME2 gconf-2.0 gobject-2.0)
   endif(WITH_GNOME3)
   
--- libproxy/cmake/pxmodule.cmk
+++ libproxy/cmake/pxmodule.cmk
@@ -5,7 +5,7 @@ function(px_module name build builtin)
   else ()
     set(LIBEXECDIR "${CMAKE_INSTALL_PREFIX}/${LIBEXEC_INSTALL_DIR}")
   endif()
-  if(build)
+  if(${build})
     if(builtin)
       set(built "*")
       set_property(SOURCE modules/${name}.cpp PROPERTY COMPILE_DEFINITIONS LIBEXECDIR="${LIBEXECDIR}";MM_MODULE_BUILTIN=${name})
--- utils/CMakeLists.txt
+++ utils/CMakeLists.txt
@@ -1,5 +1,5 @@
 include_directories("../libproxy")
-
 add_executable(proxy proxy.c)
+set_target_properties(proxy PROPERTIES OUTPUT_NAME proxy)
 target_link_libraries(proxy libproxy)
 install(TARGETS proxy RUNTIME DESTINATION ${BIN_INSTALL_DIR})
--- libproxy/cmake/devfiles.cmk
+++ libproxy/cmake/devfiles.cmk
@@ -14,10 +14,10 @@ if(NOT WIN32 OR MINGW)
     set (PKGCONFIG_INCLUDEDIR "\${prefix}/${INCLUDE_INSTALL_DIR}")
   endif(IS_ABSOLUTE ${INCLUDE_INSTALL_DIR})
 
+  configure_file(${PROJECT_SOURCE_DIR}/libproxy-1.0.pc.in ${PROJECT_BINARY_DIR}/libproxy-1.0.pc @ONLY)
+  install(FILES ${PROJECT_BINARY_DIR}/libproxy-1.0.pc DESTINATION ${LIB_INSTALL_DIR}/pkgconfig)
-  configure_file(${CMAKE_SOURCE_DIR}/libproxy/libproxy-1.0.pc.in ${CMAKE_BINARY_DIR}/libproxy-1.0.pc @ONLY)
-  install(FILES ${CMAKE_BINARY_DIR}/libproxy-1.0.pc DESTINATION ${LIB_INSTALL_DIR}/pkgconfig)
   
   # CMake Find helper
+  configure_file(${PROJECT_SOURCE_DIR}/Findlibproxy.cmake.in ${PROJECT_BINARY_DIR}/Findlibproxy.cmake @ONLY)
+  install(FILES ${PROJECT_BINARY_DIR}/Findlibproxy.cmake DESTINATION ${SHARE_INSTALL_DIR}/cmake/Modules)
-  configure_file(${CMAKE_SOURCE_DIR}/libproxy/Findlibproxy.cmake.in ${CMAKE_BINARY_DIR}/Findlibproxy.cmake @ONLY)
-  install(FILES ${CMAKE_BINARY_DIR}/Findlibproxy.cmake DESTINATION ${SHARE_INSTALL_DIR}/cmake/Modules)
 endif(NOT WIN32 OR MINGW)

