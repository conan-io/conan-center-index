From https://github.com/Cyriuz/ImageMagick
diff --git a/CMakeLists.txt b/CMakeLists.txt
new file mode 100644
index 000000000..03f6cca3f
--- /dev/null
+++ b/CMakeLists.txt
@@ -0,0 +1,511 @@
+#   Licensed under the ImageMagick License (the "License"); you may not use
+#   this file except in compliance with the License.  You may obtain a copy
+#   of the License at
+#
+#     https://imagemagick.org/script/license.php
+#
+#   Unless required by applicable law or agreed to in writing, software
+#   distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+#   WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
+#   License for the specific language governing permissions and limitations
+#   under the License.
+#
+#   CMake script file to build ImageMagick
+#   
+cmake_minimum_required(VERSION 3.19.0)
+cmake_policy(VERSION 3.19.0)
+
+project(ImageMagick)
+
+include(cmake/checks.cmake)
+
+macro(magick_find_delegate)
+  cmake_parse_arguments(MAGICK_FIND "" "DELEGATE;NAME;DEFAULT" "TARGETS" ${ARGN})
+
+  if((NOT DEFINED ${MAGICK_FIND_DELEGATE} AND ${MAGICK_FIND_DEFAULT}) OR ${MAGICK_FIND_DELEGATE})
+    find_package(${MAGICK_FIND_NAME} QUIET)
+    set(${MAGICK_FIND_DELEGATE} ${${MAGICK_FIND_NAME}_FOUND})
+    if(${MAGICK_FIND_DELEGATE})
+      message("Delegate ${MAGICK_FIND_NAME} found.")
+      if(MAGICK_FIND_TARGETS)
+        set(IMAGEMAGICK_DELEGATES_LIBRARIES ${IMAGEMAGICK_DELEGATES_LIBRARIES} ${MAGICK_FIND_TARGETS})
+      else()
+        set(IMAGEMAGICK_DELEGATES_LIBRARIES ${IMAGEMAGICK_DELEGATES_LIBRARIES} ${MAGICK_FIND_NAME}::${MAGICK_FIND_NAME})
+      endif()
+    else()
+      message("Delegate ${MAGICK_FIND_NAME} disabled. (Not found)")
+    endif()
+  else()
+    set(${MAGICK_FIND_DELEGATE} FALSE)
+    message("Delegate ${MAGICK_FIND_NAME} disabled.")
+  endif()
+endmacro()
+
+# Get the platform
+if(WIN32)
+  if(NOT WINDOWS)
+    set(WINDOWS TRUE)
+  endif()
+  # TODO check for mingw or cygwin ???
+elseif(UNIX AND NOT APPLE)
+  if(CMAKE_SYSTEM_NAME MATCHES ".*Linux")
+    set(LINUX TRUE)
+  elseif(CMAKE_SYSTEM_NAME MATCHES "kFreeBSD.*")
+    set(FREEBSD TRUE)
+  elseif(CMAKE_SYSTEM_NAME MATCHES "kNetBSD.*|NetBSD.*")
+    set(NETBSD TRUE)
+  elseif(CMAKE_SYSTEM_NAME MATCHES "kOpenBSD.*|OpenBSD.*")
+    set(OPENBSD TRUE)
+  elseif(CMAKE_SYSTEM_NAME MATCHES ".*GNU.*")
+    set(GNU TRUE)
+  elseif(CMAKE_SYSTEM_NAME MATCHES ".*BSDI.*")
+    set(BSDI TRUE)
+  elseif(CMAKE_SYSTEM_NAME MATCHES "DragonFly.*|FreeBSD")
+    set(FREEBSD TRUE)
+  elseif(CMAKE_SYSTEM_NAME MATCHES "SYSV5.*")
+    set(SYSV5 TRUE)
+  elseif(CMAKE_SYSTEM_NAME MATCHES "Solaris.*")
+    set(SOLARIS TRUE)
+  elseif(CMAKE_SYSTEM_NAME MATCHES "HP-UX.*")
+    set(HPUX TRUE)
+  elseif(CMAKE_SYSTEM_NAME MATCHES "AIX.*")
+    set(AIX TRUE)
+  elseif(CMAKE_SYSTEM_NAME MATCHES "Minix.*")
+    set(MINIX TRUE)
+  endif()
+elseif(APPLE)
+  if(CMAKE_SYSTEM_NAME MATCHES ".*Darwin.*")
+    set(DARWIN TRUE)
+  elseif(CMAKE_SYSTEM_NAME MATCHES ".*MacOS.*")
+    set(MACOSX TRUE)
+  endif()
+  # TODO: iOS?
+elseif(CMAKE_SYSTEM_NAME MATCHES "BeOS.*")
+  set(BEOS TRUE)
+elseif(CMAKE_SYSTEM_NAME MATCHES "Haiku.*")
+  set(HAIKU TRUE)
+endif()
+
+# if we're on MacOS X we enable the universal build
+if(APPLE)
+	set(AC_APPLE_UNIVERSAL_BUILD TRUE)
+endif()
+
+magick_check_env()
+
+####### OPTIONS #######
+set(MAGICKCORE_QUANTUM_DEPTH "16" CACHE STRING "Number of bits in a pixel Quantum")
+set_property(CACHE MAGICKCORE_QUANTUM_DEPTH PROPERTY STRINGS "8;16;32;64")
+set(MAGICK_BUILD_DEFINES ${MAGICK_BUILD_DEFINES} -DMAGICKCORE_QUANTUM_DEPTH=${MAGICKCORE_QUANTUM_DEPTH})
+
+option(MAGICK_BUILD_STATIC "Build ImageMagick statically" FALSE)
+if(MAGICK_BUILD_STATIC)
+  set(MAGICK_BUILD_DEFINES ${MAGICK_BUILD_DEFINES} -D_LIB)
+else()
+  set(MAGICK_BUILD_DEFINES ${MAGICK_BUILD_DEFINES} -D_DLL)
+endif()
+
+option(MAGICK_HDRI_ENABLE "Build ImageMagick with High dynamic-range imaging" TRUE)
+if(MAGICK_HDRI_ENABLE)
+  set(HDRI_SUFFIX HDRI)
+  set(MAGICK_BUILD_DEFINES ${MAGICK_BUILD_DEFINES} -DMAGICKCORE_HDRI_ENABLE)
+endif()
+
+option(BUILD_MAGICKPP "Enable build/install of Magick++" TRUE)
+option(BUILD_UTILITIES "Enable build/install of command-line utilities" TRUE)
+option(BUILD_MODULES "Compile coders and filters as modules" FALSE) # TODO
+option(CIPHER_SUPPORT "Permit enciphering and deciphering image pixels" TRUE)
+option(EXCLUDE_DEPRECATED "Exclude deprecated methods" TRUE)
+set(NAMESPACE_PREFIX "" CACHE STRING "Prefix MagickCore API methods")
+set(NAMESPACE_PREFIX_TAG ${NAMESPACE_PREFIX})
+set(PixelCacheThreshold "" CACHE STRING "Set pixel cache threshhold in MB (default available memory)")
+option(WITH_DMALLOC "Use dmalloc for memory profiling" FALSE)
+
+# Fetch some needed values from version.sh and fill the correspondent variables
+file(READ ${CMAKE_CURRENT_SOURCE_DIR}/configure CONTENT_CONFIGURE)
+
+# Try to find the date in the format yyyy-mm-dd
+string(REGEX MATCH "\nPACKAGE_RELEASE_DATE=([0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9])\n" FOUND_LAST_CHANGE_DATE "${CONTENT_CONFIGURE}")
+if(FOUND_LAST_CHANGE_DATE)
+  set(PACKAGE_RELEASE_DATE ${CMAKE_MATCH_1})
+endif()
+
+# Try to find `PACKAGE_NAME'
+string(REGEX MATCH "\nPACKAGE_NAME='([A-Za-z0-9]+)'\n" FOUND_PACKAGE_NAME ${CONTENT_CONFIGURE})
+if(FOUND_PACKAGE_NAME)
+  set(PACKAGE_NAME ${CMAKE_MATCH_1})
+endif()
+
+# Try to find `PACKAGE_LIB_VERSION'
+string(REGEX MATCH "\nPACKAGE_LIB_VERSION=([A-Fa-f0-9x]+)\n" FOUND_PACKAGE_LIB_VERSION ${CONTENT_CONFIGURE})
+if(FOUND_PACKAGE_LIB_VERSION)
+  set(PACKAGE_LIB_VERSION ${CMAKE_MATCH_1})
+endif()
+
+# Try to find `PACKAGE_VERSION'
+string(REGEX MATCH "\nPACKAGE_BASE_VERSION=([0-9.]+)\n" FOUND_PACKAGE_VERSION ${CONTENT_CONFIGURE})
+if(FOUND_PACKAGE_VERSION)
+  set(MAGICK_LIB_VERSION_TEXT ${CMAKE_MATCH_1})
+  set(MAGICKPP_LIB_VERSION_TEXT ${CMAKE_MATCH_1})
+endif()
+
+# Try parse just the major version number from MAGICK_LIB_VERSION_TEXT
+string(REGEX MATCH "([0-9])\\..*" FOUND_VERSION_MAJOR "${MAGICK_LIB_VERSION_TEXT}")
+if(FOUND_VERSION_MAJOR)
+  set(MAGICK_VERSION_MAJOR ${CMAKE_MATCH_1})
+endif()
+
+# Try to find `MAGICK_LIBRARY_CURRENT', `MAGICK_LIBRARY_REVISION' and `MAGICK_LIBRARY_AGE'
+string(REGEX MATCH "\nMAGICK_LIBRARY_CURRENT=([0-9]+)\nMAGICK_LIBRARY_REVISION=([0-9]+)\nMAGICK_LIBRARY_AGE=([0-9]+)\n" FOUND_MAGICK_LIB_VERSION_NUMBER ${CONTENT_CONFIGURE})
+if(FOUND_MAGICK_LIB_VERSION_NUMBER)
+  set(MAGICK_LIB_VERSION_NUMBER "${CMAKE_MATCH_1},${CMAKE_MATCH_2},${CMAKE_MATCH_3}")
+  set(MAGICK_LIBRARY_CURRENT ${CMAKE_MATCH_1})
+  set(MAGICK_LIBRARY_CURRENT_MIN ${CMAKE_MATCH_1})
+endif()
+
+# Try to find `PACKAGE_RELEASE'
+string(REGEX MATCH "\nPACKAGE_VERSION_ADDENDUM=-([0-9]+)\n" FOUND_PACKAGE_RELEASE ${CONTENT_CONFIGURE})
+if(FOUND_PACKAGE_RELEASE)
+  set(PACKAGE_VERSION_ADDENDUM "-${CMAKE_MATCH_1}")
+endif()
+
+# Try to find `MAGICKPP_LIBRARY_CURRENT', `MAGICKPP_LIBRARY_REVISION' and `MAGICKPP_LIBRARY_AGE'
+string(REGEX MATCH "\nMAGICKPP_LIBRARY_CURRENT=([0-9]+)\nMAGICKPP_LIBRARY_REVISION=([0-9]+)\nMAGICKPP_LIBRARY_AGE=([0-9]+)\n" FOUND_MAGICKPP_LIBRARY_VERSION_INFO ${CONTENT_CONFIGURE})
+if(FOUND_MAGICKPP_LIBRARY_VERSION_INFO)
+  set(MAGICKPP_LIBRARY_VERSION_INFO "${CMAKE_MATCH_1}:${CMAKE_MATCH_2}:${CMAKE_MATCH_3}")
+  set(MAGICKPP_LIBRARY_CURRENT ${CMAKE_MATCH_1})
+  set(MAGICKPP_LIBRARY_CURRENT_MIN ${CMAKE_MATCH_1})
+endif()
+
+# TODO
+set(VERSION "")
+set(MAGICK_TARGET_CPU "")
+set(MAGICK_TARGET_OS "")
+set(MAGICK_TARGET_VENDOR "")
+set(PACKAGE "")
+set(PACKAGE_BUGREPORT "")
+set(PACKAGE_STRING "")
+set(PACKAGE_TARNAME "")
+set(PACKAGE_URL "")
+set(PACKAGE_VERSION "")
+
+# Set if pipe (|) is enabled on filenames 
+# TODO Add linux and mac os X
+# TODO maybe this would be better with a test somehow
+if(WIN32)
+  set(PIPES_SUPPORT FALSE)
+endif()
+
+# Check if we are on AIX, do the _ALL_SOURCE magic
+if(AIX)
+  set(_ALL_SOURCE 1)
+  set(_LARGE_FILES 1)
+endif()
+
+# Check if we're on Solaris
+IF (SOLARIS)
+  set(_POSIX_PTHREAD_SEMANTICS TRUE)
+  set(__EXTENSIONS__ TRUE)
+  # TODO restrict the system version and check if the define should be these
+  set(_UINT32_T uint32_t)
+  set(_UINT64_T uint64_t)
+  set(_UINT8_T uint8_t)
+endif()
+
+# TODO Not sure how to test this, so for now it's disabled
+set(_TANDEM_SOURCE FALSE)
+
+# TODO check if this is supposed to be any of the ones defined https://cmake.org/cmake/help/v3.0/module/FindX11.html
+set(X11_CONFIGURE_PATH "")
+
+# TODO should this be an option ??
+set(X_DISPLAY_MISSING 1)
+
+# TODO Should we try this ???? also option??
+set(ZERO_CONFIGURATION_SUPPORT 0)
+
+# TODO does this suffice?
+if(CMAKE_SYSTEM_NAME STREQUAL "Linux" OR MINGW)
+  set(_FILE_OFFSET_BITS 64)
+  set(_LARGEFILE_SOURCE 1)
+else()
+# Not sure on Windows if code is made to work with 64 bits 
+  set(_FILE_OFFSET_BITS 32)
+endif()
+
+# Disable run-time bounds-checking
+set(_FORTIFY_SOURCE FALSE)
+
+####### PATHS #######
+# TODO Configure these correctly
+set(CODER_DIRNAME "")
+set(CONFIGURE_PATH "")
+set(CONFIGURE_RELATIVE_PATH "\"ImageMagick-7\"")
+set(DOCUMENTATION_PATH "")
+set(EXECUTABLE_PATH "")
+set(FILTER_DIRNAME "")
+set(INCLUDEARCH_PATH "")
+set(INCLUDE_PATH "")
+set(INSTALLED_SUPPORT "")
+set(LIBRARY_PATH "\"ImageMagick-7\"")
+set(LIBRARY_RELATIVE_PATH "\"ImageMagick-7\"")
+set(LIB_BIN_BASEDIRNAME "")
+set(SHAREARCH_BASEDIRNAME "")
+set(SHAREARCH_DIRNAME "")
+set(SHARE_PATH "")
+set(SHARE_RELATIVE_PATH "\"ImageMagick-7\"")
+set(MODULES_BASEDIRNAME "")
+set(MODULES_DIRNAME "")
+set(LT_OBJDIR "")
+
+# Set the default font search path
+if(WIN32)
+  set(MAGICK_FONT_PATH "\"$ENV{WINDIR}\\FONTS\\\"")
+  # Escape the path C way where '\' must be '\\' (regex and cmake also escapes '\' so to find one we need '\\\\')
+  string(REGEX REPLACE "\\\\" "\\\\\\\\" MAGICK_FONT_PATH ${MAGICK_FONT_PATH})
+elseif(UNIX AND NOT APPLE)
+  set(MAGICK_FONT_PATH "/usr/share/fonts/")
+elseif(APPLE)
+  set(MAGICK_FONT_PATH "/System/Library/Fonts/")
+endif()
+
+####### DELEGATES #######
+magick_find_delegate(DELEGATE BZLIB_DELEGATE NAME BZip2 DEFAULT TRUE)
+magick_find_delegate(DELEGATE LZMA_DELEGATE NAME LibLZMA DEFAULT TRUE)
+magick_find_delegate(DELEGATE ZLIB_DELEGATE NAME ZLIB DEFAULT TRUE)
+magick_find_delegate(DELEGATE ZSTD_DELEGATE NAME zstd DEFAULT TRUE)
+magick_find_delegate(DELEGATE FREETYPE_DELEGATE NAME Freetype DEFAULT TRUE)
+magick_find_delegate(DELEGATE XML_DELEGATE NAME LibXml2 DEFAULT TRUE)
+
+magick_find_delegate(DELEGATE OPENMP_SUPPORT NAME OpenMP DEFAULT TRUE TARGETS OpenMP::OpenMP_C)
+if(OPENMP_SUPPORT)
+  set(MAGICK_BUILD_DEFINES ${MAGICK_BUILD_DEFINES} -D_OPENMP=${OpenMP_C_SPEC_DATE})
+endif()
+
+magick_find_delegate(DELEGATE THREADS_SUPPORT NAME Threads DEFAULT TRUE TARGETS)
+if(CMAKE_USE_PTHREADS_INIT)
+  set(THREAD_SUPPORT TRUE)
+  set(CMAKE_THREAD_PREFER_PTHREAD TRUE)
+  set(THREADS_PREFER_PTHREAD_FLAG TRUE)
+  set(IMAGEMAGICK_DELEGATES_LIBRARIES ${IMAGEMAGICK_DELEGATES_LIBRARIES} Threads::Threads)
+endif()
+CHECK_INCLUDE_FILE(pthread.h HAVE_PTHREAD_H)
+if(HAVE_PTHREAD_H)
+  CHECK_LIBRARY_EXISTS(pthread pthread_create "" HAVE_PTHREAD)
+  CHECK_SYMBOL_EXISTS(PTHREAD_PRIO_INHERIT pthread.h HAVE_PTHREAD_PRIO_INHERIT)
+endif()
+# TODO Not sure what to do here
+set(PTHREAD_CREATE_JOINABLE "")
+
+magick_find_delegate(DELEGATE TIFF_DELEGATE NAME TIFF DEFAULT TRUE)
+if(TIFF_FOUND)
+  set(HAVE_TIFFCONF_H 1)
+  set(HAVE_TIFFISBIGENDIAN 1)
+  set(HAVE_TIFFISCODECCONFIGURED 1)
+  set(HAVE_TIFFMERGEFIELDINFO 1)
+  set(HAVE_TIFFREADEXIFDIRECTORY 1)
+  set(HAVE_TIFFSETERRORHANDLEREXT 1)
+  set(HAVE_TIFFSETTAGEXTENDER 1)
+  set(HAVE_TIFFSETWARNINGHANDLEREXT 1)
+  set(HAVE_TIFFSWABARRAYOFTRIPLES 1)
+endif()
+magick_find_delegate(DELEGATE LCMS_DELEGATE NAME lcms DEFAULT TRUE)
+if(LCMS_FOUND)
+  set(HAVE_LCMS2_H 1)
+endif()
+magick_find_delegate(DELEGATE RAW_R_DELEGATE NAME libraw DEFAULT TRUE)
+if(LIBRAW_FOUND)
+  set(HAVE_LIBRAW_LIBRAW_H 1)
+endif()
+magick_find_delegate(DELEGATE HEIC_DELEGATE NAME libheif DEFAULT TRUE)
+if(LIBHEIF_FOUND)
+  set(HAVE_LIBHEIF_LIBHEIF_H 1)
+endif()
+
+magick_find_delegate(DELEGATE JBIG_DELEGATE NAME JBIG DEFAULT TRUE)
+magick_find_delegate(DELEGATE JPEG_DELEGATE NAME JPEG DEFAULT TRUE)
+magick_find_delegate(DELEGATE LIBOPENJP2_DELEGATE NAME OpenJPEG DEFAULT TRUE)
+magick_find_delegate(DELEGATE OPENEXR_DELEGATE NAME OpenEXR DEFAULT TRUE)
+magick_find_delegate(DELEGATE PNG_DELEGATE NAME PNG DEFAULT TRUE)
+magick_find_delegate(DELEGATE RSVG_DELEGATE NAME Rsvg DEFAULT TRUE)
+magick_find_delegate(DELEGATE WEBP_DELEGATE NAME WebP DEFAULT TRUE)
+magick_find_delegate(DELEGATE JXL_DELEGATE NAME JXL DEFAULT TRUE)
+
+# TODO are these correct and should they be off by default?
+magick_find_delegate(DELEGATE AUTOTRACE_DELEGATE NAME AUTOTRACE DEFAULT FALSE)
+magick_find_delegate(DELEGATE CAIRO_DELEGATE NAME Cairo DEFAULT FALSE)
+magick_find_delegate(DELEGATE DJVU_DELEGATE NAME DJVU DEFAULT FALSE)
+magick_find_delegate(DELEGATE DPS_DELEGATE NAME DPS DEFAULT FALSE)
+magick_find_delegate(DELEGATE FFTW_DELEGATE NAME FFTW DEFAULT FALSE)
+magick_find_delegate(DELEGATE FLIF_DELEGATE NAME FLIF DEFAULT FALSE)
+magick_find_delegate(DELEGATE FONTCONFIG_DELEGATE NAME Fontconfig DEFAULT FALSE)
+magick_find_delegate(DELEGATE FPX_DELEGATE NAME FlashPIX DEFAULT FALSE)
+magick_find_delegate(DELEGATE GS_DELEGATE NAME Ghostscript DEFAULT FALSE)
+magick_find_delegate(DELEGATE GVC_DELEGATE NAME GVC DEFAULT FALSE)
+magick_find_delegate(DELEGATE LTDL_DELEGATE NAME LTDL DEFAULT FALSE)
+# TODO
+set(LTDL_MODULE_EXT "")
+magick_find_delegate(DELEGATE PANGO_DELEGATE NAME Pango DEFAULT FALSE)
+magick_find_delegate(DELEGATE PANGOCAIRO_DELEGATE NAME PangoCairo DEFAULT FALSE)
+magick_find_delegate(DELEGATE RAQM_DELEGATE NAME RAQM DEFAULT FALSE)
+magick_find_delegate(DELEGATE WEBPMUX_DELEGATE NAME WEBPMUX DEFAULT FALSE)
+magick_find_delegate(DELEGATE WMF_DELEGATE NAME WMF DEFAULT FALSE)
+magick_find_delegate(DELEGATE LQR NAME Lqr DEFAULT FALSE)
+
+magick_find_delegate(DELEGATE HasJEMALLOC NAME Jemalloc DEFAULT FALSE)
+magick_find_delegate(DELEGATE HasUMEM NAME UMEM DEFAULT FALSE)
+
+magick_find_delegate(DELEGATE OPENCLLIB_DELEGATE NAME OpenCL DEFAULT FALSE)
+if(OpenCL_FOUND)
+  set(_OPENCL 1)
+  CHECK_INCLUDE_FILE(OpenCL/cl.h HAVE_OPENCL_CL_H)
+  CHECK_INCLUDE_FILE(CL/cl.h HAVE_CL_CL_H)
+endif()
+
+# TODO Should we check if gdi32 exists if windows?
+if(WIN32)
+  set(WINGDI32_DELEGATE TRUE)
+endif()
+
+# Compile with X11 if present
+magick_find_delegate(DELEGATE X11_DELEGATE NAME X11 DEFAULT TRUE)
+if(X11_DELEGATE)
+  set(IMAGEMAGICK_DELEGATES_LIBRARIES ${IMAGEMAGICK_DELEGATES_LIBRARIES} X11::Xext)
+endif()
+
+# Set ImageMagick base dir to be used inside sub-projects
+set(IMAGEMAGICK_BASE_PATH ${CMAKE_CURRENT_SOURCE_DIR} ${CMAKE_CURRENT_BINARY_DIR})
+
+# Set coders andd filters path
+set(CODERS_PATH ${CMAKE_CURRENT_SOURCE_DIR}/coders)
+set(FILTERS_PATH ${CMAKE_CURRENT_SOURCE_DIR}/filters)
+
+set(IMAGEMAGICK_INC_DIR "include/ImageMagick-${MAGICK_VERSION_MAJOR}")
+
+####### CONFIG #######
+# Set the version.h file path to be autogenerated
+configure_file(${CMAKE_CURRENT_SOURCE_DIR}/MagickCore/version.h.cmake ${CMAKE_CURRENT_BINARY_DIR}/MagickCore/version.h)
+
+if(${MAGICKCORE_QUANTUM_DEPTH} EQUAL 8)
+  set(MagickQuantumDepth "Q8")
+elseif(${MAGICKCORE_QUANTUM_DEPTH} EQUAL 16)
+  set(MagickQuantumDepth "Q16")
+elseif(${MAGICKCORE_QUANTUM_DEPTH} EQUAL 32)
+  set(MagickQuantumDepth "Q32")
+elseif(${MAGICKCORE_QUANTUM_DEPTH} EQUAL 64)
+  set(MagickQuantumDepth "Q64")
+else()
+  set(MagickQuantumDepth "Q?")
+endif()
+
+# rc files are only used on Windows binaries
+if(WIN32)
+  set(MagickLibVersionNumber ${MAGICK_LIB_VERSION_NUMBER})
+  set(MagickLibVersionText \"${MAGICK_LIB_VERSION_TEXT}\")
+  
+  if(${CMAKE_SIZEOF_VOID_P} EQUAL 4)
+    set(MagickPlatform "x86")
+  elseif(${CMAKE_SIZEOF_VOID_P} EQUAL 8)
+    set(MagickPlatform "x64")
+  else()
+    set(MagickPlatform ${MAGICK_TARGET_CPU})
+  endif()
+  
+  # Read the version.h file so we can get some needed values using regex
+  file(READ ${CMAKE_CURRENT_BINARY_DIR}/MagickCore/version.h CONTENT_VERSION_H)
+  
+  # Try to find `MagickCopyright'
+  string(REGEX MATCH "\n#define[ ]+MagickCopyright[ ]+\"([^\"]+)\"\n" FOUND_MAGICK_COPYRIGHT ${CONTENT_VERSION_H})
+  if(FOUND_MAGICK_COPYRIGHT)
+    set(MagickCopyright \"${CMAKE_MATCH_1}\")
+  endif()
+  
+  # Try to find `MagickAuthoritativeURL'
+  string(REGEX MATCH "\n#define[ ]+MagickAuthoritativeURL[ ]+\"([^\"]+)\"\n" FOUND_MAGICK_AUTHORITATIVE_URL ${CONTENT_VERSION_H})
+  if(FOUND_MAGICK_AUTHORITATIVE_URL)
+    set(MagickAuthoritativeURL ${CMAKE_MATCH_1})
+  endif()
+
+  set(MagickVersion "\"${PACKAGE_NAME} ${MAGICK_LIB_VERSION_TEXT}${PACKAGE_VERSION_ADDENDUM} ${MagickQuantumDepth} ${MagickPlatform} ${PACKAGE_RELEASE_DATE} ${MagickAuthoritativeURL}\"")
+  
+  # Set the ImageMagick.rc file path to be autogenerated
+  set(MAGICK_RESOURCE_FILE_PATH ${CMAKE_CURRENT_BINARY_DIR}/config/resources/ImageMagick.rc)
+  configure_file(${CMAKE_CURRENT_SOURCE_DIR}/config/ImageMagick.rc.cmake ${MAGICK_RESOURCE_FILE_PATH})
+  # Copy only the needed resource files to output directory
+  configure_file(${CMAKE_CURRENT_SOURCE_DIR}/images/ImageMagick.ico ${CMAKE_CURRENT_BINARY_DIR}/images/ImageMagick.ico COPYONLY)  
+endif()
+
+# Before making the config.h we still need to do somethings
+set(PACKAGE_NAME \"${PACKAGE_NAME}\")
+
+# Set the config.h file path to be autogenerated
+configure_file(${CMAKE_CURRENT_SOURCE_DIR}/config/config.h.cmake ${CMAKE_CURRENT_BINARY_DIR}/config/config.h)
+
+# Now we need to read its content to generate the magick-baseconfig.h header
+file(READ ${CMAKE_CURRENT_BINARY_DIR}/config/config.h CONTENT_CONFIG_H)
+
+# Now we need to Regex Replace some things in the header file
+# All caps defines will be prefixed with a macro MAGICKCORE_
+string(REGEX REPLACE 
+  "\\*\\/\n#define[ ]+([A-Z0-9_]+)[ ]*([a-zA-Z0-9\":\\\-]*)\n" 
+  "*/\n#ifndef MAGICKCORE_\\1\n#define MAGICKCORE_\\1 \\2\n#endif\n"
+  CONTENT_CONFIG_H ${CONTENT_CONFIG_H}
+)
+# All uncaps defines will be prefixed with a macro _magickcore_
+string(REGEX REPLACE 
+  "\\*\\/\n#define[ ]+([a-z0-9_]+)[ ]*([a-zA-Z0-9 \"_]*)\n" 
+  "*/\n#ifndef _magickcore_\\1\n#define _magickcore_\\1 \\2\n#endif\n"
+  CONTENT_CONFIG_H ${CONTENT_CONFIG_H}
+)
+# For some reason (I can't seem to find the logic) there's some defines we need to remove the prefix
+string(REGEX REPLACE
+  "_magickcore___func__"
+  "__func__"
+  CONTENT_CONFIG_H ${CONTENT_CONFIG_H}
+)
+# Also for ssize_t we need to typedef instead of define or else magick++ will not compile
+string(REGEX REPLACE 
+  "#ifndef _magickcore_ssize_t\n#define _magickcore_ssize_t ([a-zA-Z ]*)\n#endif" 
+  "typedef \\1 ssize_t;"
+  CONTENT_CONFIG_H ${CONTENT_CONFIG_H}
+)
+
+# Now we need to append things to the previously read file content
+set(CONTENT_CONFIG_H 
+"#ifndef _MAGICKCORE_MAGICK_BASECONFIG_H
+#define _MAGICKCORE_MAGICK_BASECONFIG_H 1
+
+/* MagickCore/magick-baseconfig.h. Generated automatically at end of configure. */
+/* config/config.h.  Generated from config.h.cmake by CMake.  */
+${CONTENT_CONFIG_H}
+
+/* once: _MAGICKCORE_MAGICK_BASECONFIG_H */
+#endif
+"
+)
+
+# Create the magick-baseconfig.h file
+file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/MagickCore/magick-baseconfig.h "${CONTENT_CONFIG_H}")
+
+# Set the binaries name
+set(MAGICK_BINARY_SUFFIX "${MAGICK_VERSION_MAJOR}.${MagickQuantumDepth}${HDRI_SUFFIX}")
+set(MAGICKCORE_BINARY_NAME "MagickCore-${MAGICK_BINARY_SUFFIX}")
+set(MAGICKWAND_BINARY_NAME "MagickWand-${MAGICK_BINARY_SUFFIX}")
+set(MAGICKXX_BINARY_NAME "Magick++-${MAGICK_BINARY_SUFFIX}")
+set(MAGICK_BINARY_NAME "Magick")
+
+# Add the subdirectories to be compiled
+add_subdirectory("MagickCore")
+add_subdirectory("MagickWand")
+if(BUILD_MAGICKPP)
+  add_subdirectory("Magick++")
+endif()
+if(BUILD_UTILITIES)
+  add_subdirectory("utilities")
+endif()
+
+install(FILES
+  LICENSE
+  NOTICE
+  DESTINATION licenses
+)
diff --git a/Magick++/CMakeLists.txt b/Magick++/CMakeLists.txt
new file mode 100644
index 000000000..d034213fc
--- /dev/null
+++ b/Magick++/CMakeLists.txt
@@ -0,0 +1,100 @@
+#   Licensed under the ImageMagick License (the "License"); you may not use
+#   this file except in compliance with the License.  You may obtain a copy
+#   of the License at
+#
+#     https://imagemagick.org/script/license.php
+#
+#   Unless required by applicable law or agreed to in writing, software
+#   distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+#   WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
+#   License for the specific language governing permissions and limitations
+#   under the License.
+#
+#   CMake script file to build ImageMagick
+# 
+
+project(Magick++ CXX)
+
+SET(MAGICKXX_PUBLIC_HEADERS
+  lib/Magick++/Blob.h
+  lib/Magick++/CoderInfo.h
+  lib/Magick++/Color.h
+  lib/Magick++/Drawable.h
+  lib/Magick++/Exception.h
+  lib/Magick++/Functions.h
+  lib/Magick++/Geometry.h
+  lib/Magick++/Image.h
+  lib/Magick++/Include.h
+  lib/Magick++/Montage.h
+  lib/Magick++/Pixels.h
+  lib/Magick++/ResourceLimits.h
+  lib/Magick++/SecurityPolicy.h
+  lib/Magick++/Statistic.h
+  lib/Magick++/STL.h
+  lib/Magick++/TypeMetric.h
+)
+
+set(MAGICKXX_SRC
+  lib/Blob.cpp
+  lib/BlobRef.cpp
+  lib/CoderInfo.cpp
+  lib/Color.cpp
+  lib/Drawable.cpp
+  lib/Exception.cpp
+  lib/Functions.cpp
+  lib/Geometry.cpp
+  lib/Image.cpp
+  lib/ImageRef.cpp
+  lib/Montage.cpp
+  lib/Options.cpp
+  lib/Pixels.cpp
+  lib/ResourceLimits.cpp
+  lib/SecurityPolicy.cpp
+  lib/Statistic.cpp
+  lib/STL.cpp
+  lib/Thread.cpp
+  lib/TypeMetric.cpp
+  lib/Magick++.h
+  lib/Magick++/Blob.h
+  lib/Magick++/BlobRef.h
+  lib/Magick++/CoderInfo.h
+  lib/Magick++/Color.h
+  lib/Magick++/Drawable.h
+  lib/Magick++/Exception.h
+  lib/Magick++/Functions.h
+  lib/Magick++/Geometry.h
+  lib/Magick++/Image.h
+  lib/Magick++/ImageRef.h
+  lib/Magick++/Include.h
+  lib/Magick++/Montage.h
+  lib/Magick++/Options.h
+  lib/Magick++/Pixels.h
+  lib/Magick++/ResourceLimits.h
+  lib/Magick++/SecurityPolicy.h
+  lib/Magick++/Statistic.h
+  lib/Magick++/STL.h
+  lib/Magick++/Thread.h
+  lib/Magick++/TypeMetric.h
+)
+
+if(MAGICK_BUILD_STATIC)
+  add_library(${MAGICKXX_BINARY_NAME} STATIC ${MAGICKXX_SRC} ${MAGICK_RESOURCE_FILE_PATH})
+else()
+  add_library(${MAGICKXX_BINARY_NAME} SHARED ${MAGICKXX_SRC} ${MAGICK_RESOURCE_FILE_PATH})
+endif()
+
+set_target_properties(${MAGICKXX_BINARY_NAME} PROPERTIES PUBLIC_HEADER "${MAGICKXX_PUBLIC_HEADERS}")
+target_include_directories(${MAGICKXX_BINARY_NAME} PUBLIC ${IMAGEMAGICK_BASE_PATH} ${CMAKE_CURRENT_SOURCE_DIR}/lib)
+target_compile_definitions(${MAGICKXX_BINARY_NAME} PRIVATE ${MAGICK_BUILD_DEFINES} -D_MAGICKLIB_)
+target_link_libraries(${MAGICKXX_BINARY_NAME} PUBLIC ${MAGICKWAND_BINARY_NAME})
+
+install(TARGETS ${MAGICKXX_BINARY_NAME}
+  RUNTIME DESTINATION bin
+  LIBRARY DESTINATION bin
+  ARCHIVE DESTINATION lib
+  PUBLIC_HEADER DESTINATION ${IMAGEMAGICK_INC_DIR}/Magick++
+)
+
+install(FILES
+  lib/Magick++.h DESTINATION ${IMAGEMAGICK_INC_DIR}
+)
diff --git a/MagickCore/CMakeLists.txt b/MagickCore/CMakeLists.txt
new file mode 100644
index 000000000..6a71b9cb4
--- /dev/null
+++ b/MagickCore/CMakeLists.txt
@@ -0,0 +1,722 @@
+#   Licensed under the ImageMagick License (the "License"); you may not use
+#   this file except in compliance with the License.  You may obtain a copy
+#   of the License at
+#
+#     https://imagemagick.org/script/license.php
+#
+#   Unless required by applicable law or agreed to in writing, software
+#   distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+#   WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
+#   License for the specific language governing permissions and limitations
+#   under the License.
+#
+#   CMake script file to build ImageMagick
+# 
+
+project(MagickCore C)
+
+set(MAGICKCORE_SRC
+  MagickCore.h
+  accelerate.c
+  accelerate-private.h
+  accelerate-kernels-private.h
+  animate.c
+  animate.h
+  animate-private.h
+  annotate.c
+  annotate.h
+  artifact.c
+  artifact.h
+  attribute.c
+  attribute.h
+  blob.c
+  blob.h
+  blob-private.h
+  cache.c
+  cache.h
+  cache-private.h
+  cache-view.c
+  cache-view.h
+  channel.c
+  channel.h
+  cipher.c
+  cipher.h
+  client.c
+  client.h
+  coder.c
+  coder.h
+  color.c
+  color.h
+  color-private.h
+  colormap.c
+  colormap.h
+  colormap-private.h
+  colorspace.c
+  colorspace.h
+  colorspace-private.h
+  compare.c
+  compare.h
+  composite.c
+  composite.h
+  composite-private.h
+  compress.c
+  compress.h
+  configure.c
+  configure.h
+  constitute.c
+  constitute.h
+  decorate.c
+  decorate.h
+  delegate.c
+  delegate.h
+  delegate-private.h
+  deprecate.c
+  deprecate.h
+  display.c
+  display.h
+  display-private.h
+  distort.c
+  distort.h
+  distribute-cache.c
+  distribute-cache.h
+  distribute-cache-private.h
+  draw.c
+  draw.h
+  draw-private.h
+  effect.c
+  effect.h
+  enhance.c
+  enhance.h
+  exception.c
+  exception.h
+  exception-private.h
+  feature.c
+  feature.h
+  fourier.c
+  fourier.h
+  fx.c
+  fx.h
+  fx-private.h
+  gem.c
+  gem.h
+  gem-private.h
+  geometry.c
+  geometry.h
+  histogram.c
+  histogram.h
+  identify.c
+  identify.h
+  image.c
+  image.h
+  image-private.h
+  image-view.c
+  image-view.h
+  layer.c
+  layer.h
+  linked-list.c
+  linked-list.h
+  list.c
+  list.h
+  locale.c
+  locale_.h
+  log.c
+  log.h
+  magic.c
+  magic.h
+  magick.c
+  magick-baseconfig.h
+  magick-config.h
+  magick-type.h
+  magick.h
+  matrix.c
+  matrix.h
+  matrix-private.h
+  memory.c
+  memory_.h
+  memory-private.h
+  method-attribute.h
+  methods.h
+  mime.c
+  mime.h
+  module.c
+  module.h
+  monitor.c
+  monitor.h
+  monitor-private.h
+  montage.c
+  montage.h
+  morphology.c
+  morphology.h
+  morphology-private.h
+  mutex.h
+  nt-base.h
+  nt-base-private.h
+  nt-feature.h
+  opencl.c
+  opencl.h
+  opencl-private.h
+  option.c
+  option.h
+  option-private.h
+  paint.c
+  paint.h
+  pixel.c
+  pixel.h
+  pixel-accessor.h
+  pixel-private.h
+  policy.c
+  policy.h
+  policy-private.h
+  prepress.c
+  prepress.h
+  property.c
+  property.h
+  profile.c
+  profile.h
+  profile-private.h
+  quantize.c
+  quantize.h
+  quantum.c
+  quantum.h
+  quantum-export.c
+  quantum-import.c
+  quantum-private.h
+  random.c
+  random_.h
+  random-private.h
+  registry.c
+  registry.h
+  resample.c
+  resample.h
+  resample-private.h
+  resize.c
+  resize.h
+  resize-private.h
+  resource.c
+  resource_.h
+  resource-private.h
+  segment.c
+  segment.h
+  semaphore.c
+  semaphore.h
+  semaphore-private.h
+  shear.c
+  shear.h
+  signature.c
+  signature.h
+  signature-private.h
+  splay-tree.c
+  splay-tree.h
+  static.c
+  static.h
+  statistic.c
+  statistic.h
+  stream.c
+  stream.h
+  stream-private.h
+  string.c
+  string_.h
+  string-private.h
+  studio.h
+  thread.c
+  thread_.h
+  thread-private.h
+  timer.c
+  timer.h
+  timer-private.h
+  token.c
+  token.h
+  token-private.h
+  transform.c
+  transform.h
+  threshold.c
+  threshold.h
+  type.c
+  type.h
+  utility.c
+  utility.h
+  utility-private.h
+  version.c
+  version.h
+  version-private.h
+  visual-effects.c
+  visual-effects.h
+  vision.c
+  vision.h
+  widget.c
+  widget.h
+  widget-private.h
+  xml-tree.c
+  xml-tree.h
+  xml-tree-private.h
+  xwindow.c
+  xwindow.h
+)
+
+if(WIN32)
+  set(MAGICKCORE_SRC ${MAGICKCORE_SRC}
+    nt-base.c
+    nt-base.h
+    nt-base-private.h
+    nt-feature.c
+    nt-feature.h
+  )
+elseif(CYGWIN)
+  set(MAGICKCORE_SRC ${MAGICKCORE_SRC}
+    nt-feature.c
+    nt-feature.h
+  )
+endif()
+
+set(MAGICKCORE_PUBLIC_HEADERS
+  MagickCore.h
+  animate.h
+  annotate.h
+  artifact.h
+  attribute.h
+  blob.h
+  cache.h
+  cache-view.h
+  channel.h
+  cipher.h
+  client.h
+  coder.h
+  color.h
+  colormap.h
+  colorspace.h
+  compare.h
+  composite.h
+  compress.h
+  configure.h
+  constitute.h
+  decorate.h
+  delegate.h
+  deprecate.h
+  display.h
+  distort.h
+  distribute-cache.h
+  draw.h
+  effect.h
+  enhance.h
+  exception.h
+  feature.h
+  fourier.h
+  fx.h
+  gem.h
+  geometry.h
+  histogram.h
+  identify.h
+  image.h
+  image-view.h
+  layer.h
+  linked-list.h
+  list.h
+  locale_.h
+  log.h
+  magic.h
+  magick.h
+  magick-config.h
+  magick-type.h
+  matrix.h
+  memory_.h
+  method-attribute.h
+  methods.h
+  mime.h
+  module.h
+  monitor.h
+  montage.h
+  morphology.h
+  nt-base.h
+  opencl.h
+  option.h
+  paint.h
+  pixel.h
+  pixel-accessor.h
+  policy.h
+  prepress.h
+  profile.h
+  property.h
+  quantize.h
+  quantum.h
+  random_.h
+  registry.h
+  resample.h
+  resize.h
+  resource_.h
+  segment.h
+  semaphore.h
+  shear.h
+  signature.h
+  splay-tree.h
+  static.h
+  statistic.h
+  stream.h
+  string_.h
+  studio.h
+  timer.h
+  token.h
+  transform.h
+  threshold.h
+  type.h
+  utility.h
+  vision.h
+  visual-effects.h
+  widget.h
+  xml-tree.h
+  xwindow.h
+)
+
+set(MAGICKCORE_FILTERS_SRCS
+  ${FILTERS_PATH}/analyze.c
+)
+
+set(MAGICKCORE_CODERS_SRCS
+  ${CODERS_PATH}/aai.c
+  ${CODERS_PATH}/aai.h
+  ${CODERS_PATH}/art.c
+  ${CODERS_PATH}/art.h
+  ${CODERS_PATH}/ashlar.c
+  ${CODERS_PATH}/ashlar.h
+  ${CODERS_PATH}/avs.c
+  ${CODERS_PATH}/avs.h
+  ${CODERS_PATH}/bgr.c
+  ${CODERS_PATH}/bgr.h
+  ${CODERS_PATH}/bmp.c
+  ${CODERS_PATH}/bmp.h
+  ${CODERS_PATH}/braille.c
+  ${CODERS_PATH}/braille.h
+  ${CODERS_PATH}/bytebuffer-private.h
+  ${CODERS_PATH}/cals.c
+  ${CODERS_PATH}/cals.h
+  ${CODERS_PATH}/caption.c
+  ${CODERS_PATH}/caption.h
+  ${CODERS_PATH}/cin.c
+  ${CODERS_PATH}/cin.h
+  ${CODERS_PATH}/cip.c
+  ${CODERS_PATH}/cip.h
+  ${CODERS_PATH}/clipboard.h
+  ${CODERS_PATH}/clip.c
+  ${CODERS_PATH}/clip.h
+  ${CODERS_PATH}/cmyk.c
+  ${CODERS_PATH}/cmyk.h
+  ${CODERS_PATH}/coders.h
+  ${CODERS_PATH}/coders-list.h
+  ${CODERS_PATH}/coders-private.h
+  ${CODERS_PATH}/cube.c
+  ${CODERS_PATH}/cube.h
+  ${CODERS_PATH}/cut.c
+  ${CODERS_PATH}/cut.h
+  ${CODERS_PATH}/dcm.c
+  ${CODERS_PATH}/dcm.h
+  ${CODERS_PATH}/dds.c
+  ${CODERS_PATH}/dds.h
+  ${CODERS_PATH}/debug.c
+  ${CODERS_PATH}/debug.h
+  ${CODERS_PATH}/dib.c
+  ${CODERS_PATH}/dib.h
+  ${CODERS_PATH}/djvu.h
+  ${CODERS_PATH}/dng.c
+  ${CODERS_PATH}/dng.h
+  ${CODERS_PATH}/dot.c
+  ${CODERS_PATH}/dot.h
+  ${CODERS_PATH}/dps.h
+  ${CODERS_PATH}/dpx.c
+  ${CODERS_PATH}/dpx.h
+  ${CODERS_PATH}/emf.h
+  ${CODERS_PATH}/ept.h
+  ${CODERS_PATH}/exr.h
+  ${CODERS_PATH}/farbfeld.c
+  ${CODERS_PATH}/farbfeld.h
+  ${CODERS_PATH}/fax.c
+  ${CODERS_PATH}/fax.h
+  ${CODERS_PATH}/fits.c
+  ${CODERS_PATH}/fits.h
+  ${CODERS_PATH}/fl32.c
+  ${CODERS_PATH}/fl32.h
+  ${CODERS_PATH}/flif.h
+  ${CODERS_PATH}/fpx.h
+  ${CODERS_PATH}/ftxt.h
+  ${CODERS_PATH}/ftxt.c
+  ${CODERS_PATH}/ghostscript-private.h
+  ${CODERS_PATH}/gif.c
+  ${CODERS_PATH}/gif.h
+  ${CODERS_PATH}/gradient.c
+  ${CODERS_PATH}/gradient.h
+  ${CODERS_PATH}/gray.c
+  ${CODERS_PATH}/gray.h
+  ${CODERS_PATH}/hald.c
+  ${CODERS_PATH}/hald.h
+  ${CODERS_PATH}/hdr.c
+  ${CODERS_PATH}/hdr.h
+  ${CODERS_PATH}/heic.h
+  ${CODERS_PATH}/histogram.c
+  ${CODERS_PATH}/histogram.h
+  ${CODERS_PATH}/hrz.c
+  ${CODERS_PATH}/hrz.h
+  ${CODERS_PATH}/html.c
+  ${CODERS_PATH}/html.h
+  ${CODERS_PATH}/icon.c
+  ${CODERS_PATH}/icon.h
+  ${CODERS_PATH}/info.c
+  ${CODERS_PATH}/info.h
+  ${CODERS_PATH}/inline.c
+  ${CODERS_PATH}/inline.h
+  ${CODERS_PATH}/ipl.c
+  ${CODERS_PATH}/ipl.h
+  ${CODERS_PATH}/jbig.h
+  ${CODERS_PATH}/jnx.c
+  ${CODERS_PATH}/jnx.h
+  ${CODERS_PATH}/jp2.h
+  ${CODERS_PATH}/jpeg.h
+  ${CODERS_PATH}/json.c
+  ${CODERS_PATH}/json.h
+  ${CODERS_PATH}/jxl.h
+  ${CODERS_PATH}/kernel.c
+  ${CODERS_PATH}/kernel.h
+  ${CODERS_PATH}/label.c
+  ${CODERS_PATH}/label.h
+  ${CODERS_PATH}/mac.c
+  ${CODERS_PATH}/mac.h
+  ${CODERS_PATH}/magick.c
+  ${CODERS_PATH}/magick.h
+  ${CODERS_PATH}/map.c
+  ${CODERS_PATH}/map.h
+  ${CODERS_PATH}/mask.c
+  ${CODERS_PATH}/mask.h
+  ${CODERS_PATH}/mat.c
+  ${CODERS_PATH}/mat.h
+  ${CODERS_PATH}/matte.c
+  ${CODERS_PATH}/matte.h
+  ${CODERS_PATH}/meta.c
+  ${CODERS_PATH}/meta.h
+  ${CODERS_PATH}/miff.c
+  ${CODERS_PATH}/miff.h
+  ${CODERS_PATH}/mono.c
+  ${CODERS_PATH}/mono.h
+  ${CODERS_PATH}/mpc.c
+  ${CODERS_PATH}/mpc.h
+  ${CODERS_PATH}/mpr.c
+  ${CODERS_PATH}/mpr.h
+  ${CODERS_PATH}/msl.c
+  ${CODERS_PATH}/msl.h
+  ${CODERS_PATH}/mtv.c
+  ${CODERS_PATH}/mtv.h
+  ${CODERS_PATH}/mvg.c
+  ${CODERS_PATH}/mvg.h
+  ${CODERS_PATH}/null.c
+  ${CODERS_PATH}/null.h
+  ${CODERS_PATH}/ora.c
+  ${CODERS_PATH}/ora.h
+  ${CODERS_PATH}/otb.c
+  ${CODERS_PATH}/otb.h
+  ${CODERS_PATH}/palm.c
+  ${CODERS_PATH}/palm.h
+  ${CODERS_PATH}/pango.c
+  ${CODERS_PATH}/pango.h
+  ${CODERS_PATH}/pattern.c
+  ${CODERS_PATH}/pattern.h
+  ${CODERS_PATH}/pcd.c
+  ${CODERS_PATH}/pcd.h
+  ${CODERS_PATH}/pcl.c
+  ${CODERS_PATH}/pcl.h
+  ${CODERS_PATH}/pcx.c
+  ${CODERS_PATH}/pcx.h
+  ${CODERS_PATH}/pdb.c
+  ${CODERS_PATH}/pdb.h
+  ${CODERS_PATH}/pdf.c
+  ${CODERS_PATH}/pdf.h
+  ${CODERS_PATH}/pes.c
+  ${CODERS_PATH}/pes.h
+  ${CODERS_PATH}/pgx.c
+  ${CODERS_PATH}/pgx.h
+  ${CODERS_PATH}/pict.c
+  ${CODERS_PATH}/pict.h
+  ${CODERS_PATH}/pix.c
+  ${CODERS_PATH}/pix.h
+  ${CODERS_PATH}/plasma.c
+  ${CODERS_PATH}/plasma.h
+  ${CODERS_PATH}/png.h
+  ${CODERS_PATH}/pnm.c
+  ${CODERS_PATH}/pnm.h
+  ${CODERS_PATH}/ps2.c
+  ${CODERS_PATH}/ps2.h
+  ${CODERS_PATH}/ps3.c
+  ${CODERS_PATH}/ps3.h
+  ${CODERS_PATH}/ps.c
+  ${CODERS_PATH}/psd.c
+  ${CODERS_PATH}/psd.h
+  ${CODERS_PATH}/psd-private.h
+  ${CODERS_PATH}/psd-private.h
+  ${CODERS_PATH}/ps.h
+  ${CODERS_PATH}/pwp.c
+  ${CODERS_PATH}/pwp.h
+  ${CODERS_PATH}/qoi.c
+  ${CODERS_PATH}/qoi.h
+  ${CODERS_PATH}/raw.c
+  ${CODERS_PATH}/raw.h
+  ${CODERS_PATH}/rgb.c
+  ${CODERS_PATH}/rgb.h
+  ${CODERS_PATH}/rgf.c
+  ${CODERS_PATH}/rgf.h
+  ${CODERS_PATH}/rla.c
+  ${CODERS_PATH}/rla.h
+  ${CODERS_PATH}/rle.c
+  ${CODERS_PATH}/rle.h
+  ${CODERS_PATH}/scr.c
+  ${CODERS_PATH}/screenshot.c
+  ${CODERS_PATH}/screenshot.h
+  ${CODERS_PATH}/scr.h
+  ${CODERS_PATH}/sct.c
+  ${CODERS_PATH}/sct.h
+  ${CODERS_PATH}/sfw.c
+  ${CODERS_PATH}/sfw.h
+  ${CODERS_PATH}/sgi.c
+  ${CODERS_PATH}/sgi.h
+  ${CODERS_PATH}/sixel.c
+  ${CODERS_PATH}/sixel.h
+  ${CODERS_PATH}/stegano.c
+  ${CODERS_PATH}/stegano.h
+  ${CODERS_PATH}/strimg.c
+  ${CODERS_PATH}/strimg.h
+  ${CODERS_PATH}/sun.c
+  ${CODERS_PATH}/sun.h
+  ${CODERS_PATH}/svg.c
+  ${CODERS_PATH}/svg.h
+  ${CODERS_PATH}/tga.c
+  ${CODERS_PATH}/tga.h
+  ${CODERS_PATH}/thumbnail.c
+  ${CODERS_PATH}/thumbnail.h
+  ${CODERS_PATH}/tiff.h
+  ${CODERS_PATH}/tile.c
+  ${CODERS_PATH}/tile.h
+  ${CODERS_PATH}/tim2.c
+  ${CODERS_PATH}/tim2.h
+  ${CODERS_PATH}/tim.c
+  ${CODERS_PATH}/tim.h
+  ${CODERS_PATH}/ttf.c
+  ${CODERS_PATH}/ttf.h
+  ${CODERS_PATH}/txt.c
+  ${CODERS_PATH}/txt.h
+  ${CODERS_PATH}/uil.c
+  ${CODERS_PATH}/uil.h
+  ${CODERS_PATH}/url.c
+  ${CODERS_PATH}/url.h
+  ${CODERS_PATH}/uyvy.c
+  ${CODERS_PATH}/uyvy.h
+  ${CODERS_PATH}/vicar.c
+  ${CODERS_PATH}/vicar.h
+  ${CODERS_PATH}/vid.c
+  ${CODERS_PATH}/vid.h
+  ${CODERS_PATH}/video.c
+  ${CODERS_PATH}/video.h
+  ${CODERS_PATH}/viff.c
+  ${CODERS_PATH}/viff.h
+  ${CODERS_PATH}/vips.c
+  ${CODERS_PATH}/vips.h
+  ${CODERS_PATH}/wbmp.c
+  ${CODERS_PATH}/wbmp.h
+  ${CODERS_PATH}/webp.h
+  ${CODERS_PATH}/wmf.h
+  ${CODERS_PATH}/wpg.c
+  ${CODERS_PATH}/wpg.h
+  ${CODERS_PATH}/xbm.c
+  ${CODERS_PATH}/xbm.h
+  ${CODERS_PATH}/xc.c
+  ${CODERS_PATH}/xcf.c
+  ${CODERS_PATH}/xcf.h
+  ${CODERS_PATH}/xc.h
+  ${CODERS_PATH}/x.h
+  ${CODERS_PATH}/xpm.c
+  ${CODERS_PATH}/xpm.h
+  ${CODERS_PATH}/xps.c
+  ${CODERS_PATH}/xps.h
+  ${CODERS_PATH}/xwd.h
+  ${CODERS_PATH}/yaml.c
+  ${CODERS_PATH}/yaml.h
+  ${CODERS_PATH}/ycbcr.c
+  ${CODERS_PATH}/ycbcr.h
+  ${CODERS_PATH}/yuv.c
+  ${CODERS_PATH}/yuv.h
+)
+
+# Let's fill a variable with the code for the available delegates
+set(MAGICKCORE_CODERS_DELEGATES_SRCS "")
+if(DPS_DELEGATE)
+  list(APPEND MAGICKCORE_CODERS_DELEGATES_SRCS ${CODERS_PATH}/dps.c)
+endif()
+if(DJVU_DELEGATE)
+  list(APPEND MAGICKCORE_CODERS_DELEGATES_SRCS ${CODERS_PATH}/djvu.c)
+endif()
+if(OPENEXR_DELEGATE)
+  list(APPEND MAGICKCORE_CODERS_DELEGATES_SRCS ${CODERS_PATH}/exr.c)
+endif()
+if(FLIF_DELEGATE)
+  list(APPEND MAGICKCORE_CODERS_DELEGATES_SRCS ${CODERS_PATH}/flif.c)
+endif()
+if(FPX_DELEGATE)
+  list(APPEND MAGICKCORE_CODERS_DELEGATES_SRCS ${CODERS_PATH}/fpx.c)
+endif()
+if(HEIC_DELEGATE)
+  list(APPEND MAGICKCORE_CODERS_DELEGATES_SRCS ${CODERS_PATH}/heic.c)
+endif()
+if(JBIG_DELEGATE)
+  list(APPEND MAGICKCORE_CODERS_DELEGATES_SRCS ${CODERS_PATH}/jbig.c)
+endif()
+if(JPEG_DELEGATE)
+  list(APPEND MAGICKCORE_CODERS_DELEGATES_SRCS ${CODERS_PATH}/jpeg.c)
+endif()
+if(JXL_DELEGATE)
+  list(APPEND MAGICKCORE_CODERS_DELEGATES_SRCS ${CODERS_PATH}/jxl.c)
+endif()
+if(LIBOPENJP2_DELEGATE)
+  list(APPEND MAGICKCORE_CODERS_DELEGATES_SRCS ${CODERS_PATH}/jp2.c)
+endif()
+if(PNG_DELEGATE)
+  list(APPEND MAGICKCORE_CODERS_DELEGATES_SRCS ${CODERS_PATH}/png.c)
+endif()
+if(TIFF_DELEGATE)
+  list(APPEND MAGICKCORE_CODERS_DELEGATES_SRCS ${CODERS_PATH}/ept.c ${CODERS_PATH}/tiff.c)
+endif()
+if(WEBP_DELEGATE)
+  list(APPEND MAGICKCORE_CODERS_DELEGATES_SRCS ${CODERS_PATH}/webp.c)
+endif()
+if(WINGDI32_DELEGATE)
+  list(APPEND MAGICKCORE_CODERS_DELEGATES_SRCS ${CODERS_PATH}/clipboard.c ${CODERS_PATH}/emf.c)
+  # Seems that emf.c uses namespaces so we need to compile as c++
+  set_source_files_properties(${CODERS_PATH}/emf.c PROPERTIES LANGUAGE CXX)
+endif()
+if(WMF_DELEGATE)
+  list(APPEND MAGICKCORE_CODERS_DELEGATES_SRCS ${CODERS_PATH}/wmf.c)
+endif()
+if(X11_DELEGATE)
+  list(APPEND MAGICKCORE_CODERS_DELEGATES_SRCS ${CODERS_PATH}/x.c ${CODERS_PATH}/xwd.c)
+endif()
+
+if(MAGICK_BUILD_STATIC)
+  add_library(${MAGICKCORE_BINARY_NAME} STATIC ${MAGICKCORE_SRC} ${MAGICKCORE_FILTERS_SRCS} ${MAGICKCORE_CODERS_SRCS} ${MAGICKCORE_CODERS_DELEGATES_SRCS} ${MAGICK_RESOURCE_FILE_PATH})
+else()
+  add_library(${MAGICKCORE_BINARY_NAME} SHARED ${MAGICKCORE_SRC} ${MAGICKCORE_FILTERS_SRCS} ${MAGICKCORE_CODERS_SRCS} ${MAGICKCORE_CODERS_DELEGATES_SRCS} ${MAGICK_RESOURCE_FILE_PATH})
+endif()
+
+set_target_properties(${MAGICKCORE_BINARY_NAME} PROPERTIES PUBLIC_HEADER "${MAGICKCORE_PUBLIC_HEADERS}")
+target_include_directories(${MAGICKCORE_BINARY_NAME} PUBLIC ${IMAGEMAGICK_BASE_PATH})
+target_link_libraries(${MAGICKCORE_BINARY_NAME} PUBLIC ${IMAGEMAGICK_DELEGATES_LIBRARIES})
+#TODO should we make a test to see if we need to link -lm ??
+if(UNIX)
+  target_link_libraries(${MAGICKCORE_BINARY_NAME} PUBLIC -lm)
+endif()
+# Set the MAGICKCORE_SHAREARCH_BASEDIRNAME to "config", not sure if I should add it to the <config.h>
+target_compile_definitions(${MAGICKCORE_BINARY_NAME} PRIVATE ${MAGICK_BUILD_DEFINES} -D_MAGICKLIB_ -DMAGICKCORE_SHAREARCH_BASEDIRNAME=\"config\")
+
+install(TARGETS ${MAGICKCORE_BINARY_NAME}
+  RUNTIME DESTINATION bin
+  LIBRARY DESTINATION bin
+  ARCHIVE DESTINATION lib
+  PUBLIC_HEADER DESTINATION ${IMAGEMAGICK_INC_DIR}/MagickCore
+)
+
+install(FILES
+  ${CMAKE_CURRENT_BINARY_DIR}/magick-baseconfig.h
+  ${CMAKE_CURRENT_BINARY_DIR}/version.h
+  DESTINATION ${IMAGEMAGICK_INC_DIR}/MagickCore
+)
diff --git a/MagickCore/nt-base.h b/MagickCore/nt-base.h
index 7c7678b59..c97ea3de0 100644
--- a/MagickCore/nt-base.h
+++ b/MagickCore/nt-base.h
@@ -62,7 +62,9 @@ extern "C" {
 #    define SSIZE_MAX LLONG_MAX
 #  endif
 #  if defined(_MSC_VER)
-#    define MAGICKCORE_SIZEOF_SSIZE_T 8
+#    if !defined(MAGICKCORE_SIZEOF_SSIZE_T)
+#      define MAGICKCORE_SIZEOF_SSIZE_T 8
+#    endif
 #  endif
 #else
 #  if !defined(SSIZE_MAX)
diff --git a/MagickCore/version.h.cmake b/MagickCore/version.h.cmake
new file mode 100644
index 000000000..5e54a08b4
--- /dev/null
+++ b/MagickCore/version.h.cmake
@@ -0,0 +1,97 @@
+/*
+  Copyright 1999-2019 ImageMagick Studio LLC, a non-profit organization
+  dedicated to making software imaging solutions freely available.
+  
+  You may not use this file except in compliance with the License.
+  obtain a copy of the License at
+  
+    http://imagemagick.org/script/license.php
+  
+  Unless required by applicable law or agreed to in writing, software
+  distributed under the License is distributed on an "AS IS" BASIS,
+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  See the License for the specific language governing permissions and
+  limitations under the License.
+
+  MagickCore version methods.
+*/
+#ifndef _MAGICKCORE_VERSION_H
+#define _MAGICKCORE_VERSION_H
+
+#if defined(__cplusplus) || defined(c_plusplus)
+extern "C" {
+#endif
+
+/*
+  Define declarations.
+*/
+#define MagickPackageName "@PACKAGE_NAME@"
+#define MagickCopyright  "© 1999-2019 ImageMagick Studio LLC"
+#define MagickLibVersion  @PACKAGE_LIB_VERSION@
+#define MagickLibVersionText  "@MAGICK_LIB_VERSION_TEXT@"
+#define MagickLibVersionNumber  @MAGICK_LIB_VERSION_NUMBER@
+#define MagickLibAddendum  "@PACKAGE_VERSION_ADDENDUM@"
+#define MagickLibInterface  @MAGICK_LIBRARY_CURRENT@
+#define MagickLibMinInterface  @MAGICK_LIBRARY_CURRENT_MIN@
+#if defined(_WINDOWS)
+#  if defined(_WIN64)
+#    define MagickPlatform "x64"
+#  else
+#    define MagickPlatform "x86"
+#  endif
+#else
+#define MagickPlatform  "@MAGICK_TARGET_CPU@"
+#endif
+#define MagickppLibVersionText  "@MAGICKPP_LIB_VERSION_TEXT@"
+#define MagickppLibVersionNumber  @MAGICKPP_LIBRARY_VERSION_INFO@
+#define MagickppLibAddendum  "@PACKAGE_VERSION_ADDENDUM@"
+#define MagickppLibInterface  @MAGICKPP_LIBRARY_CURRENT@
+#define MagickppLibMinInterface  @MAGICKPP_LIBRARY_CURRENT_MIN@
+#define MagickReleaseDate  "@PACKAGE_RELEASE_DATE@"
+#define MagickAuthoritativeLicense  \
+  "https://imagemagick.org/script/license.php"
+#define MagickAuthoritativeURL  "https://imagemagick.org"
+#define MagickHomeURL  "file://@DOCUMENTATION_PATH@/index.html"
+#if (MAGICKCORE_QUANTUM_DEPTH == 8)
+#define MagickQuantumDepth  "Q8"
+#define MagickQuantumRange  "255"
+#elif (MAGICKCORE_QUANTUM_DEPTH == 16)
+#define MagickQuantumDepth  "Q16"
+#define MagickQuantumRange  "65535"
+#elif (MAGICKCORE_QUANTUM_DEPTH == 32)
+#define MagickQuantumDepth  "Q32"
+#define MagickQuantumRange  "4294967295"
+#elif (MAGICKCORE_QUANTUM_DEPTH == 64)
+#define MagickQuantumDepth  "Q64"
+#define MagickQuantumRange  "65535"
+#else
+#define MagickQuantumDepth  "Q?"
+#define MagickQuantumRange  "?"
+#endif
+#define MagickVersion  \
+  MagickPackageName " " MagickLibVersionText MagickLibAddendum " " \
+  MagickQuantumDepth " " MagickPlatform " " MagickReleaseDate " " \
+  MagickAuthoritativeURL
+
+extern MagickExport char
+  *GetMagickHomeURL(void);
+
+extern MagickExport const char
+  *GetMagickCopyright(void) magick_attribute((__const__)),
+  *GetMagickDelegates(void) magick_attribute((__const__)),
+  *GetMagickFeatures(void) magick_attribute((__const__)),
+  *GetMagickLicense(void) magick_attribute((__const__)),
+  *GetMagickPackageName(void) magick_attribute((__const__)),
+  *GetMagickQuantumDepth(size_t *),
+  *GetMagickQuantumRange(size_t *),
+  *GetMagickReleaseDate(void) magick_attribute((__const__)),
+  *GetMagickVersion(size_t *);
+
+extern MagickExport void
+  ListMagickVersion(FILE *);
+
+#if defined(__cplusplus) || defined(c_plusplus)
+}
+#endif
+
+#endif
diff --git a/MagickWand/CMakeLists.txt b/MagickWand/CMakeLists.txt
new file mode 100644
index 000000000..3d5c952b3
--- /dev/null
+++ b/MagickWand/CMakeLists.txt
@@ -0,0 +1,120 @@
+#   Licensed under the ImageMagick License (the "License"); you may not use
+#   this file except in compliance with the License.  You may obtain a copy
+#   of the License at
+#
+#     https://imagemagick.org/script/license.php
+#
+#   Unless required by applicable law or agreed to in writing, software
+#   distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+#   WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
+#   License for the specific language governing permissions and limitations
+#   under the License.
+#
+#   CMake script file to build ImageMagick
+# 
+
+project(MagickWand C)
+
+set(MAGICKWAND_SRC
+  MagickWand.h
+  animate.c
+  animate.h
+  compare.c
+  compare.h
+  composite.c
+  composite.h
+  conjure.c
+  conjure.h
+  convert.c
+  convert.h
+  deprecate.h
+  deprecate.c
+  display.c
+  display.h
+  drawing-wand.c
+  drawing-wand.h
+  identify.c
+  identify.h
+  import.c
+  import.h
+  magick-cli.c
+  magick-cli.h
+  magick-image.c
+  magick-image.h
+  magick-property.c
+  magick-property.h
+  magick-wand.c
+  magick-wand-private.h
+  method-attribute.h
+  mogrify.c
+  mogrify.h
+  mogrify-private.h
+  montage.c
+  montage.h
+  operation.c
+  operation.h
+  operation-private.h
+  pixel-iterator.c
+  pixel-iterator.h
+  pixel-wand.c
+  pixel-wand.h
+  pixel-wand-private.h
+  script-token.c
+  script-token.h
+  stream.c
+  stream.h
+  studio.h
+  wand.c
+  wand.h
+  wandcli.c
+  wandcli.h
+  wandcli-private.h
+  wand-view.c
+  wand-view.h
+)
+
+set(MAGICKWAND_PUBLIC_HEADERS
+  MagickWand.h
+  animate.h
+  compare.h
+  composite.h
+  conjure.h
+  convert.h
+  deprecate.h
+  display.h
+  drawing-wand.h
+  identify.h
+  import.h
+  magick-cli.h
+  magick-image.h
+  magick-property.h
+  method-attribute.h
+  mogrify.h
+  montage.h
+  operation.h
+  pixel-iterator.h
+  pixel-wand.h
+  stream.h
+  wandcli.h
+  wand-view.h
+)
+
+if(MAGICK_BUILD_STATIC)
+  add_library(${MAGICKWAND_BINARY_NAME} STATIC ${MAGICKWAND_SRC} ${MAGICK_RESOURCE_FILE_PATH})
+else()
+  add_library(${MAGICKWAND_BINARY_NAME} SHARED ${MAGICKWAND_SRC} ${MAGICK_RESOURCE_FILE_PATH})
+endif()
+
+set_target_properties(${MAGICKWAND_BINARY_NAME} PROPERTIES PUBLIC_HEADER "${MAGICKWAND_PUBLIC_HEADERS}")
+target_include_directories(${MAGICKWAND_BINARY_NAME} PUBLIC ${IMAGEMAGICK_BASE_PATH})
+target_include_directories(${MAGICKWAND_BINARY_NAME} PRIVATE  ${IMAGEMAGICK_DELEGATES_INCLUDE_DIRS})
+# Set the MAGICKCORE_SHAREARCH_BASEDIRNAME to "config", not sure if I should add it to the <config.h>
+target_compile_definitions(${MAGICKWAND_BINARY_NAME} PRIVATE ${MAGICK_BUILD_DEFINES} -D_MAGICKLIB_ -DMAGICKCORE_SHAREARCH_BASEDIRNAME=\"config\")
+target_link_libraries(${MAGICKWAND_BINARY_NAME} PUBLIC ${MAGICKCORE_BINARY_NAME})
+
+install(TARGETS ${MAGICKWAND_BINARY_NAME}
+  RUNTIME DESTINATION bin
+  LIBRARY DESTINATION bin
+  ARCHIVE DESTINATION lib
+  PUBLIC_HEADER DESTINATION ${IMAGEMAGICK_INC_DIR}/MagickWand
+)
diff --git a/MagickWand/MagickWand.h b/MagickWand/MagickWand.h
index 5018e65ce..709bd0ee4 100644
--- a/MagickWand/MagickWand.h
+++ b/MagickWand/MagickWand.h
@@ -22,7 +22,6 @@
 #if defined(__cplusplus) || defined(c_plusplus)
 extern "C" {
 #endif
-
 #if !defined(MAGICKWAND_CONFIG_H)
 # define MAGICKWAND_CONFIG_H
 # if !defined(vms)
diff --git a/cmake/checks.cmake b/cmake/checks.cmake
new file mode 100644
index 000000000..446b25e8b
--- /dev/null
+++ b/cmake/checks.cmake
@@ -0,0 +1,1041 @@
+include(CheckIncludeFile)
+include(CheckIncludeFiles)
+include(CheckSymbolExists)
+include(CheckPrototypeDefinition)
+include(CheckFunctionExists)
+include(CheckCXXSourceCompiles)
+include(CheckTypeSize)
+include(CheckLibraryExists)
+include(CheckCXXSourceRuns)
+include(CheckStructHasMember)
+include(CheckCSourceCompiles)
+include(CheckSourceRuns)
+include(TestBigEndian)
+
+macro(magick_check_env)
+  # Check if `closedir' function returns void instead of `int'
+  check_include_file(dirent.h HAVE_DIRENT_H)
+  if(HAVE_DIRENT_H)
+      unset(HAVE_DIRENT_H)
+      check_symbol_exists(DIR dirent.h HAVE_DIRENT_H)
+      if(NOT HAVE_DIRENT_H)
+          message(STATUS "--- DIR not defined...")
+      else(NOT HAVE_DIRENT_H)
+          check_prototype_definition(closedir "void closedir(DIR *dirp)" "NULL" "dirent.h" CLOSEDIR_VOID)
+      endif(NOT HAVE_DIRENT_H)
+  endif(HAVE_DIRENT_H)
+
+  # Check if `acosh' exists
+  check_function_exists(acosh HAVE_ACOSH)
+
+  # Check if <arm/limits.h> exists
+  check_include_file(arm/limits.h HAVE_ARM_LIMITS_H)
+
+  # Check if <arpa/inet.h> exists
+  check_include_file(arpa/inet.h HAVE_ARM_LIMITS_H)
+
+  # Check if `asinh' exists
+  check_function_exists(asinh HAVE_ASINH)
+
+  # Check if `atanh' exists
+  check_function_exists(atanh HAVE_ATANH)
+
+  # Check if `atexit' exists
+  check_function_exists(atexit HAVE_ATEXIT)
+
+  # Check if `atoll' exists
+  check_function_exists(atoll HAVE_ATOLL)
+
+  # Check if `bool' exists (check_type_size is not working at least on windows)
+  check_cxx_source_compiles ("void main () {bool b = false;}" HAVE_BOOL)
+
+  # Check if `carg' exists
+  check_function_exists(carg HAVE_CARG)
+
+  # Check if `cabs' exists
+  check_function_exists(cabs HAVE_CABS)
+
+  # Check if `cimag' exists
+  check_function_exists(cimag HAVE_CIMAG)
+
+  # Check if `clock' exists
+  check_function_exists(clock HAVE_CLOCK)
+
+  # Check if `clock_getres' exists
+  check_function_exists(clock_getres HAVE_CLOCK_GETRES)
+
+  # Check if `clock_gettime' exists
+  check_function_exists(clock_gettime HAVE_CLOCK_GETTIME)
+
+  # Check if `CLOCK_REALTIME' exists
+  check_symbol_exists(CLOCK_REALTIME time.h HAVE_CLOCK_REALTIME)
+
+  # Check if <complex.h> exists
+  check_include_file(complex.h HAVE_COMPLEX_H)
+
+  # Check if `creal' exists
+  check_function_exists(creal HAVE_CREAL)
+
+  # Check if `ctime_r' exists
+  check_function_exists(ctime_r HAVE_CTIME_R)
+
+  # Check if `pread' exists
+  check_function_exists(pread HAVE_DECL_PREAD)
+
+  # Check if `pwrite' exists
+  check_function_exists(pwrite HAVE_DECL_PWRITE)
+
+  # Check if `strerror_r' exists
+  check_symbol_exists(strerror_r string.h HAVE_DECL_STRERROR_R)
+
+  # Check if `strlcpy' exists
+  check_function_exists(strlcpy HAVE_DECL_STRLCPY)
+
+  # Check if `tzname' exists
+  check_symbol_exists(tzname time.h HAVE_DECL_TZNAME)
+
+  # Check if `directio' exists
+  check_function_exists(directio HAVE_DIRECTIO)
+
+  # Check if <dlfcn.h> exists
+  check_include_file(dlfcn.h HAVE_DLFCN_H)
+
+  # Check if `double_t' exists
+  check_cxx_source_compiles (
+  "
+    #include <math.h>
+    void main () {double_t d = 0;}
+  " 
+  HAVE_DOUBLE_T)
+
+  # Check if `erf' exists
+  # Only check if not windows since <nt-base.h> explicit defines the macro and it will cause a lot of warnings
+  if(NOT WINDOWS)
+    check_function_exists(erf HAVE_ERF)
+  endif()
+
+  # Check if <errno.h> exists
+  check_include_file(errno.h HAVE_ERRNO_H)
+
+  # Check if `execvp' exists
+  check_function_exists(execvp HAVE_EXECVP)
+
+  # Check if `fchmod' exists
+  check_function_exists(fchmod HAVE_FCHMOD)
+
+  # Check if <fcntl.h> exists
+  check_include_file(fcntl.h HAVE_FCNTL_H)
+
+  # Check if `float_t' exists
+  check_cxx_source_compiles (
+  "
+    #include <math.h> 
+    void main () {float_t f = 0;}
+  " 
+  HAVE_FLOAT_T)
+
+  # Check if `floor' exists
+  check_function_exists(floor HAVE_FLOOR)
+
+  # Check if `fork' exists
+  check_function_exists(fork HAVE_FORK)
+
+  # Check if `fseeko' exists
+  check_function_exists(fseeko HAVE_FSEEKO)
+
+  # Check if `ftime' exists
+  check_function_exists(ftime HAVE_FTIME)
+
+  # Check if `ftruncate' exists
+  check_function_exists(ftruncate HAVE_FTRUNCATE)
+
+  # Check if `getcwd' exists
+  check_function_exists(getcwd HAVE_GETCWD)
+
+  # Check if `getc_unlocked' exists
+  check_function_exists(getc_unlocked HAVE_GETC_UNLOCKED)
+
+  # Check if `getdtablesize' exists
+  check_function_exists(getdtablesize HAVE_GETDTABLESIZE)
+
+  # Check if `getexecname' exists
+  check_function_exists(getexecname HAVE_GETEXECNAME)
+
+  # Check if `getpagesize' exists
+  check_function_exists(getpagesize HAVE_GETPAGESIZE)
+
+  # Check if `getpid' exists
+  check_function_exists(getpid HAVE_GETPID)
+
+  # Check if `getrlimit' exists
+  check_function_exists(getrlimit HAVE_GETRLIMIT)
+
+  # Check if `getrusage' exists
+  check_function_exists(getrusage HAVE_GETRUSAGE)
+
+  # Check if `gettimeofday' exists
+  check_function_exists(gettimeofday HAVE_GETTIMEOFDAY)
+
+  # Check if `gmtime_r' exists
+  check_function_exists(gettimeofday HAVE_GMTIME_R)
+
+  # I don't think our program will have a big memory impact
+  set(HAVE_HUGEPAGES FALSE)
+
+  # Check if `intmax_t' exists
+  check_type_size (intmax_t INTMAX_T)
+  if(HAVE_INTMAX_T) # it was TRUE and we need it to be 1
+    set(HAVE_INTMAX_T 1)
+  endif()
+
+  # Check if `intptr_t' exists
+  check_type_size (intptr_t INTPTR_T)
+  if(HAVE_INTPTR_T ) # it was TRUE and we need it to be 1
+    set(HAVE_INTPTR_T 1)
+  endif()
+
+  # Check if <inttypes.h> exists
+  check_include_file(inttypes.h HAVE_INTTYPES_H)
+
+  # Check if `isnan' exists
+  check_function_exists(isnan HAVE_ISNAN)
+
+  # Check if `j0' exists
+  check_function_exists(j0 HAVE_J0)
+
+  # Check if `j1' exists
+  check_function_exists(j1 HAVE_J1)
+
+  # Check if `gcov' exists
+  check_library_exists(gcov "" "" HAVE_LIBGCOV)
+
+  # Check if <limits.h> exists
+  check_include_file(limits.h HAVE_LIMITS_H)
+
+  # Check if <linux/unistd.h> exists
+  check_include_file(linux/unistd.h HAVE_LINUX_UNISTD_H)
+
+  # Check if `lltostr' exists
+  check_function_exists(lltostr HAVE_LLTOSTR)
+
+  # Check if <locale.h> exists
+  check_include_file(locale.h HAVE_LOCALE_H)
+
+  # Check if `locale_t' exists
+  check_type_size(locale_t LOCALE_T)
+  if(HAVE_LOCALE_T ) # it was TRUE and we need it to be 1
+    set(HAVE_LOCALE_T 1)
+  endif()
+
+  # Check if `localtime_r' exists
+  check_function_exists(localtime_r HAVE_LOCALTIME_R)
+
+  # Check if `long double' exists
+  check_type_size("long double" LONG_DOUBLE)
+  if(HAVE_LONG_DOUBLE) # it was TRUE and we need it to be 1
+    set(HAVE_LONG_DOUBLE 1)
+  endif()
+
+  # Check if `long double' have more precision than `double'
+  if(HAVE_LONG_DOUBLE)
+    check_type_size(double DOUBLE)
+    if(${LONG_DOUBLE} GREATER ${DOUBLE})
+      set(HAVE_LONG_DOUBLE_WIDER 1)
+    endif()
+  endif()
+
+  # Check if `long long int' exists
+  check_type_size("long long int" LONG_LONG_INT)
+  if(HAVE_LONG_LONG_INT) # it was TRUE and we need it to be 1
+    set(HAVE_LONG_LONG_INT 1)
+  endif()
+
+  # Check if <machine/param.h> exists
+  check_include_file(machine/param.h HAVE_MACHINE_PARAM_H)
+
+  # Check if <mach-o/dyld.h.h> exists
+  check_include_file(mach-o/dyld.h HAVE_MACH_O_DYLD_H)
+
+  # Check if `mbstate_t' exists in <wchar.h>
+  check_symbol_exists(mbstate_t wchar.h HAVE_MBSTATE_T)
+
+  # Check if `memmove' exists
+  check_function_exists(memmove HAVE_MEMMOVE)
+
+  # Check if <memory.h> exists
+  check_include_file(memory.h HAVE_MEMORY_H)
+
+  # Check if `memset' exists
+  check_function_exists(memset HAVE_MEMSET)
+
+  # Check if `mkstemp' exists
+  check_function_exists(mkstemp HAVE_MKSTEMP)
+
+  # Check if `mmap' exists
+  check_function_exists(mmap HAVE_MMAP)
+
+  # Check if `munmap' exists
+  check_function_exists(munmap HAVE_MUNMAP)
+
+  # Check if `namespace' exists
+  check_cxx_source_compiles ("namespace test {} void main() {using namespace ::test;}" HAVE_NAMESPACES)
+
+  # Check if `std::' exists
+  check_cxx_source_compiles (
+  "
+    #include <iostream> 
+    void main() {std::istream& is = std::cin;}
+  "
+  HAVE_NAMESPACE_STD)
+
+  # Check if `nanosleep' exists
+  check_function_exists(nanosleep HAVE_NANOSLEEP)
+
+  # Check if <ndir.h> exists
+  check_include_file(ndir.h HAVE_NDIR_H)
+
+  # Check if <netinet/in.h> exists
+  check_include_file(netinet/in.h HAVE_NETINET_IN_H)
+
+  # Check if `newlocale' exists
+  check_function_exists(newlocale HAVE_NEWLOCALE)
+
+  # Check if <OS.h> exists
+  check_include_file(OS.h HAVE_OS_H)
+
+  # Check if `pclose' exists
+  check_function_exists(pclose HAVE_PCLOSE)
+
+  # Check if `poll' exists
+  check_function_exists(poll HAVE_POLL)
+
+  # Check if `popen' exists
+  check_function_exists(popen HAVE_POPEN)
+
+  # Check if `posix_fadvise' exists
+  check_function_exists(posix_fadvise HAVE_POSIX_FADVISE)
+
+  # Check if `posix_fallocate' exists
+  check_function_exists(posix_fallocate HAVE_POSIX_FALLOCATE)
+
+  # Check if `posix_madvise' exists
+  check_function_exists(posix_madvise HAVE_POSIX_MADVISE)
+
+  # Check if `posix_memalign' exists
+  check_function_exists(posix_memalign HAVE_POSIX_MEMALIGN)
+
+  # Check if `posix_spawnp' exists
+  check_function_exists(posix_spawnp HAVE_POSIX_SPAWNP)
+
+  # Check if `pow' exists
+  check_function_exists(pow HAVE_POW)
+
+  # Check if `pread' exists
+  check_function_exists(pread HAVE_PREAD)
+
+  # Check if <process.h> exists
+  check_include_file(process.h HAVE_PROCESS_H)
+
+  # Check if `pwrite' exists
+  check_function_exists(pwrite HAVE_PWRITE)
+
+  # Check if `qsort_r' exists
+  check_function_exists(qsort_r HAVE_QSORT_R)
+
+  # Check if `raise' exists
+  check_function_exists(raise HAVE_RAISE)
+
+  # Check if `rand_r' exists
+  check_function_exists(rand_r HAVE_RAND_R)
+
+  # Check if `readlink' exists
+  check_function_exists(readlink HAVE_READLINK)
+
+  # Check if `realpath' exists
+  check_function_exists(realpath HAVE_REALPATH)
+
+  # Check if `seekdir' exists
+  check_function_exists(seekdir HAVE_SEEKDIR)
+
+  # Check if `select' exists
+  check_function_exists(select HAVE_SELECT)
+
+  # Check if `sendfile' exists
+  check_function_exists(sendfile HAVE_SENDFILE)
+
+  # Check if `setlocale' exists
+  check_function_exists(setlocale HAVE_SETLOCALE)
+
+  # Check if `setvbuf' exists
+  check_function_exists(setvbuf HAVE_SETVBUF)
+
+  # Check supported X11 extensions  
+  find_package(X11)
+  if(X11_Xshape_FOUND)
+    set(HAVE_SHAPE 1)
+  endif()
+  if(X11_XShm_FOUND)
+    set(HAVE_SHARED_MEMORY 1)
+  endif()
+
+  # Check if `sigaction' exists
+  check_function_exists(sigaction HAVE_SIGACTION)
+
+  # Check if `sigemptyset' exists
+  check_function_exists(sigemptyset HAVE_SIGEMPTYSET)
+
+  # Check if `socket' exists
+  check_function_exists(socket HAVE_SOCKET)
+
+  # Check if `spawnvp' exists
+  check_function_exists(spawnvp HAVE_SPAWNVP)
+
+  # Check if `sqrt' exists
+  check_function_exists(sqrt HAVE_SQRT)
+
+  # Check if `stat' exists
+  check_function_exists(stat HAVE_STAT)
+
+  # Check if `stdarg' exists
+  check_function_exists(stdarg HAVE_STDARG_H)
+
+  # Check if <stdbool.h> exists and conforms to C99
+  check_cxx_source_compiles (
+  "
+    #include <stdbool.h> 
+    void main() {bool b = __bool_true_false_are_defined;}
+  "
+  HAVE_STDBOOL_H)
+
+  # Check if <stdint.h> exists
+  check_include_file(stdint.h HAVE_STDINT_H)
+
+  # Check if <stdlib.h> exists
+  check_include_file(stdlib.h HAVE_STDLIB_H)
+
+  # Check if compiler supports ISO C++ standard library
+  set(CMAKE_REQUIRED_DEFINITIONS_SAVE ${CMAKE_REQUIRED_DEFINITIONS})
+  if(HAVE_NAMESPACES)
+    set(CMAKE_REQUIRED_DEFINITIONS ${CMAKE_REQUIRED_DEFINITIONS} -DHAVE_NAMESPACES)
+  endif()
+  check_cxx_source_compiles (
+  "
+    #include <map>
+    #include <iomanip>
+    #include <cmath>
+    #ifdef HAVE_NAMESPACES
+      using namespace std;
+    #endif
+    
+    void main() {}
+  "
+  HAVE_STD_LIBS)
+  set(CMAKE_REQUIRED_DEFINITIONS ${CMAKE_REQUIRED_DEFINITIONS_SAVE})
+
+  # Check if `strcasecmp' exists
+  check_function_exists(strcasecmp HAVE_STRCASECMP)
+
+  # Check if `strchr' exists
+  check_function_exists(strchr HAVE_STRCHR)
+
+  # Check if `strcspn' exists
+  check_function_exists(strcspn HAVE_STRCSPN)
+
+  # Check if `strdup' exists
+  check_function_exists(strdup HAVE_STRDUP)
+
+  # Check if `strerror' exists
+  check_function_exists(strerror HAVE_STRERROR)
+
+  # Check if `strerror_r' exists
+  check_function_exists(strerror_r HAVE_STRERROR_R)
+
+  # Check if `#' stringizing operator is supported
+  set(HAVE_STRINGIZE_EXITCODE 1)
+  set(HAVE_STRINGIZE_EXITCODE__TRYRUN_OUTPUT 1)
+  check_cxx_source_runs(
+  "
+    #define x(y) #y
+    int main() { char c[] = \"c\"; char* p = x(c); return (c[0] != p[0]) || (c[1] != p[1]); }
+  "
+  HAVE_STRINGIZE)
+
+  # Check if <strings.h> exists
+  check_include_file(strings.h HAVE_STRINGS_H)
+
+  # Check if <string.h> exists
+  check_include_file(string.h HAVE_STRING_H)
+
+  # Check if <strlcat.h> exists
+  check_include_file(strlcat.h HAVE_STRLCAT)
+
+  # Check if <strlcpy.h> exists
+  check_include_file(strlcpy.h HAVE_STRLCPY)
+
+  # Check if `strncasecmp' exists
+  check_function_exists(strncasecmp HAVE_STRNCASECMP)
+
+  # Check if `strpbrk' exists
+  check_function_exists(strpbrk HAVE_STRPBRK)
+
+  # Check if `strrchr' exists
+  check_function_exists(strrchr HAVE_STRRCHR)
+
+  # Check if `strspn' exists
+  check_function_exists(strspn HAVE_STRSPN)
+
+  # Check if `strstr' exists
+  check_function_exists(strstr HAVE_STRSTR)
+
+  # Check if `strtod' exists
+  check_function_exists(strtod HAVE_STRSTR)
+
+  # Check if `strtod_l' exists
+  check_function_exists(strtod_l HAVE_STRTOD_L)
+
+  # Check if `strtol' exists
+  check_function_exists(strtol HAVE_STRTOL)
+
+  # Check if `strtoul' exists
+  check_function_exists(strtoul HAVE_STRTOUL)
+
+  # Check if `tm_zone' is a member of `struct tm'
+  check_struct_has_member("struct tm" tm_zone time.h HAVE_STRUCT_TM_TM_ZONE)
+
+  # Check if <sun_prefetch.h> exists
+  check_include_file(sun_prefetch.h HAVE_SUN_PREFETCH_H)
+
+  # Check if `symlink' exists
+  check_function_exists(symlink HAVE_SYMLINK)
+
+  # Check if `sysconf' exists
+  check_function_exists(sysconf HAVE_SYSCONF)
+
+  # Check if <sys/dir.h> exists and defines `DIR'
+  check_symbol_exists(DIR sys/dir.h HAVE_SYS_DIR_H)
+
+  # Check if <sys/ipc.h> exists
+  check_include_file(sys/ipc.h HAVE_SYS_IPC_H)
+
+  # Check if <sys/mman.h> exists
+  check_include_file(sys/mman.h HAVE_SYS_MMAN_H)
+
+  # Check if <sys/ndir.h> exists and defines `DIR'
+  check_symbol_exists(DIR sys/ndir.h HAVE_SYS_NDIR_H)
+
+  # Check if <sys/param.h> exists
+  check_include_file(sys/param.h HAVE_SYS_PARAM_H)
+
+  # Check if <sys/resource.h> exists
+  check_include_file(sys/resource.h HAVE_SYS_RESOURCE_H)
+
+  # Check if <sys/select.h> exists
+  check_include_file(sys/select.h HAVE_SYS_SELECT_H)
+
+  # Check if <sys/sendfile.h> exists
+  check_include_file(sys/sendfile.h HAVE_SYS_SENDFILE_H)
+
+  # Check if <sys/socket.h> exists
+  check_include_file(sys/socket.h HAVE_SYS_SOCKET_H)
+
+  # Check if <sys/stat.h> exists
+  check_include_file(sys/stat.h HAVE_SYS_STAT_H)
+
+  # Check if <sys/syslimits.h> exists
+  check_include_file(sys/syslimits.h HAVE_SYS_SYSLIMITS_H)
+
+  # Check if <sys/timeb.h> exists
+  check_include_file(sys/timeb.h HAVE_SYS_TIMEB_H)
+
+  # Check if <sys/times.h> exists
+  check_include_file(sys/times.h HAVE_SYS_TIMES_H)
+
+  # Check if <sys/time.h> exists
+  check_include_file(sys/time.h HAVE_SYS_TIME_H)
+
+  # Check if <sys/types.h> exists
+  check_include_file(sys/types.h HAVE_SYS_TYPES_H)
+
+  # Check if <sys/wait.h> exists
+  check_include_file(sys/wait.h HAVE_SYS_WAIT_H)
+
+  # Check if `telldir' exists
+  check_function_exists(telldir HAVE_TELLDIR)
+
+  # Check if `tempnam' exists
+  check_function_exists(tempnam HAVE_TEMPNAM)
+
+  # Check if `times' exists
+  check_function_exists(times HAVE_TIMES)
+
+  # Check if `tm_zone' is a member of `struct tm' (deprecated, use `HAVE_STRUCT_TM_TM_ZONE' instead)
+  check_struct_has_member("struct tm" tm_zone time.h HAVE_TM_ZONE)
+
+  # Check if `tzname' is a member of `struct tm' only if `tm_zone' isn't defined
+  if(NOT HAVE_STRUCT_TM_TM_ZONE)
+    check_struct_has_member("struct tm" tzname time.h HAVE_TZNAME)
+  endif()
+
+  # Check if `uintmax_t' exists
+  check_type_size(uintmax_t UINTMAX_T)
+  if(HAVE_UINTMAX_T) # it was TRUE and we need it to be 1
+    set(HAVE_UINTMAX_T 1)
+  endif()
+
+  # Check if `uintptr_t' exists
+  check_type_size(uintptr_t UINTPTR_T)
+  if(HAVE_UINTPTR_T) # it was TRUE and we need it to be 1
+    set(HAVE_UINTPTR_T 1)
+  endif()
+
+  # Check if `ulltostr' exists
+  check_function_exists(ulltostr HAVE_ULLTOSTR)
+
+  # Check if <unistd.h> exists
+  check_include_file(unistd.h HAVE_UNISTD_H)
+
+  # Check if `unsigned long long int' exists
+  check_type_size("unsigned long long int" UNSIGNED_LONG_LONG_INT)
+  if(HAVE_UNSIGNED_LONG_LONG_INT) # it was TRUE and we need it to be 1
+    set(HAVE_UNSIGNED_LONG_LONG_INT 1)
+  endif()
+
+  # Check if `uselocale' exists
+  check_function_exists(uselocale HAVE_USELOCALE)
+
+  # Check if `usleep' exists
+  check_function_exists(usleep HAVE_USLEEP)
+
+  # Check if `utime' exists
+  check_function_exists(utime HAVE_UTIME)
+
+  # Check if <utime.h> exists
+  check_include_file(utime.h HAVE_UTIME_H)
+
+  # Check if `vfork' exists
+  check_function_exists(vfork HAVE_VFORK)
+
+  # Check if <vfork.h> exists
+  check_include_file(vfork.h HAVE_VFORK_H)
+
+  # Check if `vfprintf' exists
+  check_symbol_exists(vfprintf stdio.h HAVE_VFPRINTF)
+
+  # Check if `vfprintf_l' exists
+  check_symbol_exists(vfprintf_l stdio.h HAVE_VFPRINTF_L)
+
+  # Check if `vprintf' exists
+  check_symbol_exists(vprintf stdio.h HAVE_VPRINTF)
+  # Check if `_doprnt' exists only if `vprintf' do not exists
+  if(NOT HAVE_VPRINTF)
+    check_function_exists(_doprnt HAVE_DOPRNT)
+  endif()
+
+  # Check if `vsnprintf' exists
+  check_symbol_exists(vsnprintf stdio.h HAVE_VSNPRINTF)
+  check_function_exists(vsnprintf HAVE_DECL_VSNPRINTF)
+
+  # Check if `vsnprintf_l' exists
+  check_symbol_exists(vsnprintf_l stdio.h HAVE_VSNPRINTF_L)
+
+  # Check if `vsprintf' exists
+  check_symbol_exists(vsprintf stdio.h HAVE_VSPRINTF)
+
+  # Check if `waitpid' exists
+  check_function_exists(waitpid HAVE_WAITPID)
+
+  # Check if <wchar.h> exists
+  check_include_file(wchar.h HAVE_WCHAR_H)
+
+  # Check if <windows.h> exists
+  check_include_file(windows.h HAVE_WINDOWS_H)
+
+  # Check if `fork' works
+  if(HAVE_FORK)
+    set(HAVE_WORKING_FORK_EXITCODE 1)
+    set(HAVE_WORKING_FORK_EXITCODE__TRYRUN_OUTPUT 1)
+    check_cxx_source_runs(
+    "
+      #ifdef HAVE_SYS_TYPES_H
+      #include <sys/types.h>
+    #endif
+    #ifdef HAVE_UNISTD_H
+      #include <unistd.h>
+    #endif
+      int main() { if (fork() < 0) return(1); return(0); }
+    "
+    HAVE_WORKING_FORK)
+  endif()
+
+  # Check if `vfork' works
+  if(HAVE_VFORK)
+    set(HAVE_WORKING_VFORK_EXITCODE 1)
+    set(HAVE_WORKING_VFORK_EXITCODE__TRYRUN_OUTPUT 1)
+    check_cxx_source_runs(
+    "
+      #ifdef HAVE_SYS_TYPES_H
+      #include <sys/types.h>
+    #endif
+    #ifdef HAVE_UNISTD_H
+      #include <unistd.h>
+    #endif
+    #ifdef HAVE_VFORK_H
+      #include <vfork.h>
+    #endif
+      int main() { if (vfork() < 0) return(1); return(0); }
+    "
+    HAVE_WORKING_VFORK)
+  endif()
+
+  # Check if <xlocale.h> exists
+  check_include_file(xlocale.h HAVE_XLOCALE_H)
+
+  # Check if `_aligned_malloc' exists
+  check_function_exists(_aligned_malloc HAVE__ALIGNED_MALLOC)
+
+  # Check if `_Bool' exists
+  check_type_size(_Bool _BOOL)
+  if(HAVE__BOOL) # it was TRUE and we need it to be 1
+    set(HAVE__BOOL 1)
+  endif()
+
+  # Check if `_exit' exists
+  check_function_exists(_exit HAVE__EXIT)
+
+  # Check if `_NSGetExecutablePath' exists
+  check_function_exists(_NSGetExecutablePath HAVE__NSGETEXECUTABLEPATH)
+
+  # Check if `_pclose' exists
+  check_function_exists(_pclose HAVE__PCLOSE)
+
+  # Check if `_popen' exists
+  check_function_exists(_popen HAVE__POPEN)
+
+  # Check if `_wfopen' exists
+  check_function_exists(_wfopen HAVE__WFOPEN)
+
+  # Check if `_wstat' exists
+  check_function_exists(_wstat HAVE__WSTAT)
+
+  # Check if `__attribute__' exists
+  check_c_source_compiles(
+  "
+    #include <stdlib.h>
+    static void foo(void) __attribute__ ((unused));
+    void main() { }
+  "
+  HAVE___ATTRIBUTE__)
+
+  # Check return type of signal handlers
+  check_c_source_compiles(
+  "
+    #include <signal.h>
+    #ifdef signal
+      #undef signal
+    #endif
+    #ifdef __cplusplus
+    extern \"C\" void (*signal (int, void (*)(int)))(int);
+    #else
+    void (*signal ()) ();
+    #endif
+    void main() {}
+  "
+  SIGNAL_RETURN_TYPE_IS_VOID)
+  if(SIGNAL_RETURN_TYPE_IS_VOID)
+    set(RETSIGTYPE void)
+  else(SIGNAL_RETURN_TYPE_IS_VOID)
+    set(RETSIGTYPE int)
+  endif(SIGNAL_RETURN_TYPE_IS_VOID)
+
+  #TODO These seems to be obsolet but should we check them ????
+  set(SELECT_TYPE_ARG1 "")
+  set(SELECT_TYPE_ARG234 "")
+  set(SELECT_TYPE_ARG5 "")
+
+  # Check `double' size
+  check_type_size(double SIZEOF_DOUBLE)
+
+  # Check `double_t' size
+  if(HAVE_DOUBLE_T)
+    set(CMAKE_EXTRA_INCLUDE_FILES_SAVE ${CMAKE_EXTRA_INCLUDE_FILES})
+    set(CMAKE_EXTRA_INCLUDE_FILES ${CMAKE_EXTRA_INCLUDE_FILES} "math.h")
+    check_type_size(double_t SIZEOF_DOUBLE_T)
+    set(CMAKE_EXTRA_INCLUDE_FILES ${CMAKE_EXTRA_INCLUDE_FILES_SAVE})
+  endif()
+
+  # Check `float' size
+  check_type_size(float SIZEOF_FLOAT)
+
+  # Check `float_t' size
+  if(HAVE_FLOAT_T)
+    set(CMAKE_EXTRA_INCLUDE_FILES_SAVE ${CMAKE_EXTRA_INCLUDE_FILES})
+    set(CMAKE_EXTRA_INCLUDE_FILES ${CMAKE_EXTRA_INCLUDE_FILES} "math.h")
+    check_type_size(float_t SIZEOF_FLOAT_T)
+    set(CMAKE_EXTRA_INCLUDE_FILES ${CMAKE_EXTRA_INCLUDE_FILES_SAVE})
+  endif()
+
+  # Check `long double' size
+  if(HAVE_LONG_DOUBLE)
+    check_type_size("long double" SIZEOF_LONG_DOUBLE)
+  endif()
+
+  # Check `off_t' size
+  check_type_size(off_t SIZEOF_OFF_T)
+
+  # Check `signed int' size
+  check_type_size("signed int" SIZEOF_SIGNED_INT)
+
+  # Check `signed long' size
+  check_type_size("signed long" SIZEOF_SIGNED_LONG)
+
+  # Check `signed long long' size
+  check_type_size("signed long long" SIZEOF_SIGNED_LONG_LONG)
+
+  # Check `signed short' size
+  check_type_size("signed short" SIZEOF_SIGNED_SHORT)
+
+  # Check `size_t' size
+  check_type_size("size_t" SIZEOF_SIZE_T)
+
+  # Check `ssize_t' size
+  check_type_size("ssize_t" SIZEOF_SSIZE_T)
+
+  # Check `unsigned int' size
+  check_type_size("unsigned int" SIZEOF_UNSIGNED_INT)
+
+  # Check `unsigned int*' size
+  check_type_size("unsigned int*" SIZEOF_UNSIGNED_INTP)
+
+  # Check `unsigned long' size
+  check_type_size("unsigned long" SIZEOF_UNSIGNED_LONG)
+
+  # Check `unsigned long long' size
+  check_type_size("unsigned long long" SIZEOF_UNSIGNED_LONG_LONG)
+
+  # Check `unsigned long long' size
+  check_type_size("void*" SIZEOF_VOID_P)
+
+  # Check `unsigned short' size
+  check_type_size("unsigned short" SIZEOF_UNSIGNED_SHORT)
+
+  # TODO Not sure how to heck if the `S_IS*' macros in <sys/stat.h> are broken
+  # Should we test them all ???? 
+  set(STAT_MACROS_BROKEN 0)
+
+  # Check ANSI C header files exists
+  check_include_fileS("stdlib.h;stdarg.h;string.h;float.h" STDC_HEADERS)
+
+  # Check strerror_r returns `char *'
+  check_cxx_source_compiles(
+  "
+    void main() 
+    {
+      char buf[100];
+      char x = *strerror_r(0, buf, sizeof buf);
+      char *p = strerror_r(0, buf, sizeof buf);
+    }
+  "
+  STRERROR_R_CHAR_P)
+
+  # Check if we can safely include both <sys/time.h> and <time.h>
+  check_cxx_source_compiles(
+  "
+    #include <sys/time.h>
+    #include <time.h>
+    void main(void){}
+  "
+  TIME_WITH_SYS_TIME)
+
+  # Check if `struct tm' exists in <sys/time.h>
+  if(HAVE_SYS_TIME_H)
+    check_symbol_exists("struct tm" sys/time.h TM_IN_SYS_TIME)
+  endif()
+
+  # Check if _GNU_SOURCE is available
+  check_symbol_exists(__GNU_LIBRARY__ features.h _GNU_SOURCE)
+
+  # Check if system is Big Endian
+  TEST_BIG_ENDIAN(WORDS_BIGENDIAN)
+
+  # Check if we are on MINIX
+  check_symbol_exists(_MINIX "stdio.h" EVENT___MINIX)
+
+  # Check if system does not provide POSIX.1 features except with this defined
+  #TODO does this suffice ????
+  check_symbol_exists(_POSIX_1_SOURCE "stdio.h" EVENT___POSIX_1_SOURCE)
+  if(NOT _POSIX_1_SOURCE)
+    set(_POSIX_1_SOURCE 2)
+  endif()
+
+  # TODO Is this true or should it be 1 when not found???
+  check_symbol_exists(_POSIX_SOURCE "stdio.h" EVENT___POSIX_SOURCE)
+
+  if(NOT CMAKE_COMPILER_IS_GNUCC)
+    set(__CHAR_UNSIGNED___EXITCODE 1)
+    set(__CHAR_UNSIGNED___EXITCODE__TRYRUN_OUTPUT 1)
+    check_source_runs(C
+    "
+      #include <limits.h>
+      int main (void) { return CHAR_MIN == 0; }
+    "
+    __CHAR_UNSIGNED__)
+  endif()
+
+  # Check for compiler `__func__' compatibility
+  check_c_source_compiles("void main() {char *function_name = __func__;}" HAVE___FUNC__)
+  check_c_source_compiles("void main() {char *function_name = __FUNCTION__;}" HAVE___FUNCTION__)
+
+  if(HAVE___FUNC__)
+    set(__func__ __func__)
+  elseif(HAVE___FUNCTION__) 
+    set(__func__ __FUNCTION__)
+  else()
+    set(__func__ "")
+  endif()
+
+  # Check if `const' is supported by compiler 
+  check_c_source_compiles("void main() {const char *s = \"Test\";}" HAVE_CONST)
+  # Only set const to empty if it doesn't exist otherwise magick++ will not compile
+  if(NOT HAVE_CONST)
+    set(const " ")
+  endif()
+
+  # Check if <sys/types.h> doesn't define `gid_t'
+  if(HAVE_SYS_TYPES_H)
+    check_symbol_exists(gid_t sys/types.h HAVE_GID_T)
+    if(NOT HAVE_GID_T)
+      SET(gid_t int)
+    endif()
+  endif()
+
+  # Check for the compiler inline compatible instruction
+  check_c_source_compiles(
+    "static inline int test (void) {return 0;}\nint main (void) {return test();}"
+    HAVE_INLINE)
+
+  check_c_source_compiles (
+    "static __inline int test (void) {return 0;}\nint main (void) {return test();}"
+    HAVE___INLINE)
+
+  check_c_source_compiles (
+    "static __inline__ int test (void) {return 0;}\nint main (void) {return test();}"
+    HAVE___INLINE__)
+
+  if(HAVE_INLINE)
+    set(inline inline)
+  elseif(HAVE___INLINE)
+    set(inline __inline)
+  elseif(HAVE___INLINE__)
+    set(inline __inline__)
+  else()
+    set(inline "")
+  endif()
+
+  #TODO these defines if system doesn't define them
+  set(int16_t "")
+  set(int32_t "")
+  set(int64_t "")
+  set(int8_t "")
+  set(intmax_t "")
+  set(intptr_t "")
+  set(mbstate_t "")
+
+  # Check if <sys/types.h> doesn't define `mode_t'
+  if(HAVE_SYS_TYPES_H)
+    check_symbol_exists(mode_t sys/types.h HAVE_MODE_T)
+    if(NOT HAVE_MODE_T)
+      set(mode_t int)
+    endif()
+  endif()
+
+  # Check if <sys/types.h> doesn't define `pid_t'
+  if(HAVE_SYS_TYPES_H)
+    check_symbol_exists(pid_t sys/types.h HAVE_PID_T)
+    if(NOT HAVE_PID_T)
+      set(pid_t int)
+    endif()
+  endif()
+
+  # Check for the compiler restrict compatible instruction
+  check_c_source_compiles(
+    "int test (void *restrict x);\nint main (void) {return 0;}"
+    HAVE_RESTRICT)
+
+  check_c_source_compiles(
+  "typedef struct abc *d;\nint test (d __restrict x);\nint main (void) {return 0;}"
+    HAVE___RESTRICT)
+
+  if(HAVE___RESTRICT)
+    set(restrict __restrict)
+  elseif(NOT HAVE_RESTRICT)
+    set(restrict " ")
+  endif()
+
+  # Check if <sys/types.h> doesn't define `size_t'
+  if(HAVE_SYS_TYPES_H)
+    if(SIZEOF_SIZE_T)
+      set(HAVE_SIZE_T 1)
+    else()
+      check_symbol_exists(size_t sys/types.h HAVE_SIZE_T)
+      if(NOT HAVE_SIZE_T)
+        if("${CMAKE_SIZEOF_VOID_P}" STREQUAL "4")
+          set(size_t "unsigned int")
+        else()
+          set(size_t "unsigned long long")
+        endif()
+      set(SIZEOF_SIZE_T ${CMAKE_SIZEOF_VOID_P})
+      endif()
+    endif()
+  endif()
+
+  # Check if <sys/types.h> doesn't define `ssize_t'
+  if(HAVE_SYS_TYPES_H)
+    if(SIZEOF_SSIZE_T)
+      set(HAVE_SSIZE_T 1)
+    else()
+      check_symbol_exists(ssize_t sys/types.h HAVE_SSIZE_T)
+      if(NOT HAVE_SSIZE_T)
+        if("${CMAKE_SIZEOF_VOID_P}" STREQUAL "4")
+          set(ssize_t int)
+        else()
+          set(ssize_t "long long")
+        endif()
+        set(SIZEOF_SSIZE_T ${CMAKE_SIZEOF_VOID_P})
+      endif()
+    endif()
+  endif()
+
+  # Check if <sys/types.h> doesn't define `uid_t'
+  if(HAVE_SYS_TYPES_H)
+    check_symbol_exists(uid_t sys/types.h HAVE_UID_T)
+    if(NOT HAVE_UID_T)
+      set(uid_t int)
+    endif()
+  endif()
+
+  #TODO these defines if system doesn't define them
+  set(uint16_t "")
+  set(uint32_t "")
+  set(uint64_t "")
+  set(uint8_t "")
+  set(uintmax_t "")
+  set(uintptr_t "")
+
+  # Check if `vfork' is not working and define it as `fork'
+  if(NOT HAVE_WORKING_VFORK)
+    set(vfork fork)
+  endif()
+
+  # Check if `volatile' works
+  check_cxx_source_compiles(
+  "
+  void main() { volatile int i = 1; }
+  "
+  HAVE_VOLATILE)
+
+  if(HAVE_VOLATILE)
+    set(volatile volatile)
+  else()
+    set(volatile "")
+  endif()
+endmacro()
\ No newline at end of file
diff --git a/coders/dng.c b/coders/dng.c
index 821653dbf..0d0bbfd6b 100644
--- a/coders/dng.c
+++ b/coders/dng.c
@@ -71,8 +71,12 @@
 #include "MagickCore/xml-tree.h"
 #include "MagickCore/xml-tree-private.h"
 #if defined(MAGICKCORE_RAW_R_DELEGATE)
+#if defined(MAGICKCORE_HAVE_LIBRAW_LIBRAW_H)
+#include <libraw/libraw.h>
+#else
 #include <libraw.h>
 #endif
+#endif
 
 
 /*
diff --git a/coders/heic.c b/coders/heic.c
index 846f5c757..6a8624cd9 100644
--- a/coders/heic.c
+++ b/coders/heic.c
@@ -74,10 +74,10 @@
 #include "MagickCore/module.h"
 #include "MagickCore/utility.h"
 #if defined(MAGICKCORE_HEIC_DELEGATE)
-#if defined(MAGICKCORE_WINDOWS_SUPPORT)
-#include <heif.h>
-#else
+#if defined(MAGICKCORE_HAVE_LIBHEIF_LIBHEIF_H)
 #include <libheif/heif.h>
+#else
+#include <heif.h>
 #endif
 #endif
 
diff --git a/config/ImageMagick.rc.cmake b/config/ImageMagick.rc.cmake
new file mode 100644
index 000000000..0505ffe29
--- /dev/null
+++ b/config/ImageMagick.rc.cmake
@@ -0,0 +1,70 @@
+#include "winver.h"
+#define __WINDOWS__
+#include "..\\..\\MagickCore\\magick-baseconfig.h"
+#include "..\\..\\MagickCore\\version.h"
+
+/////////////////////////////////////////////////////////////////////////////
+//
+// Version
+//
+/////////////////////////////////////////////////////////////////////////////
+
+VS_VERSION_INFO VERSIONINFO
+ FILEVERSION @MagickLibVersionNumber@
+ PRODUCTVERSION @MagickLibVersionNumber@
+ FILEFLAGSMASK 0x3fL
+#ifdef _DEBUG
+ FILEFLAGS 0x1L
+#else
+ FILEFLAGS 0x0L
+#endif
+ FILEOS 0x40004L
+ FILETYPE 0x1L
+ FILESUBTYPE 0x0L
+BEGIN
+    BLOCK "StringFileInfo"
+    BEGIN
+        BLOCK "040904b0"
+        BEGIN
+            VALUE "ProductName", "ImageMagick\0"
+            VALUE "FileDescription", "ImageMagick Studio library and utility programs\0"
+            VALUE "OriginalFilename", "ImageMagick\0"
+            VALUE "InternalName", "ImageMagick\0"
+            VALUE "FileVersion", @MagickLibVersionText@ "\0"
+            VALUE "ProductVersion", @MagickLibVersionText@ "\0"
+            VALUE "CompanyName", "ImageMagick Studio\0"
+            VALUE "LegalCopyright", @MagickCopyright@ "\0"
+            VALUE "Comments", @MagickVersion@ "\0"
+        END
+    END
+    BLOCK "VarFileInfo"
+    BEGIN
+        VALUE "Translation", 0x409, 1200
+    END
+END
+
+/////////////////////////////////////////////////////////////////////////////
+//
+// IMAGEMAGICK
+//
+/////////////////////////////////////////////////////////////////////////////
+
+// TODO generate the xml files
+//COLORS.XML           IMAGEMAGICK DISCARDABLE "..\\bin\\colors.xml"
+//CONFIGURE.XML        IMAGEMAGICK DISCARDABLE "..\\bin\\configure.xml"
+//DELEGATES.XML        IMAGEMAGICK DISCARDABLE "..\\bin\\delegates.xml"
+//ENGLISH.XML          IMAGEMAGICK DISCARDABLE "..\\bin\\english.xml"
+//LOCALE.XML           IMAGEMAGICK DISCARDABLE "..\\bin\\locale.xml"
+//LOG.XML              IMAGEMAGICK DISCARDABLE "..\\bin\\log.xml"
+//THRESHOLDS.XML       IMAGEMAGICK DISCARDABLE "..\\bin\\thresholds.xml"
+//TYPE.XML             IMAGEMAGICK DISCARDABLE "..\\bin\\type.xml"
+//TYPE-GHOSTSCRIPT.XML IMAGEMAGICK DISCARDABLE "..\\bin\\type-ghostscript.xml"
+
+
+/////////////////////////////////////////////////////////////////////////////
+//
+// Icon
+//
+/////////////////////////////////////////////////////////////////////////////
+
+IDR_MAGICKICON          ICON    DISCARDABLE     "..\\..\\images\\ImageMagick.ico"
diff --git a/config/config.h.cmake b/config/config.h.cmake
new file mode 100644
index 000000000..2ec38ed0c
--- /dev/null
+++ b/config/config.h.cmake
@@ -0,0 +1,1190 @@
+/* config/config.h.cmake.  Hand crafted from config/config.h.in.  */
+/* config/config.h.in.  Generated from configure.ac by autoheader.  */
+
+/* Define if building universal (internal helper macro) */
+#cmakedefine AC_APPLE_UNIVERSAL_BUILD
+
+/* Define if you have AUTOTRACE library */
+#cmakedefine AUTOTRACE_DELEGATE
+
+/* Define if coders and filters are to be built as modules. */
+#cmakedefine BUILD_MODULES
+
+/* Define if you have the bzip2 library */
+#cmakedefine BZLIB_DELEGATE
+
+/* Define if you have CAIRO library */
+#cmakedefine CAIRO_DELEGATE
+
+/* permit enciphering and deciphering image pixels */
+#cmakedefine CIPHER_SUPPORT
+
+/* Define to 1 if the `closedir' function returns void instead of `int'. */
+#cmakedefine CLOSEDIR_VOID @CLOSEDIR_VOID@
+
+/* coders subdirectory. */
+#cmakedefine CODER_DIRNAME @CODER_DIRNAME@
+
+/* Directory where architecture-dependent configuration files live. */
+#cmakedefine CONFIGURE_PATH @CONFIGURE_PATH@
+
+/* Subdirectory of lib where architecture-dependent configuration files live.
+   */
+#cmakedefine CONFIGURE_RELATIVE_PATH @CONFIGURE_RELATIVE_PATH@
+
+/* Define if you have DJVU library */
+#cmakedefine DJVU_DELEGATE
+
+/* Directory where ImageMagick documents live. */
+#cmakedefine DOCUMENTATION_PATH @DOCUMENTATION_PATH@
+
+/* Define if you have Display Postscript */
+#cmakedefine DPS_DELEGATE
+
+/* exclude deprecated methods in MagickCore API */
+#cmakedefine EXCLUDE_DEPRECATED
+
+/* Directory where executables are installed. */
+#cmakedefine EXECUTABLE_PATH
+
+/* Define if you have FFTW library */
+#cmakedefine FFTW_DELEGATE
+
+/* filter subdirectory. */
+#cmakedefine FILTER_DIRNAME @FILTER_DIRNAME@
+
+/* Define if you have FLIF library */
+#cmakedefine FLIF_DELEGATE
+
+/* Define if you have FONTCONFIG library */
+#cmakedefine FONTCONFIG_DELEGATE
+
+/* Define if you have FlashPIX library */
+#cmakedefine FPX_DELEGATE
+
+/* Define if you have FREETYPE library */
+#cmakedefine FREETYPE_DELEGATE
+
+/* Define if you have Ghostscript library or framework */
+#cmakedefine GS_DELEGATE
+
+/* Define if you have GVC library */
+#cmakedefine GVC_DELEGATE
+
+/* Define to 1 if you have the `acosh' function. */
+#cmakedefine HAVE_ACOSH @HAVE_ACOSH@
+
+/* Define to 1 if you have the <arm/limits.h> header file. */
+#cmakedefine HAVE_ARM_LIMITS_H @HAVE_ARM_LIMITS_H@
+
+/* Define to 1 if you have the <arpa/inet.h> header file. */
+#cmakedefine HAVE_ARPA_INET_H @HAVE_ARPA_INET_H@
+
+/* Define to 1 if you have the `asinh' function. */
+#cmakedefine HAVE_ASINH @HAVE_ASINH@
+
+/* Define to 1 if you have the `atanh' function. */
+#cmakedefine HAVE_ATANH @HAVE_ATANH@
+
+/* Define to 1 if you have the `atexit' function. */
+#cmakedefine HAVE_ATEXIT @HAVE_ATEXIT@
+
+/* Define to 1 if you have the `atoll' function. */
+#cmakedefine HAVE_ATOLL @HAVE_ATOLL@
+
+/* define if bool is a built-in type */
+#cmakedefine HAVE_BOOL
+
+/* Define to 1 if you have the `cabs' function. */
+#cmakedefine HAVE_CABS @HAVE_CABS@
+
+/* Define to 1 if you have the `carg' function. */
+#cmakedefine HAVE_CARG @HAVE_CARG@
+
+/* Define to 1 if you have the `cimag' function. */
+#cmakedefine HAVE_CIMAG @HAVE_CIMAG@
+
+/* Define to 1 if you have the `clock' function. */
+#cmakedefine HAVE_CLOCK @HAVE_CLOCK@
+
+/* Define to 1 if you have the `clock_getres' function. */
+#cmakedefine HAVE_CLOCK_GETRES @HAVE_CLOCK_GETRES@
+
+/* Define to 1 if you have clock_gettime. */
+#cmakedefine HAVE_CLOCK_GETTIME @HAVE_CLOCK_GETTIME@
+
+/* Define to 1 if clock_gettime supports CLOCK_REALTIME. */
+#cmakedefine HAVE_CLOCK_REALTIME @HAVE_CLOCK_REALTIME@
+
+/* Define to 1 if you have the <CL/cl.h> header file. */
+#cmakedefine HAVE_CL_CL_H @HAVE_CL_CL_H@
+
+/* Define to 1 if you have the <complex.h> header file. */
+#cmakedefine HAVE_COMPLEX_H @HAVE_COMPLEX_H@
+
+/* Define to 1 if you have the `creal' function. */
+#cmakedefine HAVE_CREAL @HAVE_CREAL@
+
+/* Define to 1 if you have the `ctime_r' function. */
+#cmakedefine HAVE_CTIME_R @HAVE_CTIME_R@
+
+/* Define to 1 if you have the declaration of `pread', and to 0 if you don't.
+   */
+#cmakedefine01 HAVE_DECL_PREAD
+
+/* Define to 1 if you have the declaration of `pwrite', and to 0 if you don't.
+   */
+#cmakedefine01 HAVE_DECL_PWRITE
+
+/* Define to 1 if you have the declaration of `strerror_r', and to 0 if you
+   don't. */
+#cmakedefine01 HAVE_DECL_STRERROR_R
+
+/* Define to 1 if you have the declaration of `strlcpy', and to 0 if you
+   don't. */
+#cmakedefine01 HAVE_DECL_STRLCPY
+
+/* Define to 1 if you have the declaration of `tzname', and to 0 if you don't.
+   */
+#cmakedefine01 HAVE_DECL_TZNAME
+
+/* Define to 1 if you have the declaration of `vsnprintf', and to 0 if you
+   don't. */
+#cmakedefine01 HAVE_DECL_VSNPRINTF
+
+/* Define to 1 if you have the `directio' function. */
+#cmakedefine HAVE_DIRECTIO @HAVE_DIRECTIO@
+
+/* Define to 1 if you have the <dirent.h> header file, and it defines `DIR'.
+   */
+#cmakedefine HAVE_DIRENT_H @HAVE_DIRENT_H@
+
+/* Define to 1 if you have the <dlfcn.h> header file. */
+#cmakedefine HAVE_DLFCN_H @HAVE_DLFCN_H@
+
+/* Define to 1 if you don't have `vprintf' but do have `_doprnt.' */
+#cmakedefine HAVE_DOPRNT @HAVE_DOPRNT@
+
+/* Define to 1 if the system has the type `double_t'. */
+#cmakedefine HAVE_DOUBLE_T @HAVE_DOUBLE_T@
+
+/* Define to 1 if you have the `erf' function. */
+#cmakedefine HAVE_ERF @HAVE_ERF@
+
+/* Define to 1 if you have the <errno.h> header file. */
+#cmakedefine HAVE_ERRNO_H @HAVE_ERRNO_H@
+
+/* Define to 1 if you have the `execvp' function. */
+#cmakedefine HAVE_EXECVP @HAVE_EXECVP@
+
+/* Define to 1 if you have the `fchmod' function. */
+#cmakedefine HAVE_FCHMOD @HAVE_FCHMOD@
+
+/* Define to 1 if you have the <fcntl.h> header file. */
+#cmakedefine HAVE_FCNTL_H @HAVE_FCNTL_H@
+
+/* Define to 1 if the system has the type `float_t'. */
+#cmakedefine HAVE_FLOAT_T @HAVE_FLOAT_T@
+
+/* Define to 1 if you have the `floor' function. */
+#cmakedefine HAVE_FLOOR @HAVE_FLOOR@
+
+/* Define to 1 if you have the `fork' function. */
+#cmakedefine HAVE_FORK @HAVE_FORK@
+
+/* Define to 1 if fseeko (and presumably ftello) exists and is declared. */
+#cmakedefine HAVE_FSEEKO @HAVE_FSEEKO@
+
+/* Define to 1 if you have the `ftime' function. */
+#cmakedefine HAVE_FTIME @HAVE_FTIME@
+
+/* Define to 1 if you have the `ftruncate' function. */
+#cmakedefine HAVE_FTRUNCATE @HAVE_FTRUNCATE@
+
+/* Define to 1 if you have the `getcwd' function. */
+#cmakedefine HAVE_GETCWD @HAVE_GETCWD@
+
+/* Define to 1 if you have the `getc_unlocked' function. */
+#cmakedefine HAVE_GETC_UNLOCKED @HAVE_GETC_UNLOCKED@
+
+/* Define to 1 if you have the `getdtablesize' function. */
+#cmakedefine HAVE_GETDTABLESIZE @HAVE_GETDTABLESIZE@
+
+/* Define to 1 if you have the `getexecname' function. */
+#cmakedefine HAVE_GETEXECNAME @HAVE_GETEXECNAME@
+
+/* Define to 1 if you have the `getpagesize' function. */
+#cmakedefine HAVE_GETPAGESIZE @HAVE_GETPAGESIZE@
+
+/* Define to 1 if you have the `getpid' function. */
+#cmakedefine HAVE_GETPID @HAVE_GETPID@
+
+/* Define to 1 if you have the `getrlimit' function. */
+#cmakedefine HAVE_GETRLIMIT @HAVE_GETRLIMIT@
+
+/* Define to 1 if you have the `getrusage' function. */
+#cmakedefine HAVE_GETRUSAGE @HAVE_GETRUSAGE@
+
+/* Define to 1 if you have the `gettimeofday' function. */
+#cmakedefine HAVE_GETTIMEOFDAY @HAVE_GETTIMEOFDAY@
+
+/* Define to 1 if you have the `gmtime_r' function. */
+#cmakedefine HAVE_GMTIME_R @HAVE_GMTIME_R@
+
+/* Compile with hugepage support */
+#cmakedefine HAVE_HUGEPAGES
+
+/* Define to 1 if the system has the type `intmax_t'. */
+#cmakedefine HAVE_INTMAX_T @HAVE_INTMAX_T@
+
+/* Define to 1 if the system has the type `intptr_t'. */
+#cmakedefine HAVE_INTPTR_T @HAVE_INTPTR_T@
+
+/* Define to 1 if you have the <inttypes.h> header file. */
+#cmakedefine HAVE_INTTYPES_H @HAVE_INTTYPES_H@
+
+/* Define to 1 if you have the `isnan' function. */
+#cmakedefine HAVE_ISNAN @HAVE_ISNAN@
+
+/* Define to 1 if you have the `j0' function. */
+#cmakedefine HAVE_J0 @HAVE_J0@
+
+/* Define to 1 if you have the `j1' function. */
+#cmakedefine HAVE_J1 @HAVE_J1@
+
+/* Define if you have the <lcms2.h> header file. */
+#cmakedefine HAVE_LCMS2_H
+
+/* Define if you have the <lcms2/lcms2.h> header file. */
+#cmakedefine HAVE_LCMS2_LCMS2_H
+
+/* Define if you have the <libraw/libraw.h> header file. */
+#cmakedefine HAVE_LIBRAW_LIBRAW_H
+
+/* Define if you have the <libheif/heif.h> header file. */
+#cmakedefine HAVE_LIBHEIF_LIBHEIF_H
+
+/* Define to 1 if you have the `gcov' library (-lgcov). */
+#cmakedefine HAVE_LIBGCOV @HAVE_LIBGCOV@
+
+/* Define to 1 if you have the <limits.h> header file. */
+#cmakedefine HAVE_LIMITS_H @HAVE_LIMITS_H@
+
+/* Define to 1 if you have the <linux/unistd.h> header file. */
+#cmakedefine HAVE_LINUX_UNISTD_H @HAVE_LINUX_UNISTD_H@
+
+/* Define to 1 if you have the `lltostr' function. */
+#cmakedefine HAVE_LLTOSTR @HAVE_LLTOSTR@
+
+/* Define to 1 if you have the <locale.h> header file. */
+#cmakedefine HAVE_LOCALE_H @HAVE_LOCALE_H@
+
+/* Define to 1 if the system has the type `locale_t'. */
+#cmakedefine HAVE_LOCALE_T @HAVE_LOCALE_T@
+
+/* Define to 1 if you have the `localtime_r' function. */
+#cmakedefine HAVE_LOCALTIME_R @HAVE_LOCALTIME_R@
+
+/* Define to 1 if the system has the type `long double'. */
+#cmakedefine HAVE_LONG_DOUBLE @HAVE_LONG_DOUBLE@
+
+/* Define to 1 if the type `long double' works and has more range or precision
+   than `double'. */
+#cmakedefine HAVE_LONG_DOUBLE_WIDER @HAVE_LONG_DOUBLE_WIDER@
+
+/* Define to 1 if the system has the type `long long int'. */
+#cmakedefine HAVE_LONG_LONG_INT @HAVE_LONG_LONG_INT@
+
+/* Define to 1 if you have the `lstat' function. */
+#cmakedefine HAVE_LSTAT @HAVE_LSTAT@
+
+/* Define to 1 if you have the <machine/param.h> header file. */
+#cmakedefine HAVE_MACHINE_PARAM_H @HAVE_MACHINE_PARAM_H@
+
+/* Define to 1 if you have the <mach-o/dyld.h> header file. */
+#cmakedefine HAVE_MACH_O_DYLD_H @HAVE_MACH_O_DYLD_H@
+
+/* Define to 1 if <wchar.h> declares mbstate_t. */
+#cmakedefine HAVE_MBSTATE_T @HAVE_MBSTATE_T@
+
+/* Define to 1 if you have the `memmove' function. */
+#cmakedefine HAVE_MEMMOVE @HAVE_MEMMOVE@
+
+/* Define to 1 if you have the <memory.h> header file. */
+#cmakedefine HAVE_MEMORY_H @HAVE_MEMORY_H@
+
+/* Define to 1 if you have the `memset' function. */
+#cmakedefine HAVE_MEMSET @HAVE_MEMSET@
+
+/* Define to 1 if you have the `mkstemp' function. */
+#cmakedefine HAVE_MKSTEMP @HAVE_MKSTEMP@
+
+/* Define to 1 if you have a working `mmap' system call. */
+#cmakedefine HAVE_MMAP @HAVE_MMAP@
+
+/* Define to 1 if you have the `munmap' function. */
+#cmakedefine HAVE_MUNMAP @HAVE_MUNMAP@
+
+/* define if the compiler implements namespaces */
+#cmakedefine HAVE_NAMESPACES
+
+/* Define if g++ supports namespace std. */
+#cmakedefine HAVE_NAMESPACE_STD
+
+/* Define to 1 if you have the `nanosleep' function. */
+#cmakedefine HAVE_NANOSLEEP @HAVE_NANOSLEEP@
+
+/* Define to 1 if you have the <ndir.h> header file, and it defines `DIR'. */
+#cmakedefine HAVE_NDIR_H @HAVE_NDIR_H@
+
+/* Define to 1 if you have the <netinet/in.h> header file. */
+#cmakedefine HAVE_NETINET_IN_H @HAVE_NETINET_IN_H@
+
+/* Define to 1 if you have the `newlocale' function. */
+#cmakedefine HAVE_NEWLOCALE @HAVE_NEWLOCALE@
+
+/* Define to 1 if you have the <OpenCL/cl.h> header file. */
+#cmakedefine HAVE_OPENCL_CL_H @HAVE_OPENCL_CL_H@
+
+/* Define to 1 if you have the <OS.h> header file. */
+#cmakedefine HAVE_OS_H @HAVE_OS_H@
+
+/* Define to 1 if you have the `pclose' function. */
+#cmakedefine HAVE_PCLOSE @HAVE_PCLOSE@
+
+/* Define to 1 if you have the `poll' function. */
+#cmakedefine HAVE_POLL @HAVE_POLL@
+
+/* Define to 1 if you have the `popen' function. */
+#cmakedefine HAVE_POPEN @HAVE_POPEN@
+
+/* Define to 1 if you have the `posix_fadvise' function. */
+#cmakedefine HAVE_POSIX_FADVISE @HAVE_POSIX_FADVISE@
+
+/* Define to 1 if you have the `posix_fallocate' function. */
+#cmakedefine HAVE_POSIX_FALLOCATE @HAVE_POSIX_FALLOCATE@
+
+/* Define to 1 if you have the `posix_madvise' function. */
+#cmakedefine HAVE_POSIX_MADVISE @HAVE_POSIX_MADVISE@
+
+/* Define to 1 if you have the `posix_memalign' function. */
+#cmakedefine HAVE_POSIX_MEMALIGN @HAVE_POSIX_MEMALIGN@
+
+/* Define to 1 if you have the `posix_spawnp' function. */
+#cmakedefine HAVE_POSIX_SPAWNP @HAVE_POSIX_SPAWNP@
+
+/* Define to 1 if you have the `pow' function. */
+#cmakedefine HAVE_POW @HAVE_POW@
+
+/* Define to 1 if you have the `pread' function. */
+#cmakedefine HAVE_PREAD @HAVE_PREAD@
+
+/* Define to 1 if you have the <process.h> header file. */
+#cmakedefine HAVE_PROCESS_H @HAVE_PROCESS_H@
+
+/* Define if you have POSIX threads libraries and header files. */
+#cmakedefine HAVE_PTHREAD
+
+/* Have PTHREAD_PRIO_INHERIT. */
+#cmakedefine HAVE_PTHREAD_PRIO_INHERIT
+
+/* Define to 1 if you have the `pwrite' function. */
+#cmakedefine HAVE_PWRITE @HAVE_PWRITE@
+
+/* Define to 1 if you have the `qsort_r' function. */
+#cmakedefine HAVE_QSORT_R @HAVE_QSORT_R@
+
+/* Define to 1 if you have the `raise' function. */
+#cmakedefine HAVE_RAISE @HAVE_RAISE@
+
+/* Define to 1 if you have the `rand_r' function. */
+#cmakedefine HAVE_RAND_R @HAVE_RAND_R@
+
+/* Define to 1 if you have the `readlink' function. */
+#cmakedefine HAVE_READLINK @HAVE_READLINK@
+
+/* Define to 1 if you have the `realpath' function. */
+#cmakedefine HAVE_REALPATH @HAVE_REALPATH@
+
+/* Define to 1 if you have the `seekdir' function. */
+#cmakedefine HAVE_SEEKDIR @HAVE_SEEKDIR@
+
+/* Define to 1 if you have the `select' function. */
+#cmakedefine HAVE_SELECT @HAVE_SELECT@
+
+/* Define to 1 if you have the `sendfile' function. */
+#cmakedefine HAVE_SENDFILE @HAVE_SENDFILE@
+
+/* Define to 1 if you have the `setlocale' function. */
+#cmakedefine HAVE_SETLOCALE @HAVE_SETLOCALE@
+
+/* Define to 1 if you have the `setvbuf' function. */
+#cmakedefine HAVE_SETVBUF @HAVE_SETVBUF@
+
+/* X11 server supports shape extension */
+#cmakedefine HAVE_SHAPE
+
+/* X11 server supports shared memory extension */
+#cmakedefine HAVE_SHARED_MEMORY
+
+/* Define to 1 if you have the `sigaction' function. */
+#cmakedefine HAVE_SIGACTION @HAVE_SIGACTION@
+
+/* Define to 1 if you have the `sigemptyset' function. */
+#cmakedefine HAVE_SIGEMPTYSET @HAVE_SIGEMPTYSET@
+
+/* Define to 1 if you have the `socket' function. */
+#cmakedefine HAVE_SOCKET @HAVE_SOCKET@
+
+/* Define to 1 if you have the `spawnvp' function. */
+#cmakedefine HAVE_SPAWNVP @HAVE_SPAWNVP@
+
+/* Define to 1 if you have the `sqrt' function. */
+#cmakedefine HAVE_SQRT @HAVE_SQRT@
+
+/* Define to 1 if you have the `stat' function. */
+#cmakedefine HAVE_STAT @HAVE_STAT@
+
+/* Define to 1 if you have the <stdarg.h> header file. */
+#cmakedefine HAVE_STDARG_H @HAVE_STDARG_H@
+
+/* Define to 1 if stdbool.h conforms to C99. */
+#cmakedefine HAVE_STDBOOL_H @HAVE_STDBOOL_H@
+
+/* Define to 1 if you have the <stdint.h> header file. */
+#cmakedefine HAVE_STDINT_H @HAVE_STDINT_H@
+
+/* Define to 1 if you have the <stdlib.h> header file. */
+#cmakedefine HAVE_STDLIB_H @HAVE_STDLIB_H@
+
+/* define if the compiler supports ISO C++ standard library */
+#cmakedefine HAVE_STD_LIBS
+
+/* Define to 1 if you have the `strcasecmp' function. */
+#cmakedefine HAVE_STRCASECMP @HAVE_STRCASECMP@
+
+/* Define to 1 if you have the `strchr' function. */
+#cmakedefine HAVE_STRCHR @HAVE_STRCHR@
+
+/* Define to 1 if you have the `strcspn' function. */
+#cmakedefine HAVE_STRCSPN @HAVE_STRCSPN@
+
+/* Define to 1 if you have the `strdup' function. */
+#cmakedefine HAVE_STRDUP @HAVE_STRDUP@
+
+/* Define to 1 if you have the `strerror' function. */
+#cmakedefine HAVE_STRERROR @HAVE_STRERROR@
+
+/* Define to 1 if you have the `strerror_r' function. */
+#cmakedefine HAVE_STRERROR_R @HAVE_STRERROR_R@
+
+/* Define to 1 if cpp supports the ANSI # stringizing operator. */
+#cmakedefine HAVE_STRINGIZE @HAVE_STRINGIZE@
+
+/* Define to 1 if you have the <strings.h> header file. */
+#cmakedefine HAVE_STRINGS_H @HAVE_STRINGS_H@
+
+/* Define to 1 if you have the <string.h> header file. */
+#cmakedefine HAVE_STRING_H @HAVE_STRING_H@
+
+/* Define to 1 if you have the `strlcat' function. */
+#cmakedefine HAVE_STRLCAT @HAVE_STRLCAT@
+
+/* Define to 1 if you have the `strlcpy' function. */
+#cmakedefine HAVE_STRLCPY @HAVE_STRLCPY@
+
+/* Define to 1 if you have the `strncasecmp' function. */
+#cmakedefine HAVE_STRNCASECMP @HAVE_STRNCASECMP@
+
+/* Define to 1 if you have the `strpbrk' function. */
+#cmakedefine HAVE_STRPBRK @HAVE_STRPBRK@
+
+/* Define to 1 if you have the `strrchr' function. */
+#cmakedefine HAVE_STRRCHR @HAVE_STRRCHR@
+
+/* Define to 1 if you have the `strspn' function. */
+#cmakedefine HAVE_STRSPN @HAVE_STRSPN@
+
+/* Define to 1 if you have the `strstr' function. */
+#cmakedefine HAVE_STRSTR @HAVE_STRSTR@
+
+/* Define to 1 if you have the `strtod' function. */
+#cmakedefine HAVE_STRTOD @HAVE_STRTOD@
+
+/* Define to 1 if you have the `strtod_l' function. */
+#cmakedefine HAVE_STRTOD_L @HAVE_STRTOD_L@
+
+/* Define to 1 if you have the `strtol' function. */
+#cmakedefine HAVE_STRTOL @HAVE_STRTOL@
+
+/* Define to 1 if you have the `strtoul' function. */
+#cmakedefine HAVE_STRTOUL @HAVE_STRTOUL@
+
+/* Define to 1 if `tm_zone' is a member of `struct tm'. */
+#cmakedefine HAVE_STRUCT_TM_TM_ZONE @HAVE_STRUCT_TM_TM_ZONE@
+
+/* Define to 1 if you have the <sun_prefetch.h> header file. */
+#cmakedefine HAVE_SUN_PREFETCH_H @HAVE_SUN_PREFETCH_H@
+
+/* Define to 1 if you have the `symlink' function. */
+#cmakedefine HAVE_SYMLINK @HAVE_SYMLINK@
+
+/* Define to 1 if you have the `sysconf' function. */
+#cmakedefine HAVE_SYSCONF @HAVE_SYSCONF@
+
+/* Define to 1 if you have the <sys/dir.h> header file, and it defines `DIR'.
+   */
+#cmakedefine HAVE_SYS_DIR_H @HAVE_SYS_DIR_H@
+
+/* Define to 1 if you have the <sys/ipc.h> header file. */
+#cmakedefine HAVE_SYS_IPC_H @HAVE_SYS_IPC_H@
+
+/* Define to 1 if you have the <sys/mman.h> header file. */
+#cmakedefine HAVE_SYS_MMAN_H @HAVE_SYS_MMAN_H@
+
+/* Define to 1 if you have the <sys/ndir.h> header file, and it defines `DIR'.
+   */
+#cmakedefine HAVE_SYS_NDIR_H @HAVE_SYS_NDIR_H@
+
+/* Define to 1 if you have the <sys/param.h> header file. */
+#cmakedefine HAVE_SYS_PARAM_H @HAVE_SYS_PARAM_H@
+
+/* Define to 1 if you have the <sys/resource.h> header file. */
+#cmakedefine HAVE_SYS_RESOURCE_H @HAVE_SYS_RESOURCE_H@
+
+/* Define to 1 if you have the <sys/select.h> header file. */
+#cmakedefine HAVE_SYS_SELECT_H @HAVE_SYS_SELECT_H@
+
+/* Define to 1 if you have the <sys/sendfile.h> header file. */
+#cmakedefine HAVE_SYS_SENDFILE_H @HAVE_SYS_SENDFILE_H@
+
+/* Define to 1 if you have the <sys/socket.h> header file. */
+#cmakedefine HAVE_SYS_SOCKET_H @HAVE_SYS_SOCKET_H@
+
+/* Define to 1 if you have the <sys/stat.h> header file. */
+#cmakedefine HAVE_SYS_STAT_H @HAVE_SYS_STAT_H@
+
+/* Define to 1 if you have the <sys/syslimits.h> header file. */
+#cmakedefine HAVE_SYS_SYSLIMITS_H @HAVE_SYS_SYSLIMITS_H@
+
+/* Define to 1 if you have the <sys/timeb.h> header file. */
+#cmakedefine HAVE_SYS_TIMEB_H @HAVE_SYS_TIMEB_H@
+
+/* Define to 1 if you have the <sys/times.h> header file. */
+#cmakedefine HAVE_SYS_TIMES_H @HAVE_SYS_TIMES_H@
+
+/* Define to 1 if you have the <sys/time.h> header file. */
+#cmakedefine HAVE_SYS_TIME_H @HAVE_SYS_TIME_H@
+
+/* Define to 1 if you have the <sys/types.h> header file. */
+#cmakedefine HAVE_SYS_TYPES_H @HAVE_SYS_TYPES_H@
+
+/* Define to 1 if you have the <sys/wait.h> header file. */
+#cmakedefine HAVE_SYS_WAIT_H @HAVE_SYS_WAIT_H@
+
+/* Define to 1 if you have the `telldir' function. */
+#cmakedefine HAVE_TELLDIR @HAVE_TELLDIR@
+
+/* Define to 1 if you have the `tempnam' function. */
+#cmakedefine HAVE_TEMPNAM @HAVE_TEMPNAM@
+
+/* Define to 1 if you have the <tiffconf.h> header file. */
+#cmakedefine HAVE_TIFFCONF_H @HAVE_TIFFCONF_H@
+
+/* Define to 1 if you have the `TIFFIsBigEndian' function. */
+#cmakedefine HAVE_TIFFISBIGENDIAN @HAVE_TIFFISBIGENDIAN@
+
+/* Define to 1 if you have the `TIFFIsCODECConfigured' function. */
+#cmakedefine HAVE_TIFFISCODECCONFIGURED @HAVE_TIFFISCODECCONFIGURED@
+
+/* Define to 1 if you have the `TIFFMergeFieldInfo' function. */
+#cmakedefine HAVE_TIFFMERGEFIELDINFO @HAVE_TIFFMERGEFIELDINFO@
+
+/* Define to 1 if you have the `TIFFReadEXIFDirectory' function. */
+#cmakedefine HAVE_TIFFREADEXIFDIRECTORY @HAVE_TIFFREADEXIFDIRECTORY@
+
+/* Define to 1 if you have the `TIFFSetErrorHandlerExt' function. */
+#cmakedefine HAVE_TIFFSETERRORHANDLEREXT @HAVE_TIFFSETERRORHANDLEREXT@
+
+/* Define to 1 if you have the `TIFFSetTagExtender' function. */
+#cmakedefine HAVE_TIFFSETTAGEXTENDER @HAVE_TIFFSETTAGEXTENDER@
+
+/* Define to 1 if you have the `TIFFSetWarningHandlerExt' function. */
+#cmakedefine HAVE_TIFFSETWARNINGHANDLEREXT @HAVE_TIFFSETWARNINGHANDLEREXT@
+
+/* Define to 1 if you have the `TIFFSwabArrayOfTriples' function. */
+#cmakedefine HAVE_TIFFSWABARRAYOFTRIPLES @HAVE_TIFFSWABARRAYOFTRIPLES@
+
+/* Define to 1 if you have the `times' function. */
+#cmakedefine HAVE_TIMES @HAVE_TIMES@
+
+/* Define to 1 if your `struct tm' has `tm_zone'. Deprecated, use
+   `HAVE_STRUCT_TM_TM_ZONE' instead. */
+#cmakedefine HAVE_TM_ZONE @HAVE_TM_ZONE@
+
+/* Define to 1 if you don't have `tm_zone' but do have the external array
+   `tzname'. */
+#cmakedefine HAVE_TZNAME @HAVE_TZNAME@
+
+/* Define to 1 if the system has the type `uintmax_t'. */
+#cmakedefine HAVE_UINTMAX_T @HAVE_UINTMAX_T@
+
+/* Define to 1 if the system has the type `uintptr_t'. */
+#cmakedefine HAVE_UINTPTR_T @HAVE_UINTPTR_T@
+
+/* Define to 1 if you have the `ulltostr' function. */
+#cmakedefine HAVE_ULLTOSTR @HAVE_ULLTOSTR@
+
+/* Define to 1 if you have the <unistd.h> header file. */
+#cmakedefine HAVE_UNISTD_H @HAVE_UNISTD_H@
+
+/* Define to 1 if the system has the type `unsigned long long int'. */
+#cmakedefine HAVE_UNSIGNED_LONG_LONG_INT @HAVE_UNSIGNED_LONG_LONG_INT@
+
+/* Define to 1 if you have the `uselocale' function. */
+#cmakedefine HAVE_USELOCALE @HAVE_USELOCALE@
+
+/* Define to 1 if you have the `usleep' function. */
+#cmakedefine HAVE_USLEEP @HAVE_USLEEP@
+
+/* Define to 1 if you have the `utime' function. */
+#cmakedefine HAVE_UTIME @HAVE_UTIME@
+
+/* Define to 1 if you have the <utime.h> header file. */
+#cmakedefine HAVE_UTIME_H @HAVE_UTIME_H@
+
+/* Define to 1 if you have the `vfork' function. */
+#cmakedefine HAVE_VFORK @HAVE_VFORK@
+
+/* Define to 1 if you have the <vfork.h> header file. */
+#cmakedefine HAVE_VFORK_H @HAVE_VFORK_H@
+
+/* Define to 1 if you have the `vfprintf' function. */
+#cmakedefine HAVE_VFPRINTF @HAVE_VFPRINTF@
+
+/* Define to 1 if you have the `vfprintf_l' function. */
+#cmakedefine HAVE_VFPRINTF_L @HAVE_VFPRINTF_L@
+
+/* Define to 1 if you have the `vprintf' function. */
+#cmakedefine HAVE_VPRINTF @HAVE_VPRINTF@
+
+/* Define to 1 if you have the `vsnprintf' function. */
+#cmakedefine HAVE_VSNPRINTF @HAVE_VSNPRINTF@
+
+/* Define to 1 if you have the `vsnprintf_l' function. */
+#cmakedefine HAVE_VSNPRINTF_L @HAVE_VSNPRINTF_L@
+
+/* Define to 1 if you have the `vsprintf' function. */
+#cmakedefine HAVE_VSPRINTF @HAVE_VSPRINTF@
+
+/* Define to 1 if you have the `waitpid' function. */
+#cmakedefine HAVE_WAITPID @HAVE_WAITPID@
+
+/* Define to 1 if you have the <wchar.h> header file. */
+#cmakedefine HAVE_WCHAR_H @HAVE_WCHAR_H@
+
+/* Define to 1 if you have the <windows.h> header file. */
+#cmakedefine HAVE_WINDOWS_H @HAVE_WINDOWS_H@
+
+/* Define to 1 if `fork' works. */
+#cmakedefine HAVE_WORKING_FORK @HAVE_WORKING_FORK@
+
+/* Define to 1 if `vfork' works. */
+#cmakedefine HAVE_WORKING_VFORK @HAVE_WORKING_VFORK@
+
+/* Define to 1 if you have the <xlocale.h> header file. */
+#cmakedefine HAVE_XLOCALE_H @HAVE_XLOCALE_H@
+
+/* Define to 1 if you have the `_aligned_malloc' function. */
+#cmakedefine HAVE__ALIGNED_MALLOC @HAVE__ALIGNED_MALLOC@
+
+/* Define to 1 if the system has the type `_Bool'. */
+#cmakedefine HAVE__BOOL @HAVE__BOOL@
+
+/* Define to 1 if you have the `_exit' function. */
+#cmakedefine HAVE__EXIT @HAVE__EXIT@
+
+/* Define to 1 if you have the `_NSGetExecutablePath' function. */
+#cmakedefine HAVE__NSGETEXECUTABLEPATH @HAVE__NSGETEXECUTABLEPATH@
+
+/* Define to 1 if you have the `_pclose' function. */
+#cmakedefine HAVE__PCLOSE @HAVE__PCLOSE@
+
+/* Define to 1 if you have the `_popen' function. */
+#cmakedefine HAVE__POPEN @HAVE__POPEN@
+
+/* Define to 1 if you have the `_wfopen' function. */
+#cmakedefine HAVE__WFOPEN @HAVE__WFOPEN@
+
+/* Define to 1 if you have the `_wstat' function. */
+#cmakedefine HAVE__WSTAT @HAVE__WSTAT@
+
+/* define if your compiler has __attribute__ */
+#cmakedefine HAVE___ATTRIBUTE__
+
+/* Whether hdri is enabled or not */
+#cmakedefine HDRI_ENABLE_OBSOLETE_IN_H 
+
+/* Define if you have libheif library */
+#cmakedefine HEIC_DELEGATE
+
+/* Define if you have jemalloc memory allocation library */
+#cmakedefine HasJEMALLOC
+
+/* Define if you have umem memory allocation library */
+#cmakedefine HasUMEM
+
+/* Directory where ImageMagick architecture headers live. */
+#cmakedefine INCLUDEARCH_PATH @INCLUDEARCH_PATH@
+
+/* Directory where ImageMagick headers live. */
+#cmakedefine INCLUDE_PATH @INCLUDE_PATH
+
+/* ImageMagick is formally installed under prefix */
+#cmakedefine INSTALLED_SUPPORT
+
+/* Define if you have JBIG library */
+#cmakedefine JBIG_DELEGATE
+
+/* Define if you have JPEG library */
+#cmakedefine JPEG_DELEGATE
+
+/* Define if you have LCMS library */
+#cmakedefine LCMS_DELEGATE
+
+/* Define if you have OPENJP2 library */
+#cmakedefine LIBOPENJP2_DELEGATE
+
+/* Directory where architecture-dependent files live. */
+#cmakedefine LIBRARY_PATH @LIBRARY_PATH@
+
+/* Subdirectory of lib where ImageMagick architecture dependent files are
+   installed. */
+#cmakedefine LIBRARY_RELATIVE_PATH @LIBRARY_RELATIVE_PATH@
+
+/* Binaries in libraries path base name (will be during install linked to bin)
+   */
+#cmakedefine LIB_BIN_BASEDIRNAME @LIB_BIN_BASEDIRNAME@
+
+/* Define if you have LQR library */
+#cmakedefine LQR_DELEGATE
+
+/* Define if using libltdl to support dynamically loadable modules and OpenCL
+   */
+#cmakedefine LTDL_DELEGATE
+
+/* Native module suffix */
+#cmakedefine LTDL_MODULE_EXT @LTDL_MODULE_EXT@
+
+/* Define to the sub-directory where libtool stores uninstalled libraries. */
+#cmakedefine LT_OBJDIR @LT_OBJDIR@
+
+/* Define if you have LZMA library */
+#cmakedefine LZMA_DELEGATE
+
+/* Define to prepend to default font search path. */
+#cmakedefine MAGICK_FONT_PATH @MAGICK_FONT_PATH@
+
+/* Target Host CPU */
+#cmakedefine MAGICK_TARGET_CPU @MAGICK_TARGET_CPU@
+
+/* Target Host OS */
+#cmakedefine MAGICK_TARGET_OS @MAGICK_TARGET_OS@
+
+/* Target Host Vendor */
+#cmakedefine MAGICK_TARGET_VENDOR @MAGICK_TARGET_VENDOR@
+
+/* Module directory name without ABI part. */
+#cmakedefine MODULES_BASEDIRNAME @MODULES_BASEDIRNAME@
+
+/* Module directory dirname */
+#cmakedefine MODULES_DIRNAME @MODULES_DIRNAME@
+
+/* Magick API method prefix */
+#cmakedefine NAMESPACE_PREFIX @NAMESPACE_PREFIX@
+
+/* Magick API method prefix tag */
+#cmakedefine NAMESPACE_PREFIX_TAG @NAMESPACE_PREFIX_TAG@
+
+/* Define if you have OPENEXR library */
+#cmakedefine OPENEXR_DELEGATE
+
+/* Name of package */
+#cmakedefine PACKAGE @PACKAGE@
+
+/* Define to the address where bug reports for this package should be sent. */
+#cmakedefine PACKAGE_BUGREPORT @PACKAGE_BUGREPORT@
+
+/* Define to the full name of this package. */
+#cmakedefine PACKAGE_NAME @PACKAGE_NAME@
+
+/* Define to the full name and version of this package. */
+#cmakedefine PACKAGE_STRING @PACKAGE_STRING@
+
+/* Define to the one symbol short name of this package. */
+#cmakedefine PACKAGE_TARNAME @PACKAGE_TARNAME@
+
+/* Define to the home page for this package. */
+#cmakedefine PACKAGE_URL @PACKAGE_URL@
+
+/* Define to the version of this package. */
+#cmakedefine PACKAGE_VERSION @PACKAGE_VERSION@
+
+/* Define if you have PANGOCAIRO library */
+#cmakedefine PANGOCAIRO_DELEGATE
+
+/* Define if you have PANGO library */
+#cmakedefine PANGO_DELEGATE
+
+/* enable pipes (|) in filenames */
+#cmakedefine PIPES_SUPPORT
+
+/* Define if you have PNG library */
+#cmakedefine PNG_DELEGATE
+
+/* Define to necessary symbol if this constant uses a non-standard name on
+   your system. */
+#cmakedefine PTHREAD_CREATE_JOINABLE @PTHREAD_CREATE_JOINABLE@
+
+/* Pixel cache threshold in MB (defaults to available memory) */
+#cmakedefine PixelCacheThreshold @PixelCacheThreshold@
+
+/* Number of bits in a pixel Quantum (8/16/32/64) */
+#cmakedefine QUANTUM_DEPTH_OBSOLETE_IN_H @QUANTUM_DEPTH_OBSOLETE_IN_H@
+
+/* Define if you have RAQM library */
+#cmakedefine RAQM_DELEGATE @RAQM_DELEGATE@
+
+/* Define if you have LIBRAW library */
+#cmakedefine RAW_R_DELEGATE @RAW_R_DELEGATE@
+
+/* Define as the return type of signal handlers (`int' or `void'). */
+#cmakedefine RETSIGTYPE @RETSIGTYPE@
+
+/* Define if you have RSVG library */
+#cmakedefine RSVG_DELEGATE
+
+/* Define to the type of arg 1 for `select'. */
+#cmakedefine SELECT_TYPE_ARG1 @SELECT_TYPE_ARG1@
+
+/* Define to the type of args 2, 3 and 4 for `select'. */
+#cmakedefine SELECT_TYPE_ARG234 @SELECT_TYPE_ARG234@
+
+/* Define to the type of arg 5 for `select'. */
+#cmakedefine SELECT_TYPE_ARG5 @SELECT_TYPE_ARG5@
+
+/* Sharearch directory name without ABI part. */
+#cmakedefine SHAREARCH_BASEDIRNAME @SHAREARCH_BASEDIRNAME@
+
+/* Sharearch directory dirname */
+#cmakedefine SHAREARCH_DIRNAME @SHAREARCH_DIRNAME@
+
+/* Directory where architecture-independent configuration files live. */
+#cmakedefine SHARE_PATH @SHARE_PATH@
+
+/* Subdirectory of lib where architecture-independent configuration files
+   live. */
+#cmakedefine SHARE_RELATIVE_PATH @SHARE_RELATIVE_PATH@
+
+/* The size of `double', as computed by sizeof. */
+#cmakedefine SIZEOF_DOUBLE @SIZEOF_DOUBLE@
+
+/* The size of `double_t', as computed by sizeof. */
+#cmakedefine SIZEOF_DOUBLE_T @SIZEOF_DOUBLE_T@
+
+/* The size of `float', as computed by sizeof. */
+#cmakedefine SIZEOF_FLOAT @SIZEOF_FLOAT@
+
+/* The size of `float_t', as computed by sizeof. */
+#cmakedefine SIZEOF_FLOAT_T @SIZEOF_FLOAT_T@
+
+/* The size of `long double', as computed by sizeof. */
+#cmakedefine SIZEOF_LONG_DOUBLE @SIZEOF_LONG_DOUBLE@
+
+/* The size of `off_t', as computed by sizeof. */
+#cmakedefine SIZEOF_OFF_T @SIZEOF_OFF_T@
+
+/* The size of `signed int', as computed by sizeof. */
+#cmakedefine SIZEOF_SIGNED_INT @SIZEOF_SIGNED_INT@
+
+/* The size of `signed long', as computed by sizeof. */
+#cmakedefine SIZEOF_SIGNED_LONG @SIZEOF_SIGNED_LONG@
+
+/* The size of `signed long long', as computed by sizeof. */
+#cmakedefine SIZEOF_SIGNED_LONG_LONG @SIZEOF_SIGNED_LONG_LONG@
+
+/* The size of `signed short', as computed by sizeof. */
+#cmakedefine SIZEOF_SIGNED_SHORT @SIZEOF_SIGNED_SHORT@
+
+/* The size of `size_t', as computed by sizeof. */
+#cmakedefine SIZEOF_SIZE_T @SIZEOF_SIZE_T@
+
+/* The size of `ssize_t', as computed by sizeof. */
+#cmakedefine SIZEOF_SSIZE_T @SIZEOF_SSIZE_T@
+
+/* The size of `unsigned int', as computed by sizeof. */
+#cmakedefine SIZEOF_UNSIGNED_INT @SIZEOF_UNSIGNED_INT@
+
+/* The size of `unsigned int*', as computed by sizeof. */
+#cmakedefine SIZEOF_UNSIGNED_INTP @SIZEOF_UNSIGNED_INTP@
+
+/* The size of `unsigned long', as computed by sizeof. */
+#cmakedefine SIZEOF_UNSIGNED_LONG @SIZEOF_UNSIGNED_LONG@
+
+/* The size of `unsigned long long', as computed by sizeof. */
+#cmakedefine SIZEOF_UNSIGNED_LONG_LONG @SIZEOF_UNSIGNED_LONG_LONG@
+
+/* The size of `void *', as computed by sizeof. */
+#cmakedefine SIZEOF_VOID_P @SIZEOF_VOID_P@
+
+/* The size of `unsigned short', as computed by sizeof. */
+#cmakedefine SIZEOF_UNSIGNED_SHORT @SIZEOF_UNSIGNED_SHORT@
+
+/* Define to 1 if the `S_IS*' macros in <sys/stat.h> do not work properly. */
+#cmakedefine STAT_MACROS_BROKEN @STAT_MACROS_BROKEN@
+
+/* Define to 1 if you have the ANSI C header files. */
+#cmakedefine STDC_HEADERS @STDC_HEADERS@
+
+/* Define to 1 if strerror_r returns char *. */
+#cmakedefine STRERROR_R_CHAR_P @STRERROR_R_CHAR_P@
+
+/* Define if you have POSIX threads libraries and header files. */
+#cmakedefine THREAD_SUPPORT
+
+/* Define if you have TIFF library */
+#cmakedefine TIFF_DELEGATE
+
+/* Define to 1 if you can safely include both <sys/time.h> and <time.h>. */
+#cmakedefine TIME_WITH_SYS_TIME @TIME_WITH_SYS_TIME@
+
+/* Define to 1 if your <sys/time.h> declares `struct tm'. */
+#cmakedefine TM_IN_SYS_TIME @TM_IN_SYS_TIME@
+
+/* Enable extensions on AIX 3, Interix.  */
+#ifndef _ALL_SOURCE
+#cmakedefine _ALL_SOURCE
+#endif
+/* Enable GNU extensions on systems that have them.  */
+#ifndef _GNU_SOURCE
+#cmakedefine _GNU_SOURCE
+#endif
+/* Enable threading extensions on Solaris.  */
+#ifndef _POSIX_PTHREAD_SEMANTICS
+#cmakedefine _POSIX_PTHREAD_SEMANTICS
+#endif
+/* Enable extensions on HP NonStop.  */
+#ifndef _TANDEM_SOURCE
+#cmakedefine _TANDEM_SOURCE
+#endif
+/* Enable general extensions on Solaris.  */
+#ifndef __EXTENSIONS__
+#cmakedefine __EXTENSIONS__
+#endif
+
+
+/* Version number of package */
+#cmakedefine VERSION @VERSION@
+
+/* Define if you have WEBPMUX library */
+#cmakedefine WEBPMUX_DELEGATE
+
+/* Define if you have WEBP library */
+#cmakedefine WEBP_DELEGATE
+
+/* Define to use the Windows GDI32 library */
+#cmakedefine WINGDI32_DELEGATE
+
+/* Define if using the dmalloc debugging malloc package */
+#cmakedefine WITH_DMALLOC
+
+/* Define if you have WMF library */
+#cmakedefine WMF_DELEGATE
+
+/* Define WORDS_BIGENDIAN to 1 if your processor stores words with the most
+   significant byte first (like Motorola and SPARC, unlike Intel). */
+#if defined AC_APPLE_UNIVERSAL_BUILD
+# if defined __BIG_ENDIAN__
+#  define WORDS_BIGENDIAN 1
+# endif
+#else
+# ifndef WORDS_BIGENDIAN
+#cmakedefine WORDS_BIGENDIAN
+# endif
+#endif
+
+/* Location of X11 configure files */
+#cmakedefine X11_CONFIGURE_PATH @X11_CONFIGURE_PATH@
+
+/* Define if you have X11 library */
+#cmakedefine X11_DELEGATE
+
+/* Define if you have XML library */
+#cmakedefine XML_DELEGATE
+
+/* Define to 1 if the X Window System is missing or not being used. */
+#cmakedefine X_DISPLAY_MISSING @X_DISPLAY_MISSING@
+
+/* Build self-contained, embeddable, zero-configuration ImageMagick */
+#cmakedefine ZERO_CONFIGURATION_SUPPORT
+
+/* Define if you have ZLIB library */
+#cmakedefine ZLIB_DELEGATE
+
+/* Define if you have ZSTD library */
+#cmakedefine ZSTD_DELEGATE
+
+/* Enable large inode numbers on Mac OS X 10.5.  */
+#ifndef _DARWIN_USE_64_BIT_INODE
+# define _DARWIN_USE_64_BIT_INODE 1
+#endif
+
+/* Number of bits in a file offset, on hosts where this is settable. */
+#cmakedefine _FILE_OFFSET_BITS @_FILE_OFFSET_BITS@
+
+/* enable run-time bounds-checking */
+#cmakedefine _FORTIFY_SOURCE
+
+/* Define to 1 to make fseeko visible on some hosts (e.g. glibc 2.2). */
+#cmakedefine _LARGEFILE_SOURCE @_LARGEFILE_SOURCE@
+
+/* Define for large files, on AIX-style hosts. */
+#cmakedefine _LARGE_FILES
+
+/* Define to 1 if on MINIX. */
+#cmakedefine _MINIX @_MINIX@
+
+/* Define this for the OpenCL Accelerator */
+#cmakedefine _OPENCL
+
+/* Define to 2 if the system does not provide POSIX.1 features except with
+   this defined. */
+#cmakedefine _POSIX_1_SOURCE @_POSIX_1_SOURCE@
+
+/* Define to 1 if you need to in order for `stat' and other things to work. */
+#cmakedefine _POSIX_SOURCE @_POSIX_SOURCE@
+
+/* Define for Solaris 2.5.1 so the uint32_t typedef from <sys/synch.h>,
+   <pthread.h>, or <semaphore.h> is not used. If the typedef were allowed, the
+   #define below would cause a syntax error. */
+#cmakedefine _UINT32_T @_UINT32_T@
+
+/* Define for Solaris 2.5.1 so the uint64_t typedef from <sys/synch.h>,
+   <pthread.h>, or <semaphore.h> is not used. If the typedef were allowed, the
+   #define below would cause a syntax error. */
+#cmakedefine _UINT64_T @_UINT64_T@
+
+/* Define for Solaris 2.5.1 so the uint8_t typedef from <sys/synch.h>,
+   <pthread.h>, or <semaphore.h> is not used. If the typedef were allowed, the
+   #define below would cause a syntax error. */
+#cmakedefine _UINT8_T @_UINT8_T@
+
+/* Define to 1 if type `char' is unsigned and you are not using gcc.  */
+#ifndef __CHAR_UNSIGNED__
+#cmakedefine __CHAR_UNSIGNED__
+#endif
+
+/* Define to appropriate substitue if compiler does not have __func__ */
+#cmakedefine __func__ @__func__@
+
+/* Define to empty if `const' does not conform to ANSI C. */
+#cmakedefine const @const@
+
+/* Define to `int' if <sys/types.h> doesn't define. */
+#cmakedefine gid_t @gid_t@
+
+/* Define to `__inline__' or `__inline' if that's what the C compiler
+   calls it, or to nothing if 'inline' is not supported under any name.  */
+#ifndef __cplusplus
+#define inline @inline@
+#endif
+
+/* Define to the type of a signed integer type of width exactly 16 bits if
+   such a type exists and the standard includes do not define it. */
+#cmakedefine int16_t @int16_t@
+
+/* Define to the type of a signed integer type of width exactly 32 bits if
+   such a type exists and the standard includes do not define it. */
+#cmakedefine int32_t @int32_t@
+
+/* Define to the type of a signed integer type of width exactly 64 bits if
+   such a type exists and the standard includes do not define it. */
+#cmakedefine int64_t @int64_t@
+
+/* Define to the type of a signed integer type of width exactly 8 bits if such
+   a type exists and the standard includes do not define it. */
+#cmakedefine int8_t @int8_t@
+
+/* Define to the widest signed integer type if <stdint.h> and <inttypes.h> do
+   not define. */
+#cmakedefine intmax_t @intmax_t@
+
+/* Define to the type of a signed integer type wide enough to hold a pointer,
+   if such a type exists, and if the system does not define it. */
+#cmakedefine intptr_t @intptr_t@
+
+/* Define to a type if <wchar.h> does not define. */
+#cmakedefine mbstate_t @mbstate_t@
+
+/* Define to `int' if <sys/types.h> does not define. */
+#cmakedefine mode_t @mode_t@
+
+/* Define to `long int' if <sys/types.h> does not define. */
+#cmakedefine off_t @off_t@
+
+/* Define to `int' if <sys/types.h> does not define. */
+#cmakedefine pid_t @pid_t@
+
+/* Define to the equivalent of the C99 'restrict' keyword, or to
+   nothing if this is not supported.  Do not define if restrict is
+   supported directly.  */
+#cmakedefine restrict @restrict@
+/* Work around a bug in Sun C++: it does not support _Restrict or
+   __restrict__, even though the corresponding Sun C compiler ends up with
+   "#define restrict _Restrict" or "#define restrict __restrict__" in the
+   previous line.  Perhaps some future version of Sun C++ will work with
+   restrict; if so, hopefully it defines __RESTRICT like Sun C does.  */
+#if defined __SUNPRO_CC && !defined __RESTRICT
+# define _Restrict
+# define __restrict__
+#endif
+
+/* Define to `unsigned int' if <sys/types.h> does not define. */
+#cmakedefine size_t @size_t@
+
+/* Define to `int' if <sys/types.h> does not define. */
+#cmakedefine ssize_t @ssize_t@
+
+/* Define to `int' if <sys/types.h> doesn't define. */
+#cmakedefine uid_t @uid_t@
+
+/* Define to the type of an unsigned integer type of width exactly 16 bits if
+   such a type exists and the standard includes do not define it. */
+#cmakedefine uint16_t @uint16_t@
+
+/* Define to the type of an unsigned integer type of width exactly 32 bits if
+   such a type exists and the standard includes do not define it. */
+#cmakedefine uint32_t @uint32_t@
+
+/* Define to the type of an unsigned integer type of width exactly 64 bits if
+   such a type exists and the standard includes do not define it. */
+#cmakedefine uint64_t @uint64_t@
+
+/* Define to the type of an unsigned integer type of width exactly 8 bits if
+   such a type exists and the standard includes do not define it. */
+#cmakedefine uint8_t @uint8_t@
+
+/* Define to the widest unsigned integer type if <stdint.h> and <inttypes.h>
+   do not define. */
+#cmakedefine uintmax_t @uintmax_t@
+
+/* Define to the type of an unsigned integer type wide enough to hold a
+   pointer, if such a type exists, and if the system does not define it. */
+#cmakedefine uintptr_t @uintptr_t@
+
+/* Define as `fork' if `vfork' does not work. */
+#cmakedefine vfork @vfork@
+
+/* Define to empty if the keyword `volatile' does not work. Warning: valid
+   code using `volatile' can become incorrect without. Disable with care. */
+#define volatile @volatile@
diff --git a/utilities/CMakeLists.txt b/utilities/CMakeLists.txt
new file mode 100644
index 000000000..e2048ae3f
--- /dev/null
+++ b/utilities/CMakeLists.txt
@@ -0,0 +1,31 @@
+#   Licensed under the ImageMagick License (the "License"); you may not use
+#   this file except in compliance with the License.  You may obtain a copy
+#   of the License at
+#
+#     https://imagemagick.org/script/license.php
+#
+#   Unless required by applicable law or agreed to in writing, software
+#   distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+#   WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
+#   License for the specific language governing permissions and limitations
+#   under the License.
+#
+#   CMake script file to build ImageMagick
+# 
+
+project(Magick C)
+
+set(MAGICK_SRC
+  magick.c
+)
+
+add_executable(${MAGICK_BINARY_NAME} ${MAGICK_SRC} ${MAGICK_RESOURCE_FILE_PATH})
+
+target_include_directories(${MAGICK_BINARY_NAME} PRIVATE ${IMAGEMAGICK_BASE_PATH})
+target_compile_definitions(${MAGICK_BINARY_NAME} PRIVATE ${MAGICK_BUILD_DEFINES})
+target_link_libraries(${MAGICK_BINARY_NAME} PRIVATE ${MAGICKWAND_BINARY_NAME})
+
+install(TARGETS ${MAGICK_BINARY_NAME}
+  RUNTIME DESTINATION bin
+  BUNDLE DESTINATION bin
+)
