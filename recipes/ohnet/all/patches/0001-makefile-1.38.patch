diff --git a/Common.mak b/Common.mak
index baae7b17..73eb1829 100644
--- a/Common.mak
+++ b/Common.mak
@@ -251,23 +251,23 @@ $(objdir)AsyncPrivate.$(objext) : OpenHome/Net/ControlPoint/AsyncPrivate.cpp $(h
 	$(compiler)AsyncPrivate.$(objext) -c $(cppflags) $(includes) OpenHome/Net/ControlPoint/AsyncPrivate.cpp
 $(objdir)Bonjour.$(objext) : OpenHome/Net/Device/Bonjour/Bonjour.cpp $(headers)
 	$(compiler)Bonjour.$(objext) -c $(cppflags) $(includes) OpenHome/Net/Device/Bonjour/Bonjour.cpp
 $(objdir)Buffer.$(objext) : OpenHome/Buffer.cpp $(headers)
 	$(compiler)Buffer.$(objext) -c $(cppflags) $(includes) OpenHome/Buffer.cpp
 $(objdir)Converter.$(objext) : OpenHome/Converter.cpp $(headers)
 	$(compiler)Converter.$(objext) -c $(cppflags) $(includes) OpenHome/Converter.cpp
 $(objdir)Crc32.$(objext) : OpenHome/Crc32.cpp $(headers)
 	$(compiler)Crc32.$(objext) -c $(cppflags) $(includes) OpenHome/Crc32.cpp
 $(objdir)cencode.$(objext) : thirdparty/libb64/cencode.c $(headers)
-	$(compiler)cencode.$(objext) -c $(cflags_third_party) $(includes) thirdparty/libb64/cencode.c
+	$(compiler_cc)cencode.$(objext) -c $(cflags_third_party) $(includes) thirdparty/libb64/cencode.c
 $(objdir)cdecode.$(objext) : thirdparty/libb64/cdecode.c $(headers)
-	$(compiler)cdecode.$(objext) -c $(cflags_third_party) $(includes) thirdparty/libb64/cdecode.c
+	$(compiler_cc)cdecode.$(objext) -c $(cflags_third_party) $(includes) thirdparty/libb64/cdecode.c
 $(objdir)Discovery.$(objext) : OpenHome/Net/Discovery.cpp $(headers)
 	$(compiler)Discovery.$(objext) -c $(cppflags) $(includes) OpenHome/Net/Discovery.cpp
 $(objdir)Debug.$(objext) : OpenHome/Debug.cpp $(headers)
 	$(compiler)Debug.$(objext) -c $(cppflags) $(includes) OpenHome/Debug.cpp
 $(objdir)CpDeviceCore.$(objext) : OpenHome/Net/ControlPoint/CpDeviceCore.cpp $(headers)
 	$(compiler)CpDeviceCore.$(objext) -c $(cppflags) $(includes) OpenHome/Net/ControlPoint/CpDeviceCore.cpp
 $(objdir)CpDeviceC.$(objext) : OpenHome/Net/Bindings/C/ControlPoint/CpDeviceC.cpp $(headers)
 	$(compiler)CpDeviceC.$(objext) -c $(cppflags) $(includes) OpenHome/Net/Bindings/C/ControlPoint/CpDeviceC.cpp
 $(objdir)CpDeviceStd.$(objext) : OpenHome/Net/Bindings/Cpp/ControlPoint/CpDeviceStd.cpp $(headers)
 	$(compiler)CpDeviceStd.$(objext) -c $(cppflags) $(includes) OpenHome/Net/Bindings/Cpp/ControlPoint/CpDeviceStd.cpp
@@ -361,41 +361,41 @@ $(objdir)FileAnsi.$(objext) : OpenHome/FileAnsi.cpp $(headers)
 	$(compiler)FileAnsi.$(objext) -c $(cppflags) $(includes) OpenHome/FileAnsi.cpp
 $(objdir)FileBrx.$(objext) : OpenHome/FileBrx.cpp $(headers)
 	$(compiler)FileBrx.$(objext) -c $(cppflags) $(includes) OpenHome/FileBrx.cpp
 $(objdir)FileStream.$(objext) : OpenHome/FileStream.cpp $(headers)
 	$(compiler)FileStream.$(objext) -c $(cppflags) $(includes) OpenHome/FileStream.cpp
 $(objdir)Globals.$(objext) : OpenHome/Net/Globals.cpp $(headers)
 	$(compiler)Globals.$(objext) -c $(cppflags) $(includes) OpenHome/Net/Globals.cpp
 $(objdir)Http.$(objext) : OpenHome/Http.cpp $(headers)
 	$(compiler)Http.$(objext) -c $(cppflags) $(includes) OpenHome/Http.cpp
 $(objdir)anonymous.$(objext) : $(mDNSdir)/anonymous.c $(headers)
-	$(compiler)anonymous.$(objext) -c $(cflags_third_party) $(includes) $(mDNSdir)/anonymous.c
+	$(compiler_cc)anonymous.$(objext) -c $(cflags_third_party) $(includes) $(mDNSdir)/anonymous.c
 $(objdir)CryptoAlg.$(objext) : $(mDNSdir)/CryptoAlg.c $(headers)
-	$(compiler)CryptoAlg.$(objext) -c $(cflags_third_party) $(includes) $(mDNSdir)/CryptoAlg.c
+	$(compiler_cc)CryptoAlg.$(objext) -c $(cflags_third_party) $(includes) $(mDNSdir)/CryptoAlg.c
 $(objdir)DNSCommon.$(objext) : $(mDNSdir)/DNSCommon.c $(headers)
-	$(compiler)DNSCommon.$(objext) -c $(cflags_third_party) $(includes) $(mDNSdir)/DNSCommon.c
+	$(compiler_cc)DNSCommon.$(objext) -c $(cflags_third_party) $(includes) $(mDNSdir)/DNSCommon.c
 $(objdir)DNSDigest.$(objext) : $(mDNSdir)/DNSDigest.c $(headers)
-	$(compiler)DNSDigest.$(objext) -c $(cflags_third_party) $(includes) $(mDNSdir)/DNSDigest.c
+	$(compiler_cc)DNSDigest.$(objext) -c $(cflags_third_party) $(includes) $(mDNSdir)/DNSDigest.c
 $(objdir)mDNS.$(objext) : $(mDNSdir)/mDNS.c $(headers)
-	$(compiler)mDNS.$(objext) -c $(cflags_third_party) $(includes) $(mDNSdir)/mDNS.c
+	$(compiler_cc)mDNS.$(objext) -c $(cflags_third_party) $(includes) $(mDNSdir)/mDNS.c
 $(objdir)nsec.$(objext) : $(mDNSdir)/nsec.c $(headers)
-	$(compiler)nsec.$(objext) -c $(cflags_third_party) $(includes) $(mDNSdir)/nsec.c
+	$(compiler_cc)nsec.$(objext) -c $(cflags_third_party) $(includes) $(mDNSdir)/nsec.c
 $(objdir)nsec3.$(objext) : $(mDNSdir)/nsec3.c $(headers)
-	$(compiler)nsec3.$(objext) -c $(cflags_third_party) $(includes) $(mDNSdir)/nsec3.c
+	$(compiler_cc)nsec3.$(objext) -c $(cflags_third_party) $(includes) $(mDNSdir)/nsec3.c
 $(objdir)uDNS.$(objext) : $(mDNSdir)/uDNS.c $(headers)
-	$(compiler)uDNS.$(objext) -c $(cflags_third_party) $(includes) $(mDNSdir)/uDNS.c
+	$(compiler_cc)uDNS.$(objext) -c $(cflags_third_party) $(includes) $(mDNSdir)/uDNS.c
 $(objdir)dnssd_clientshim.$(objext) : $(mDNSdir)/dnssd_clientshim.c $(headers)
-	$(compiler)dnssd_clientshim.$(objext) -c $(cflags_third_party) $(includes) $(mDNSdir)/dnssd_clientshim.c
+	$(compiler_cc)dnssd_clientshim.$(objext) -c $(cflags_third_party) $(includes) $(mDNSdir)/dnssd_clientshim.c
 $(objdir)dnssd_clientlib.$(objext) : $(mDNSdir)/dnssd_clientlib.c $(headers)
-	$(compiler)dnssd_clientlib.$(objext) -c $(cflags_third_party) $(includes) $(mDNSdir)/dnssd_clientlib.c
+	$(compiler_cc)dnssd_clientlib.$(objext) -c $(cflags_third_party) $(includes) $(mDNSdir)/dnssd_clientlib.c
 $(objdir)MdnsPlatform.$(objext) : OpenHome/Net/Device/Bonjour/MdnsPlatform.cpp $(headers)
-	$(compiler)MdnsPlatform.$(objext) -c $(cflags_third_party) $(includes) OpenHome/Net/Device/Bonjour/MdnsPlatform.cpp
+	$(compiler)MdnsPlatform.$(objext) -c $(cflags_third_party) $(cppflags) $(includes) OpenHome/Net/Device/Bonjour/MdnsPlatform.cpp
 $(objdir)MdnsProvider.$(objext) : OpenHome/Net/Device/Bonjour/MdnsProvider.cpp $(headers)
 	$(compiler)MdnsProvider.$(objext) -c $(cppflags) $(includes) OpenHome/Net/Device/Bonjour/MdnsProvider.cpp
 $(objdir)Md5.$(objext) : OpenHome/md5.c $(headers)
 	$(compiler)Md5.$(objext) -c $(cflags_third_party) $(includes) OpenHome/md5.c
 $(objdir)NetworkAdapterList.$(objext) : OpenHome/NetworkAdapterList.cpp $(headers)
 	$(compiler)NetworkAdapterList.$(objext) -c $(cppflags) $(includes) OpenHome/NetworkAdapterList.cpp
 $(objdir)DnsChangeNotifier.$(objext) : OpenHome/DnsChangeNotifier.cpp $(headers)
 	$(compiler)DnsChangeNotifier.$(objext) -c $(cppflags) $(includes) OpenHome/DnsChangeNotifier.cpp
 $(objdir)Network.$(objext) : OpenHome/Network.cpp $(headers)
 	$(compiler)Network.$(objext) -c $(cppflags) $(includes) OpenHome/Network.cpp
@@ -451,21 +451,21 @@ $(objdir)OhNetC.$(objext) : OpenHome/Net/Bindings/C/OhNetC.cpp $(headers)
 	$(compiler)OhNetC.$(objext) -c $(cppflags) $(includes) OpenHome/Net/Bindings/C/OhNetC.cpp
 $(objdir)OhNetCCp.$(objext) : OpenHome/Net/Bindings/C/OhNetCCp.cpp $(headers)
 	$(compiler)OhNetCCp.$(objext) -c $(cppflags) $(includes) OpenHome/Net/Bindings/C/OhNetCCp.cpp
 $(objdir)OhNetCDv.$(objext) : OpenHome/Net/Bindings/C/OhNetCDv.cpp $(headers)
 	$(compiler)OhNetCDv.$(objext) -c $(cppflags) $(includes) OpenHome/Net/Bindings/C/OhNetCDv.cpp
 $(objdir)OhNetCCombined.$(objext) : OpenHome/Net/Bindings/C/OhNetCCombined.cpp $(headers)
 	$(compiler)OhNetCCombined.$(objext) -c $(cppflags) $(includes) OpenHome/Net/Bindings/C/OhNetCCombined.cpp
 $(objdir)OsWrapper.$(objext) : Os/OsWrapper.cpp $(headers)
 	$(compiler)OsWrapper.$(objext) -c $(cppflags) $(includes) Os/OsWrapper.cpp
 $(objdir)Os.$(objext) : Os/$(osdir)/Os.c $(headers)
-	$(compiler)Os.$(objext) -c $(cflags_third_party) $(includes) Os/$(osdir)/Os.c
+	$(compiler_cc)Os.$(objext) -c $(cflags_third_party) $(includes) Os/$(osdir)/Os.c
 $(objdir)File.$(objext) : Os/$(osdir)/File.cpp $(headers)
 	$(compiler)File.$(objext) -c $(cppflags) $(includes) Os/$(osdir)/File.cpp
 $(objdir)TerminalOs.$(objext) : Os/$(osdir)/TerminalOs.cpp $(headers)
 	$(compiler)TerminalOs.$(objext) -c $(cppflags) $(includes) Os/$(osdir)/TerminalOs.cpp
 $(objdir)SignalHandlers.$(objext) : Os/$(osdir)/SignalHandlers.cpp $(headers)
 	$(compiler)SignalHandlers.$(objext) -c $(cppflags) $(includes) Os/$(osdir)/SignalHandlers.cpp
 $(objdir)Shell.$(objext) : OpenHome/Shell/Shell.cpp $(headers)
 	$(compiler)Shell.$(objext) -c $(cppflags) $(includes) OpenHome/Shell/Shell.cpp
 $(objdir)InfoProvider.$(objext) : OpenHome/Shell/InfoProvider.cpp $(headers)
 	$(compiler)InfoProvider.$(objext) -c $(cppflags) $(includes) OpenHome/Shell/InfoProvider.cpp
@@ -724,21 +724,21 @@ $(objdir)TestSuspendResume.$(exeext) :  ohNetCore $(objdir)TestSuspendResume.$(o
 	$(link) $(linkoutput)$(objdir)TestSuspendResume.$(exeext) $(objdir)CpAvOpenhomeOrgProduct1.$(objext) $(objdir)CpAvOpenhomeOrgSender1.$(objext) $(objdir)TestSuspendResume.$(objext) $(objdir)$(libprefix)TestFramework.$(libext) $(objdir)$(libprefix)ohNetCore.$(libext)
 $(objdir)TestSuspendResume.$(objext) : OpenHome/Net/ControlPoint/Tests/TestSuspendResume.cpp $(headers)
 	$(compiler)TestSuspendResume.$(objext) -c $(cppflags) $(includes) OpenHome/Net/ControlPoint/Tests/TestSuspendResume.cpp
 
 TestProxyC: $(objdir)TestProxyC.$(exeext)
 $(objdir)TestProxyC.$(exeext) :  ohNetCore $(objdir)CpUpnpOrgConnectionManager1C.$(objext) $(objdir)CpUpnpOrgConnectionManager1.$(objext) $(objdir)TestProxyC.$(objext) $(objdir)TestFramework.$(objext) $(objdir)MainC.$(objext)
 	$(link) $(linkoutput)$(objdir)TestProxyC.$(exeext) $(objdir)CpUpnpOrgConnectionManager1C.$(objext) $(objdir)CpUpnpOrgConnectionManager1.$(objext) $(objdir)TestProxyC.$(objext) $(objdir)TestFramework.$(objext) $(objdir)MainC.$(objext) $(objdir)$(libprefix)ohNetCore.$(libext)
 $(objdir)TestProxyC.$(objext) : OpenHome/Net/Bindings/C/ControlPoint/Tests/TestProxyC.cpp $(headers)
 	$(compiler)TestProxyC.$(objext) -c $(cppflags) $(includes) OpenHome/Net/Bindings/C/ControlPoint/Tests/TestProxyC.cpp
 $(objdir)MainC.$(objext) : Os/$(osdir)/MainC.c $(headers)
-	$(compiler)MainC.$(objext) -c $(cflags) $(includes) Os/$(osdir)/MainC.c
+	$(compiler_cc)MainC.$(objext) -c $(cflags) $(includes) Os/$(osdir)/MainC.c
 
 TestCpDeviceListMdns: $(objdir)TestCpDeviceListMdns.$(exeext)
 $(objdir)TestCpDeviceListMdns.$(exeext) :  ohNetCore $(objdir)TestCpDeviceListMdns.$(objext) $(libprefix)TestFramework.$(libext)
 	$(link) $(linkoutput)$(objdir)TestCpDeviceListMdns.$(exeext) $(objdir)$(libprefix)ohNetCore.$(libext) $(objdir)TestCpDeviceListMdns.$(objext) $(objdir)$(libprefix)TestFramework.$(libext) $(objdir)$(libprefix)ohNetCore.$(libext)
 $(objdir)TestCpDeviceListMdns.$(objext) : OpenHome/Net/Device/Bonjour/Tests/TestCpDeviceListMdns.cpp $(headers)
 	$(compiler)TestCpDeviceListMdns.$(objext) -c $(cppflags) $(includes) OpenHome/Net/Device/Bonjour/Tests/TestCpDeviceListMdns.cpp
 
 TestDviDiscovery: $(objdir)TestDviDiscovery.$(exeext)
 $(objdir)TestDviDiscovery.$(exeext) :  ohNetCore $(objdir)TestDviDiscovery.$(objext) $(objdir)TestDviDiscoveryMain.$(objext) $(libprefix)TestFramework.$(libext)
 	$(link) $(linkoutput)$(objdir)TestDviDiscovery.$(exeext) $(objdir)TestDviDiscoveryMain.$(objext) $(objdir)TestDviDiscovery.$(objext) $(objdir)$(libprefix)TestFramework.$(libext) $(objdir)$(libprefix)ohNetCore.$(libext)
diff --git a/Makefile b/Makefile
index 17e7d2b4..56365ed1 100644
--- a/Makefile
+++ b/Makefile
@@ -1,47 +1,50 @@
 #Makefile for linux
 # Could be extended to support Mac in future
 
 rsync ?= yes
 
 ifeq ($(rsync),yes)
 cp = rsync -u
 else
-cp = cp -u
+cp = cp
 endif
 
+PYTHON ?= python
+
 ifeq ($(debug),1)
 debug_specific_cflags = -g -O0
 debug_csharp = /define:DEBUG /debug+
 build_dir = Debug
 openhome_configuration = Debug
 android_ndk_debug = 1
 else
 debug_specific_cflags = -g -O2
 debug_csharp = /optimize+ /debug:pdbonly
 build_dir = Release
 openhome_configuration = Release
 android_ndk_debug=0
 endif
 
 
 
 # Figure out platform, openhome_system and openhome_architecture
 
-gcc_machine = $(shell ${CROSS_COMPILE}gcc -dumpmachine)
+cc_machine = $(shell ${CROSS_COMPILE}$(CC) -dumpmachine)
 MACHINE = $(shell uname -s)
 
 $(info CROSS_COMPILE: ${CROSS_COMPILE})
-$(info Machine reported by compiler is: ${gcc_machine})
+$(info Machine reported by compiler is: ${cc_machine})
 $(info Machine reported by uname is: ${MACHINE})
 $(info PLATFORM: ${PLATFORM})
 
+ifneq ($(SKIP_DETECTION),1)
 ifeq ($(MACHINE),Darwin)
   ifeq ($(iOs-arm64),1)
     platform = iOS
     detected_openhome_system = iOs
     detected_openhome_architecture = arm64
   else ifeq ($(iOs-x64),1)
     platform = iOS
     detected_openhome_system = iOs
     detected_openhome_architecture = x64
   else ifeq ($(Linux-rpi),1)
@@ -121,20 +124,21 @@ else
     ifneq (,$(findstring mips,$(gcc_machine)))
       detected_openhome_architecture = mipsel
     endif
     ifneq (,$(findstring aarch64,$(gcc_machine)))
       detected_openhome_architecture = aarch64
     endif
     ifneq (,$(findstring riscv64,$(gcc_machine)))
       detected_openhome_architecture = riscv64
     endif
 endif
+endif
 
 detected_openhome_system ?= Unknown
 detected_openhome_architecture ?= Unknown
 
 ifneq (${openhome_system},)
   ifneq (${openhome_system},${detected_openhome_system})
     $(warning Detected compiler is for system ${detected_openhome_system} but expected ${openhome_system}. Build will probably fail.)
   endif
 endif
 
@@ -180,21 +184,22 @@ ifeq ($(platform),iOS)
 		platform_arch=x86_64
 	endif
 	devroot=/Applications/Xcode.app/Contents/Developer
 	toolroot=$(devroot)/Toolchains/XcodeDefault.xctoolchain/usr/bin
 	sdkroot=$(devroot)/Platforms/$(platform_prefix).platform/Developer/SDKs/$(platform_prefix).sdk
 	platform_cflags = -I$(sdkroot)/usr/include/ -miphoneos-version-min=12.0 -pipe -no-cpp-precomp -isysroot $(sdkroot) -DPLATFORM_MACOSX_GNU -DPLATFORM_IOS
 	# TODO: Support armv6 for old devices
 	osbuilddir = $(platform)-$(detected_openhome_architecture)
 	objdir = Build/Obj/$(osbuilddir)/$(build_dir)/
 	platform_linkflags = -L$(sdkroot)/usr/lib/ -arch $(platform_arch) -framework IOKit
-	compiler = $(toolroot)/clang -stdlib=libc++ -arch $(platform_arch) -isysroot $(sdkroot) -o $(objdir)
+	compiler = $(toolroot)/clang++ -stdlib=libc++ -arch $(platform_arch) -isysroot $(sdkroot) -o $(objdir)
+	compiler_cc = $(toolroot)/clang -stdlib=libc++ -arch $(platform_arch) -isysroot $(sdkroot) -o $(objdir)
 	# No support for linking Shared Objects for ARM MAC
 	# link = $(devroot)/usr/bin/llvm-gcc-4.2  -pthread -Wl $(platform_linkflags)
 	# link = $(toolroot)/clang++ -pthread -stdlib=libc++ $(platform_linkflags)
 	ar = $(toolroot)/ar rc $(objdir)
 	no_shared_objects = yes
 
     dotnetFramework = net6.0-ios
     dotnetRuntime = osx-x64
 endif
 
@@ -208,84 +213,94 @@ ifeq ($(platform),Mac)
 		openhome_architecture = x64
 	else
 		# building for arm64
 		platform_cflags = -DPLATFORM_MACOSX_GNU -arch arm64 -mmacosx-version-min=11
 		platform_linkflags = -arch arm64 -framework CoreFoundation -framework SystemConfiguration -framework IOKit
 		osbuilddir = Mac-arm64
 		openhome_architecture = arm64
 	endif
 
 	objdir = Build/Obj/$(osbuilddir)/$(build_dir)/
-	compiler = clang -fPIC -stdlib=libc++ -o $(objdir)
+	compiler = clang++ -fPIC -Qunused-arguments -stdlib=libc++ -o $(objdir)
+	compiler_cc = clang -fPIC -Qunused-arguments -stdlib=libc++ -o $(objdir)
 	link = clang++ -pthread -stdlib=libc++ $(platform_linkflags)
-	ar = ar rc $(objdir)
+	ar = $(AR) rc $(objdir)
 	openhome_system = Mac
 
 	dotnetRuntime = osx-x64
 endif
 
 ifeq ($(platform), Core-ppc32)
     # platform == Core1
     openhome_system = Core
     openhome_architecture = ppc32
     endian = BIG
     platform_cflags = -mcpu=405
     platform_linkflags = -mcpu=405 ${CROSS_LINKFLAGS}
     linkopts_ohNet =
     osdir = Core
     osbuilddir = Core-ppc32
     objdir = Build/Obj/$(osbuilddir)/$(build_dir)/
     native_only = yes
-    compiler = ${CROSS_COMPILE}gcc -o $(objdir)
-    link = ${CROSS_COMPILE}g++ $(platform_linkflags)
+    compiler = ${CROSS_COMPILE}$(CXX) -o $(objdir)
+    compiler_cc = ${CROSS_COMPILE}$(CC) -o $(objdir)
+    link = ${CROSS_COMPILE}$(CXX) $(platform_linkflags)
     ar = ${CROSS_COMPILE}ar rc $(objdir)
 endif
 
 ifeq ($(platform), Core-armv6)
     # platform == Core2
     openhome_system = Core
     openhome_architecture = armv6
     endian = LITTLE
     platform_cflags = -mcpu=arm926ej-s -Wno-psabi
     platform_linkflags = -mcpu=arm926ej-s ${CROSS_LINKFLAGS}
     linkopts_ohNet =
     osdir = Core
     osbuilddir = Core-armv6
     objdir = Build/Obj/$(osbuilddir)/$(build_dir)/
     native_only = yes
-    compiler = ${CROSS_COMPILE}gcc -o $(objdir)
-    link = ${CROSS_COMPILE}g++ $(platform_linkflags)
+    compiler = ${CROSS_COMPILE}$(CXX) -o $(objdir)
+    compiler_cc = ${CROSS_COMPILE}$(CC) -o $(objdir)
+    link = ${CROSS_COMPILE}$(CXX) $(platform_linkflags)
     ar = ${CROSS_COMPILE}ar rc $(objdir)
 endif
 
 ifneq (,$(findstring $(platform),Vanilla Qnap-x86 Qnap-x19 Linux-ppc32))
   ifeq ($(gcc4_1), yes)
     version_specific_cflags = ${CROSS_COMPILE_CFLAGS}
     version_specific_cflags_third_party = -Wno-non-virtual-dtor
     version_specific_java_cflags = -Wstrict-aliasing=0
   else
-    gcc_min_ver = $(shell ${CROSS_COMPILE}gcc -dumpversion | cut -f2 -d'.')
-    version_specific_cflags = $(shell if [ $(gcc_min_ver) -ge 6 ]; then echo '-Wno-psabi'; fi)
+    version_specific_cflags =
+    ifeq ($(CC), gcc)
+      gcc_min_ver = $(shell ${CROSS_COMPILE}gcc -dumpversion | cut -f2 -d'.')
+      gcc_ge_6 = $(shell if [ $(gcc_min_ver) -ge 6 ]; then echo 'yes'; fi)
+      ifeq ($(gcc_ge_6), yes)
+        version_specific_cflags = '-Wno-psabi'
+      endif
+    endif
     version_specific_cflags += ${CROSS_COMPILE_CFLAGS}
     version_specific_cflags_third_party =
     version_specific_java_cflags =
   endif
 
   version_specific_linkflags = ${CROSS_COMPILE_LINKFLAGS}
   version_specific_library_path = ${CROSS_COMPILE_LIBRARY_PATH}
   version_specific_includes = ${CROSS_COMPILE_INCLUDES}
 
   # Continuing with the non-Darwin settings...
   objdir = Build/Obj/$(osdir)/$(build_dir)/
-  compiler = ${CROSS_COMPILE}gcc -o $(objdir)
-  link = $(version_specific_library_path) ${CROSS_COMPILE}g++ $(platform_linkflags)
-  ar = $(version_specific_library_path) ${CROSS_COMPILE}ar rc $(objdir)
+  compiler = ${CROSS_COMPILE}$(CXX) -o $(objdir)
+  compiler_cc = ${CROSS_COMPILE}$(CC) -o $(objdir)
+  link = $(version_specific_library_path) ${CROSS_COMPILE}$(CXX) $(platform_linkflags)
+  ar = $(version_specific_library_path) ${CROSS_COMPILE}$(AR) rc $(objdir)
 endif
 
 ifeq ($(platform), FreeBSD)
     platform_cflags = $(version_specific_cflags) -fPIC -DPLATFORM_FREEBSD
     platform_linkflags = $(version_specific_linkflags) -pthread
     linkopts_ohNet = -Wl,-soname,libohNet.so
     osbuilddir = Posix
     objdir = Build/Obj/$(osbuilddir)/$(build_dir)/
     osdir = Posix
     endian ?= LITTLE
@@ -351,53 +366,57 @@ $(info Building for system ${openhome_system} and architecture ${openhome_archit
 
 
 # Macros used by Common.mak
 native_only ?= no
 managed_only ?= no
 no_shared_objects ?= no
 endian ?= LITTLE
 cflags_base = $(CFLAGS) -fexceptions -Wall $(version_specific_cflags_third_party) -pipe -D_GNU_SOURCE -D_REENTRANT -DDEFINE_$(endian)_ENDIAN -DDEFINE_TRACE $(debug_specific_cflags) -fvisibility=hidden $(platform_cflags)
 cflags_third_party = $(cflags_base) -Wno-int-to-pointer-cast
 ifeq ($(nocpp11), yes)
-    cppflags = $(cflags_base) -Werror
+    cppflags = $(CPPFLAGS) $(cflags_base) -Werror
 else ifeq ($(platform),Mac)
-    cppflags = $(cflags_base) -std=c++11 -Werror
+    cppflags = $(CPPFLAGS) $(cflags_base) -std=c++11 -Werror
 else
-    cppflags = $(cflags_base) -std=c++0x -Werror
+    cppflags = $(CPPFLAGS) $(cflags_base) -std=c++0x -Werror
 endif
 cflags = $(cflags_base) -Werror
 inc_build = Build/Include
 includes = -IBuild/Include/ $(version_specific_includes)
 bundle_build = Build/Bundles
 mDNSdir = Build/mDNS
 osdir ?= Posix
 objext = o
 libprefix = lib
 libext = a
 sharedlibprefix = lib
-ifeq ($(MACHINE), Darwin)
-	sharedlibext = dylib
-	dllext = dylib
-else
-	sharedlibext = so
-	dllext = so
+ifneq ($(SKIP_DETECTION),1)
+	ifeq ($(MACHINE), Darwin)
+		sharedlibext = dylib
+		dllext = dylib
+	else
+		sharedlibext = so
+		dllext = so
+	endif
 endif
 exeext = elf
 linkoutput = -o
 dllprefix = lib
-ifeq ($(platform), iOS)
-	link_dll = $(toolroot)/clang++ -pthread -shared -stdlib=libc++ $(platform_linkflags)
-else ifeq ($(MACHINE), Darwin)
-	link_dll = $(version_specific_library_path) clang++ -pthread  $(platform_linkflags) -shared -stdlib=libc++
-else
-	CROSS_COMPILE_LIBGCC ?= -shared-libgcc
-	link_dll = $(version_specific_library_path) ${CROSS_COMPILE}g++ -pthread  $(platform_linkflags) -shared ${CROSS_COMPILE_LIBGCC}
+ifneq ($(SKIP_DETECTION),1)
+	ifeq ($(platform), iOS)
+		link_dll = $(toolroot)/clang++ -pthread -shared -stdlib=libc++ $(platform_linkflags)
+	else ifeq ($(MACHINE), Darwin)
+		link_dll = $(version_specific_library_path) clang++ -pthread  $(platform_linkflags) -shared -stdlib=libc++
+	else
+		CROSS_COMPILE_LIBGCC ?= -shared-libgcc
+		link_dll = $(version_specific_library_path) ${CROSS_COMPILE}$(CXX) -pthread  $(platform_linkflags) -shared ${CROSS_COMPILE_LIBGCC}
+	endif
 endif
 
 csharp = mcs /nologo $(debug_csharp)
 
 csharpdefines ?=
 publicjavadir = OpenHome/Net/Bindings/Java/
 
 ifeq ($(platform), Mac)
 	platform_java_cflags = -Wno-self-assign
 	# arm64 builds need JAVA_HOME to be set because the Mac SDK for arm64 doesn't contain Java includes or dylibs
@@ -409,24 +428,24 @@ ifeq ($(platform), Mac)
 		link_jvm = ${MACOSX_SDK}/System/Library/Frameworks/JavaVM.framework/JavaVM
 	endif
 	javac = /usr/bin/javac
 	jar = /usr/bin/jar
 else
 	platform_java_cflags =
 	includes_jni = -I$(JAVA_HOME)/include -I$(JAVA_HOME)/include/linux
         ifeq ($(platform), Linux-ppc32)
             libjvm_dir ?= $(JAVA_HOME)/jre/lib/ppc/server
         else
-            ifneq (,$(findstring arm,$(gcc_machine)))
+            ifneq (,$(findstring arm,$(cc_machine)))
                 libjvm_dir ?= $(JAVA_HOME)/jre/lib/arm/server
             else
-                ifneq (,$(findstring x64,$(gcc_machine)))
+                ifneq (,$(findstring x64,$(cc_machine)))
                     libjvm_dir ?= $(JAVA_HOME)/jre/lib/amd64/server
                 else
                     libjvm_dir ?= $(JAVA_HOME)/jre/lib/i386/server
                 endif
             endif
         endif
 	link_jvm = $(libjvm_dir)/libjvm.so
 	javac = $(JAVA_HOME)/bin/javac
 	jar = $(JAVA_HOME)/bin/jar
 endif
@@ -593,21 +612,21 @@ patch_thirdparty_sources:
 	$(cp) thirdparty/mDNSResponder-1310.80.1/mDNSCore/*.patch $(mDNSdir)
 	$(cp) thirdparty/mDNSResponder-1310.80.1/mDNSShared/*.patch $(mDNSdir)
 
 	$(cp) thirdparty/mDNSResponder-1310.80.1/mDNSShared/dnssd_clientshim.c $(mDNSdir)
 	$(cp) thirdparty/mDNSResponder-1310.80.1/mDNSShared/dnssd_clientlib.c $(mDNSdir)
 	$(cp) thirdparty/mDNSResponder-1310.80.1/mDNSShared/dns_sd.h $(mDNSdir)
 	$(cp) thirdparty/mDNSResponder-1310.80.1/mDNSShared/dns_sd_internal.h $(mDNSdir)
 	$(cp) thirdparty/mDNSResponder-1310.80.1/mDNSShared/dns_sd_private.h $(mDNSdir)
 	$(cp) thirdparty/mDNSResponder-1310.80.1/mDNSShared/mDNSFeatures.h $(mDNSdir)
 
-	for i in $(mDNSdir)/*.patch; do python thirdparty/python_patch/patch.py $$i; done
+	for i in $(mDNSdir)/*.patch; do $(PYTHON) thirdparty/python_patch/patch.py $$i; done
 
 	$(cp) $(mDNSdir)/*.h $(inc_build)/OpenHome/Net/Private
 
 install : install-pkgconf install-libs install-includes
 
 uninstall : uninstall-pkgconf uninstall-libs uninstall-includes
 
 install-pkgconf : tt
 	@echo "ERROR: no support for (un)install-pckconf yet"
 	#@echo "see http://www.mono-project.com/Guidelines:Application_Deployment for an example of how to implement this"
@@ -648,25 +667,25 @@ docs:
 	doxygen DoxyfileCppStd
 	$(mkdir) Build/Docs/Cs
 	doxygen DoxyfileCs
 	$(mkdir) Build/Docs/Java
 	doxygen DoxyfileJava
 	$(mkdir) Build/Docs/Js
 	perl ./JsDoc/jsdoc.pl -d Build/Docs/Js OpenHome/Net/Bindings/Js/ControlPoint OpenHome/Net/Bindings/Js/ControlPoint/Proxies
 
 bundle-after-build: $(build_targets)
 	$(mkdir) $(bundle_build)
-	python bundle_binaries.py --system $(openhome_system) --architecture $(openhome_architecture) --configuration $(openhome_configuration)
+	$(PYTHON) bundle_binaries.py --system $(openhome_system) --architecture $(openhome_architecture) --configuration $(openhome_configuration)
 
 bundle:
 	$(mkdir) $(bundle_build)
-	python bundle_binaries.py --system $(openhome_system) --architecture $(openhome_architecture) --configuration $(openhome_configuration)
+	$(PYTHON) bundle_binaries.py --system $(openhome_system) --architecture $(openhome_architecture) --configuration $(openhome_configuration)
 
 ifeq ($(platform),iOS)
 ohNet.net.dll :  $(objdir)ohNet.net.dll
 ohNetDll :
 else ifeq ($(platform),Android)
 ohNet.net.dll : $(objdir)ohNet.net.dll ohNetAndroidNative
 ohNetDll : ohNetDllImpl
 else
 ohNet.net.dll :  $(objdir)ohNet.net.dll ohNetDll
 ohNetDll : ohNetDllImpl
