diff --git a/CMakeLists.txt b/CMakeLists.txt
index f06b25f..1f6bd0f 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -4,7 +4,7 @@
 # Copyright (c) 2012 Louis Dionne
 #
 cmake_minimum_required(VERSION 3.0)
-set (CMAKE_CXX_STANDARD 11) # for constexpr specifier and other goodies
+# set (CMAKE_CXX_STANDARD 11) # for constexpr specifier and other goodies
 
 if (NOT CMAKE_BUILD_TYPE)
 		message(STATUS "No build type selected, default to Release")
@@ -62,7 +62,7 @@ if( SUPPORT_SSE42 )
     MESSAGE( STATUS "SSE 4.2 support detected" )
 else()
     if (SUPPORT_NEON)
-        include("${CMAKE_MODULE_PATH}/simde.cmake")
+        find_package(simde REQUIRED CONFIG)
         MESSAGE(STATUS "USING SIMDE FOR SIMD OPERATIONS")
     else ()
         MESSAGE(STATUS "SIMDE and SSE 4.2 support not detected")
@@ -103,6 +103,10 @@ elseif(WIN32)
     if(NOT MSVC12)
          message(STATUS "On Windows, only MSVC version 12 is supported!")
     endif()
+    set (CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /arch:AVX")
+    set (CMAKE_CXX_FLAGS_DEBUG   "${CMAKE_CXX_FLAGS_DEBUG} /arch:AVX")
+    set (CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} /arch:AVX")
+    set (CMAKE_C_FLAGS_DEBUG   "${CMAKE_C_FLAGS_DEBUG} /arch:AVX")
 else ()
     message(FATAL_ERROR "Please, use GCC, Clang, or the Intel compiler!")
 endif()
@@ -129,19 +133,19 @@ add_library(FastPFOR STATIC
     src/streamvbyte.c)
 set_target_properties(FastPFOR PROPERTIES POSITION_INDEPENDENT_CODE TRUE)
 
-
+if(0)
 # other executables
 add_executable(gapstats src/gapstats.cpp)
 add_executable(partitionbylength src/partitionbylength.cpp)
 add_executable(csv2maropu src/csv2maropu.cpp)
-
+endif()
 if (SUPPORT_NEON)
-    target_link_libraries(FastPFOR PUBLIC simde)
-    target_link_libraries(gapstats PUBLIC simde)
-    target_link_libraries(partitionbylength PUBLIC simde)
-    target_link_libraries(csv2maropu PUBLIC simde)
+    target_link_libraries(FastPFOR PUBLIC simde::simde)
+    # target_link_libraries(gapstats PUBLIC simde::simde)
+    # target_link_libraries(partitionbylength PUBLIC simde::simde)
+    # target_link_libraries(csv2maropu PUBLIC simde::simde)
 endif()
-
+if(0)
 add_executable(entropy src/entropy.cpp)
 target_link_libraries(entropy FastPFOR)
 
@@ -149,7 +153,7 @@ if( SUPPORT_SSE42 )
     add_executable(benchbitpacking src/benchbitpacking.cpp)
     target_link_libraries(benchbitpacking FastPFOR)
 endif()
-
+endif()
 find_package(snappy)
 if(NOT ${snappy_FOUND})
     message(STATUS "Snappy was not found. codecssnappy and "
@@ -158,6 +162,7 @@ else()
     message(STATUS "Snappy was found. Building additional targets "
                    "codecssnappy and inmemorybenchmarksnappy.")
     include_directories(${snappy_INCLUDE_DIRS})
+    if(0)
     add_executable(codecssnappy src/codecs.cpp)
     set_target_properties(codecssnappy PROPERTIES DEFINE_SYMBOL USESNAPPY)
     target_link_libraries(codecssnappy FastPFOR ${snappy_LIBRARIES})
@@ -165,6 +170,7 @@ else()
     add_executable(inmemorybenchmarksnappy src/inmemorybenchmark.cpp)
     set_target_properties(inmemorybenchmarksnappy PROPERTIES DEFINE_SYMBOL USESNAPPY)
     target_link_libraries(inmemorybenchmarksnappy FastPFOR ${snappy_LIBRARIES})
+    endif()
 endif()
 
 option(WITH_TEST "Build with Google Test" ON)
