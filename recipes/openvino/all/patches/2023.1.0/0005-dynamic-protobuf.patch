diff --git a/cmake/developer_package/frontends/frontends.cmake b/cmake/developer_package/frontends/frontends.cmake
index df3586474b..8e50b25ea3 100644
--- a/cmake/developer_package/frontends/frontends.cmake
+++ b/cmake/developer_package/frontends/frontends.cmake
@@ -130,6 +130,10 @@ macro(ov_add_frontend)
     foreach(INFILE IN LISTS proto_files)
         get_filename_component(FILE_DIR ${INFILE} DIRECTORY)
         get_filename_component(FILE_WE ${INFILE} NAME_WE)
+        if(FILE_WE MATCHES "^(any|wrappers)$")
+            # we need to skip standard protobuf files
+            continue()
+        endif()
         set(OUTPUT_PB_SRC ${CMAKE_CURRENT_BINARY_DIR}/${FILE_WE}.pb.cc)
         set(OUTPUT_PB_HEADER ${CMAKE_CURRENT_BINARY_DIR}/${FILE_WE}.pb.h)
         set(GENERATED_PROTO ${INFILE})
diff --git a/src/frontends/common/src/manager.cpp b/src/frontends/common/src/manager.cpp
index 2fa59398b1..6194fca758 100644
--- a/src/frontends/common/src/manager.cpp
+++ b/src/frontends/common/src/manager.cpp
@@ -20,11 +20,6 @@ class FrontEndManager::Impl {
     std::mutex m_loading_mutex;
     std::vector<PluginInfo> m_plugins;
 
-    /// \brief map of shared object per frontend <frontend_name, frontend_so_ptr>
-    static std::unordered_map<std::string, std::shared_ptr<void>> m_shared_objects_map;
-    /// \brief Mutex to guard access the shared object map
-    static std::mutex m_shared_objects_map_mutex;
-
 public:
     Impl() {
         search_all_plugins();
@@ -36,10 +31,6 @@ public:
         auto fe_obj = std::make_shared<FrontEnd>();
         fe_obj->m_shared_object = std::make_shared<FrontEndSharedData>(plugin.get_so_pointer());
         fe_obj->m_actual = plugin.get_creator().m_creator();
-
-        std::lock_guard<std::mutex> guard(m_shared_objects_map_mutex);
-        m_shared_objects_map.emplace(plugin.get_creator().m_name, fe_obj->m_shared_object);
-
         return fe_obj;
     }
 
@@ -49,6 +40,7 @@ public:
             {"ir", "ir"},
             {"onnx", "onnx"},
             {"tf", "tensorflow"},
+            {"tflite", "tensorflow_lite"},
             {"paddle", "paddle"},
             {"pytorch", "pytorch"},
         };
@@ -127,8 +119,8 @@ public:
     }
 
     static void shutdown() {
-        std::lock_guard<std::mutex> guard(m_shared_objects_map_mutex);
-        m_shared_objects_map.clear();
+        std::lock_guard<std::mutex> guard(get_shared_objects_mutex());
+        get_shared_objects_map().clear();
     }
 
 private:
@@ -153,6 +145,7 @@ private:
             {".xml", {"ir", "ir"}},
             {".onnx", {"onnx", "onnx"}},
             {".pb", {"tf", "tensorflow"}},
+            {".pbtxt", {"tf", "tensorflow"}},
             {".tflite", {"tflite", "tensorflow_lite"}},
             {".pdmodel", {"paddle", "paddle"}},
             // {".ts", {"pytorch", "pytorch"}},
@@ -223,9 +216,6 @@ private:
     }
 };
 
-std::unordered_map<std::string, std::shared_ptr<void>> FrontEndManager::Impl::m_shared_objects_map{};
-std::mutex FrontEndManager::Impl::m_shared_objects_map_mutex{};
-
 FrontEndManager::FrontEndManager() : m_impl(new Impl()) {}
 
 FrontEndManager::FrontEndManager(FrontEndManager&&) noexcept = default;
diff --git a/src/frontends/common/src/plugin_loader.cpp b/src/frontends/common/src/plugin_loader.cpp
index a044152d8d..a98eff766b 100644
--- a/src/frontends/common/src/plugin_loader.cpp
+++ b/src/frontends/common/src/plugin_loader.cpp
@@ -16,17 +16,32 @@
 
 #include <sys/stat.h>
 
-#include <openvino/util/log.hpp>
 #include <string>
 #include <vector>
 
 #include "openvino/util/file_util.hpp"
+#include "openvino/util/log.hpp"
 #include "openvino/util/shared_object.hpp"
 #include "plugin_loader.hpp"
 
 using namespace ov;
 using namespace ov::frontend;
 
+// Note, static methods below are required to create an order of initialization of static variables
+// e.g. if users (not encouraged) created ov::Model globally, we need to ensure proper order of initialization
+
+/// \return map of shared object per frontend <frontend_name, frontend_so_ptr>
+std::unordered_map<std::string, std::shared_ptr<void>>& ov::frontend::get_shared_objects_map() {
+    static std::unordered_map<std::string, std::shared_ptr<void>> shared_objects_map;
+    return shared_objects_map;
+}
+
+/// \return Mutex to guard access the shared object map
+std::mutex& ov::frontend::get_shared_objects_mutex() {
+    static std::mutex shared_objects_map_mutex;
+    return shared_objects_map_mutex;
+}
+
 #ifdef OPENVINO_STATIC_LIBRARY
 
 #    include "ov_frontends.hpp"
@@ -131,6 +146,10 @@ bool PluginInfo::load() {
         m_load_failed = true;
         return false;
     }
+
+    std::lock_guard<std::mutex> guard(get_shared_objects_mutex());
+    get_shared_objects_map().emplace(get_creator().m_name, get_so_pointer());
+
     return true;
 }
 
diff --git a/src/frontends/common/src/plugin_loader.hpp b/src/frontends/common/src/plugin_loader.hpp
index 93e6a5cc2e..dccf8ddf7a 100644
--- a/src/frontends/common/src/plugin_loader.hpp
+++ b/src/frontends/common/src/plugin_loader.hpp
@@ -4,7 +4,12 @@
 
 #pragma once
 
-#include <openvino/frontend/manager.hpp>
+#include <memory>
+#include <mutex>
+#include <string>
+#include <unordered_map>
+
+#include "openvino/frontend/manager.hpp"
 
 #ifdef _WIN32
 static const char PathSeparator[] = ";";
@@ -15,6 +20,9 @@ static const char PathSeparator[] = ":";
 namespace ov {
 namespace frontend {
 
+std::unordered_map<std::string, std::shared_ptr<void>>& get_shared_objects_map();
+std::mutex& get_shared_objects_mutex();
+
 /// \brief Internal data structure holding by each frontend. Includes library handle and extensions.
 class FrontEndSharedData {
     friend inline void add_extension_to_shared_data(std::shared_ptr<void>& obj,
diff --git a/src/frontends/tensorflow/src/proto/meta_graph.proto b/src/frontends/tensorflow/src/proto/meta_graph.proto
index b6918fa853..c59c0680af 100644
--- a/src/frontends/tensorflow/src/proto/meta_graph.proto
+++ b/src/frontends/tensorflow/src/proto/meta_graph.proto
@@ -14,7 +14,7 @@ syntax = "proto3";
 
 package tensorflow;
 
-import "any.proto";
+import "google/protobuf/any.proto";
 import "graph.proto";
 import "op_def.proto";
 import "tensor_shape.proto";
diff --git a/src/frontends/tensorflow/src/proto/saved_object_graph.proto b/src/frontends/tensorflow/src/proto/saved_object_graph.proto
index 671441075c..3918a4a8d1 100644
--- a/src/frontends/tensorflow/src/proto/saved_object_graph.proto
+++ b/src/frontends/tensorflow/src/proto/saved_object_graph.proto
@@ -14,7 +14,7 @@ syntax = "proto3";
 
 package tensorflow;
 
-import "any.proto";
+import "google/protobuf/any.proto";
 import "tensor_shape.proto";
 import "types.proto";
 import "variable.proto";
diff --git a/src/frontends/tensorflow/src/proto/trackable_object_graph.proto b/src/frontends/tensorflow/src/proto/trackable_object_graph.proto
index f4a8e4da34..f0a9617432 100644
--- a/src/frontends/tensorflow/src/proto/trackable_object_graph.proto
+++ b/src/frontends/tensorflow/src/proto/trackable_object_graph.proto
@@ -14,7 +14,7 @@ syntax = "proto3";
 
 package tensorflow;
 
-import "wrappers.proto";
+import "google/protobuf/wrappers.proto";
 
 option cc_enable_arenas = true;
 option go_package = "github.com/tensorflow/tensorflow/tensorflow/go/core/protobuf/for_core_protos_go_proto";
diff --git a/thirdparty/dependencies.cmake b/thirdparty/dependencies.cmake
index 43e0ed671a..10042641e4 100644
--- a/thirdparty/dependencies.cmake
+++ b/thirdparty/dependencies.cmake
@@ -415,14 +415,14 @@ if(ENABLE_OV_PADDLE_FRONTEND OR ENABLE_OV_ONNX_FRONTEND OR ENABLE_OV_TF_FRONTEND
         if(CMAKE_VERBOSE_MAKEFILE)
             set(Protobuf_DEBUG ON)
         endif()
-        if(OV_VCPKG_BUILD)
-            set(protobuf_config CONFIG)
-        endif()
         # try to find newer version first (major is changed)
         # see https://protobuf.dev/support/version-support/ and
         # https://github.com/protocolbuffers/protobuf/commit/d61f75ff6db36b4f9c0765f131f8edc2f86310fa
-        find_package(Protobuf 4.22.0 QUIET ${protobuf_config})
+        find_package(Protobuf 4.22.0 QUIET CONFIG)
         if(NOT Protobuf_FOUND)
+            if(OV_VCPKG_BUILD)
+                set(protobuf_config CONFIG)
+            endif()
             # otherwise, fallback to existing default
             find_package(Protobuf 3.20.3 REQUIRED ${protobuf_config})
         endif()
