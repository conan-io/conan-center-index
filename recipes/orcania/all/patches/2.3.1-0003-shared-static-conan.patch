--- CMakeLists.txt
+++ CMakeLists.txt
@@ -112,29 +112,47 @@
 
 # static library
 
+option(BUILD_SHARED "Build shared library." ON)
 option(BUILD_STATIC "Build static library." OFF)
 
+if (NOT BUILD_STATIC AND NOT BUILD_SHARED)
+    message(FATAL_ERROR "BUILD_SHAREDand BUILD_STATIC cannot be both disabled")
+endif ()
+
 if (BUILD_STATIC)
     add_library(orcania_static STATIC ${LIB_SRC})
+    set_target_properties(orcania_static PROPERTIES
+            PUBLIC_HEADER "${INC_DIR}/orcania.h;${PROJECT_BINARY_DIR}/orcania-cfg.h")
     target_compile_definitions(orcania_static PUBLIC -DO_STATIC_LIBRARY)
     set_target_properties(orcania_static PROPERTIES
             OUTPUT_NAME orcania)
+    if (MSVC)
+        set_target_properties(orcania_static PROPERTIES
+                OUTPUT_NAME orcania-static)
+    endif ()
+    set(orcania_lib orcania_static)
 endif ()
 
 # shared library
 
-add_library(orcania SHARED ${LIB_SRC})
-if (NOT MSVC)
+if (BUILD_SHARED)
+    add_library(orcania SHARED ${LIB_SRC})
     set_target_properties(orcania PROPERTIES
-            COMPILE_OPTIONS -Wextra
-            PUBLIC_HEADER "${INC_DIR}/orcania.h;${PROJECT_BINARY_DIR}/orcania-cfg.h"
-            VERSION "${LIBRARY_VERSION}"
-            SOVERSION "${LIBRARY_SOVERSION}")
-endif()
-if (WIN32)
-    set_target_properties(orcania PROPERTIES SUFFIX "-${LIBRARY_VERSION_MAJOR}.dll")
+            PUBLIC_HEADER "${INC_DIR}/orcania.h;${PROJECT_BINARY_DIR}/orcania-cfg.h")
+    if (NOT MSVC)
+        set_target_properties(orcania PROPERTIES
+                COMPILE_OPTIONS -Wextra
+                VERSION "${LIBRARY_VERSION}"
+                SOVERSION "${LIBRARY_SOVERSION}")
+    endif()
+    if (WIN32)
+        set_target_properties(orcania PROPERTIES
+                    SUFFIX "-${LIBRARY_VERSION_MAJOR}.dll"
+                    WINDOWS_EXPORT_ALL_SYMBOLS TRUE)
+    endif ()
+    target_link_libraries(orcania ${LIBS})
+    set(orcania_lib orcania)
 endif ()
-target_link_libraries(orcania ${LIBS})
 
 # documentation
 
@@ -165,10 +183,14 @@
 if (BUILD_BASE64URL)
     add_executable(base64url ${BASE64URL_DIR}/base64url.c ${INC_DIR}/orcania.h ${PROJECT_BINARY_DIR}/orcania-cfg.h)
     set_target_properties(base64url PROPERTIES SKIP_BUILD_RPATH TRUE)
-    add_dependencies(base64url orcania)
-    target_link_libraries(base64url orcania ${LIBS})
+    add_dependencies(base64url ${orcania_lib})
+    target_link_libraries(base64url ${orcania_lib} ${LIBS})
     install(TARGETS base64url RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR})
     install(FILES ${BASE64URL_DIR}/base64url.1 DESTINATION ${CMAKE_INSTALL_MANDIR}/man1 COMPONENT runtime)
+    if(MSVC)
+        find_package(getopt-for-visual-studio REQUIRED)
+        target_link_libraries(base64url getopt-for-visual-studio::getopt-for-visual-studio)
+    endif()
 endif ()
 
 # tests
@@ -244,9 +266,12 @@
 install(FILES ${CMAKE_CURRENT_BINARY_DIR}/liborcania.pc
         DESTINATION ${CMAKE_INSTALL_LIBDIR}/pkgconfig)
 
-set(TARGETS orcania)
+set(TARGETS )
+if (BUILD_SHARED)
+    list(APPEND TARGETS orcania)
+endif ()
 if (BUILD_STATIC)
-    set(TARGETS ${TARGETS} orcania_static)
+    list(APPEND TARGETS orcania_static)
 endif ()
 
 if (INSTALL_HEADER)
@@ -320,6 +345,7 @@
         COMMAND ${CMAKE_MAKE_PROGRAM} package_source)
 
 message(STATUS "Force inline implementation of strstr: ${WITH_STRSTR}")
+message(STATUS "Build shared library:                  ${BUILD_SHARED}")
 message(STATUS "Build static library:                  ${BUILD_STATIC}")
 message(STATUS "Build testing tree:                    ${BUILD_ORCANIA_TESTING}")
 message(STATUS "Install the header files:              ${INSTALL_HEADER}")
--- src/orcania.c
+++ src/orcania.c
@@ -38,6 +38,13 @@
 #define strcasecmp _stricmp
 #endif
 
+#ifdef _MSC_VER
+#include <BaseTsd.h>
+typedef SSIZE_T ssize_t;
+#else
+#include <unistd.h>
+#endif
+
 /**
  * 
  * Orcania library
--- tools/base64url/base64url.c
+++ tools/base64url/base64url.c
@@ -19,13 +19,20 @@
  * 
  */
 
-#include <unistd.h>
 #include <stdio.h>
 #include <string.h>
 #include <getopt.h>
 #include <ctype.h>
 #include <orcania.h>
 
+#ifdef _MSC_VER
+#include <io.h>
+#include <BaseTsd.h>
+typedef SSIZE_T ssize_t;
+#else
+#include <unistd.h>
+#endif
+
 #define _BASE64URL_VERSION "0.9"
 
 #define ACTION_ENCODE 0
@@ -98,12 +105,12 @@
 }
 
 static unsigned char * get_stdin_content(size_t * length) {
-  int size = 100;
-  unsigned char * out = NULL, buffer[size];
+#define SIZE 100
+  unsigned char * out = NULL, buffer[SIZE];
   ssize_t read_length;
 
   *length = 0;
-  while ((read_length = read(0, buffer, size)) > 0) {
+  while ((read_length = read(0, buffer, SIZE)) > 0) {
     out = o_realloc(out, (*length)+read_length+1);
     memcpy(out+(*length), buffer, read_length);
     (*length) += read_length;
