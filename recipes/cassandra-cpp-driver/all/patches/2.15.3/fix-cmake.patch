 CMakeLists.txt                               |  55 ++-----
 src/CMakeLists.txt                           | 211 +++++++++++----------------
 src/third_party/curl/CMakeLists.txt          |  16 +-
 src/third_party/hdr_histogram/CMakeLists.txt |  15 +-
 src/third_party/http-parser/CMakeLists.txt   |  15 +-
 src/third_party/minizip/CMakeLists.txt       |  19 +--
 6 files changed, 114 insertions(+), 217 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index c6150948b..b2bee1aa7 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -1,5 +1,8 @@
 cmake_minimum_required(VERSION 2.8.12)
-project(cassandra C CXX)
+# project(cassandra C CXX)
+
+# include(${CMAKE_BINARY_DIR}/conanbuildinfo.cmake)
+# conan_basic_setup()
 
 set(CASS_ROOT_DIR ${CMAKE_CURRENT_SOURCE_DIR})
 set(CASS_SRC_DIR "${CASS_ROOT_DIR}/src")
@@ -27,61 +30,23 @@ endif()
 # Options
 #---------------
 
-option(CASS_BUILD_EXAMPLES "Build examples" OFF)
-option(CASS_BUILD_INTEGRATION_TESTS "Build integration tests" OFF)
-option(CASS_BUILD_SHARED "Build shared library" ON)
-option(CASS_BUILD_STATIC "Build static library" OFF)
-option(CASS_BUILD_TESTS "Build tests" OFF)
-option(CASS_BUILD_UNIT_TESTS "Build unit tests" OFF)
-option(CASS_DEBUG_CUSTOM_ALLOC "Debug custom allocator" OFF)
 option(CASS_INSTALL_HEADER "Install header file" ON)
 option(CASS_INSTALL_HEADER_IN_SUBDIR "Install header file under 'include/cassandra'" OFF)
-option(CASS_INSTALL_PKG_CONFIG "Install pkg-config file(s)" ON)
 option(CASS_MULTICORE_COMPILATION "Enable multicore compilation" ON)
 option(CASS_USE_BOOST_ATOMIC "Use Boost atomics library" OFF)
 option(CASS_USE_KERBEROS "Use Kerberos" OFF)
-option(CASS_USE_LIBSSH2 "Use libssh2 for integration tests" OFF)
 option(CASS_USE_OPENSSL "Use OpenSSL" ON)
-option(CASS_USE_STATIC_LIBS "Link static libraries when building executables" OFF)
 option(CASS_USE_STD_ATOMIC "Use C++11 atomics library" OFF)
 option(CASS_USE_ZLIB "Use zlib" ON)
 option(CASS_USE_TIMERFD "Use timerfd (Linux only)" ON)
 
-# Handle testing dependencies
-if(CASS_BUILD_TESTS)
-  # Enable integration and unit tests
-  set(CASS_BUILD_INTEGRATION_TESTS ON)
-  set(CASS_BUILD_UNIT_TESTS ON)
-endif()
-
-if(CASS_BUILD_INTEGRATION_TESTS OR CASS_BUILD_UNIT_TESTS)
-  set(CASS_USE_OPENSSL ON) # Required for tests
-  set(CASS_USE_KERBEROS ON) # Required for tests
-endif()
-
 # Determine which driver target should be used as a dependency
-set(PROJECT_LIB_NAME_TARGET cassandra)
-if(CASS_USE_STATIC_LIBS OR
-   (WIN32 AND (CASS_BUILD_INTEGRATION_TESTS OR CASS_BUILD_UNIT_TESTS)))
-  set(CASS_USE_STATIC_LIBS ON) # Not all driver internals are exported for test executable (e.g. CASS_EXPORT)
-  set(CASS_BUILD_STATIC ON)
-  set(PROJECT_LIB_NAME_TARGET cassandra_static)
-endif()
-
-# Ensure the driver is configured to build
-if(NOT CASS_BUILD_SHARED AND NOT CASS_BUILD_STATIC)
-  message(FATAL_ERROR "Driver is not Configured to Build: Ensure shared and/or static library is enabled")
-endif()
-
-if(CASS_DEBUG_CUSTOM_ALLOC AND CASS_USE_STATIC_LIBS)
-  message(WARNING "Debugging the custom allocator while static linking the library can cause your application to fail")
-endif()
+set(PROJECT_LIB_NAME_TARGET ${PROJECT_NAME})
 
 #------------------------
 # Dependencies
 #------------------------
 
-include(Dependencies)
 include(ClangFormat)
 
 #------------------------
@@ -222,10 +187,8 @@ endif()
 
 add_subdirectory(src)
 
-if(CASS_BUILD_EXAMPLES)
-  add_subdirectory(examples)
-endif()
+#------------------------
+# Install licenses
+#------------------------
 
-if(CASS_BUILD_INTEGRATION_TESTS OR CASS_BUILD_UNIT_TESTS)
-  add_subdirectory(tests)
-endif()
+install(FILES LICENSE.txt DESTINATION licenses)
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index 06b84b759..0c2f343ae 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -1,6 +1,41 @@
 include(CheckSymbolExists)
 include(CheckCXXSourceCompiles)
 
+#------------------------
+# Libuv
+#------------------------
+
+if(NOT WIN32)
+  set(CMAKE_THREAD_PREFER_PTHREAD 1)
+  set(THREADS_PREFER_PTHREAD_FLAG 1)
+endif()
+
+find_package(Threads REQUIRED)
+set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${CMAKE_THREAD_LIBS_INIT}")
+set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${CMAKE_THREAD_LIBS_INIT}")
+if(NOT WIN32 AND ${CMAKE_VERSION} VERSION_LESS "3.1.0")
+  # FindThreads in CMake versions < v3.1.0 do not have the THREADS_PREFER_PTHREAD_FLAG to prefer -pthread
+  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pthread")
+  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -pthread")
+endif()
+
+#------------------------
+# Boost
+#------------------------
+
+if(CASS_USE_BOOST_ATOMIC)
+  # Ensure Boost auto linking is disabled (defaults to auto linking on Windows)
+  if(WIN32)
+    add_definitions(-DBOOST_ALL_NO_LIB)
+  endif()
+
+  # Determine if additional Boost definitions are required for driver/executables
+  if(NOT WIN32)
+    # Handle explicit initialization warning in atomic/details/casts
+    add_definitions(-Wno-missing-field-initializers)
+  endif()
+endif()
+
 file(GLOB SOURCES *.cpp *.hpp)
 
 if(APPLE)
@@ -39,18 +74,24 @@ endif()
 add_subdirectory(third_party/curl)
 add_subdirectory(third_party/hdr_histogram)
 add_subdirectory(third_party/http-parser)
-add_subdirectory(third_party/minizip)
 add_subdirectory(third_party/sparsehash)
 
+if(CASS_USE_ZLIB)
+  add_subdirectory(third_party/minizip)
+endif()
+
 list(APPEND INCLUDE_DIRS 
   third_party/curl
   third_party/hdr_histogram
   third_party/http-parser
-  third_party/minizip
   third_party/mt19937_64
   third_party/rapidjson/rapidjson
   third_party/sparsehash/src)
 
+if(CASS_USE_ZLIB)
+  list(APPEND INCLUDE_DIRS third_party/minizip)
+endif()
+
 list(APPEND INCLUDE_DIRS ${CASS_INCLUDE_DIR} ${CMAKE_CURRENT_SOURCE_DIR})
 
 #------------------------------
@@ -121,83 +162,52 @@ configure_file(
   ${CASS_ROOT_DIR}/driver_config.hpp.in 
   ${CMAKE_CURRENT_SOURCE_DIR}/driver_config.hpp)
 
-
 #------------------------------
 # Targets
 #------------------------------
 
-if(CASS_BUILD_SHARED)
-  add_library(cassandra SHARED 
-    ${SOURCES}
-    $<TARGET_OBJECTS:curl_hostcheck>
-    $<TARGET_OBJECTS:hdr_histogram>
-    $<TARGET_OBJECTS:http-parser>
-    $<TARGET_OBJECTS:minizip>)
-  target_link_libraries(cassandra ${CASS_LIBS})
-  target_include_directories(cassandra PRIVATE ${INCLUDE_DIRS} ${CASS_INCLUDES})
-
-  set_target_properties(cassandra PROPERTIES OUTPUT_NAME cassandra)
-  set_target_properties(cassandra PROPERTIES VERSION ${PROJECT_VERSION_STRING} SOVERSION ${PROJECT_VERSION_MAJOR})
-  set_target_properties(cassandra PROPERTIES
-      COMPILE_PDB_NAME "cassandra"
-      COMPILE_PDB_OUTPUT_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}")
-  set_target_properties(cassandra PROPERTIES
-      ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}
-      LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}
-      RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})
-  set_target_properties(cassandra PROPERTIES FOLDER "Driver")
-
-  target_compile_definitions(cassandra PRIVATE CASS_BUILDING)
-
-  if(CASS_USE_BOOST_ATOMIC AND BOOST_LIBRARY_NAME)
-    add_dependencies(cassandra ${BOOST_LIBRARY_NAME})
-  endif()
-  if(LIBUV_LIBRARY_NAME)
-    add_dependencies(cassandra ${LIBUV_LIBRARY_NAME})
-  endif()
-  if(OPENSSL_LIBRARY_NAME)
-    add_dependencies(cassandra ${OPENSSL_LIBRARY_NAME})
-  endif()
-  if(ZLIB_LIBRARY_NAME)
-    add_dependencies(cassandra ${ZLIB_LIBRARY_NAME})
-  endif()
+add_library(${PROJECT_LIB_NAME_TARGET}
+  ${SOURCES}
+  $<TARGET_OBJECTS:curl_hostcheck>
+  $<TARGET_OBJECTS:hdr_histogram>
+  $<TARGET_OBJECTS:http-parser>)
+
+if(CASS_USE_ZLIB)
+  target_sources(${PROJECT_LIB_NAME_TARGET} PRIVATE $<TARGET_OBJECTS:minizip>)
 endif()
 
-if(CASS_BUILD_STATIC)
-  add_library(cassandra_static STATIC
-    ${SOURCES}
-    $<TARGET_OBJECTS:curl_hostcheck_static>
-    $<TARGET_OBJECTS:hdr_histogram_static>
-    $<TARGET_OBJECTS:http-parser_static>
-    $<TARGET_OBJECTS:minizip_static>)
-  target_link_libraries(cassandra_static ${CASS_LIBS})
-  target_include_directories(cassandra_static PRIVATE ${INCLUDE_DIRS} ${CASS_INCLUDES})
-
-  set_target_properties(cassandra_static PROPERTIES OUTPUT_NAME cassandra_static)
-  set_target_properties(cassandra_static PROPERTIES VERSION ${PROJECT_VERSION_STRING} SOVERSION ${PROJECT_VERSION_MAJOR})
-  set_target_properties(cassandra_static PROPERTIES
-      COMPILE_PDB_NAME "cassandra_static"
-      COMPILE_PDB_OUTPUT_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}")
-  set_target_properties(cassandra_static PROPERTIES
-      ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}
-      LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}
-      RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})
-  set_target_properties(cassandra_static PROPERTIES FOLDER "Driver")
-
-  target_compile_definitions(cassandra_static PRIVATE CASS_STATIC)
-
-  if(CASS_USE_BOOST_ATOMIC AND BOOST_LIBRARY_NAME)
-    add_dependencies(cassandra_static ${BOOST_LIBRARY_NAME})
-  endif()
-  if(LIBUV_LIBRARY_NAME)
-    add_dependencies(cassandra_static ${LIBUV_LIBRARY_NAME})
-  endif()
-  if(OPENSSL_LIBRARY_NAME)
-    add_dependencies(cassandra_static ${OPENSSL_LIBRARY_NAME})
-  endif()
-  if(ZLIB_LIBRARY_NAME)
-    add_dependencies(cassandra_static ${ZLIB_LIBRARY_NAME})
-  endif()
+conan_target_link_libraries(${PROJECT_LIB_NAME_TARGET})
+
+if(WIN32)
+ target_link_libraries(${PROJECT_LIB_NAME_TARGET}
+    iphlpapi
+    psapi
+    wsock32
+    crypt32
+    ws2_32
+    userenv
+    version)
+endif()
+  
+target_include_directories(${PROJECT_LIB_NAME_TARGET} PRIVATE 
+  ${INCLUDE_DIRS}
+)
+
+set_target_properties(${PROJECT_LIB_NAME_TARGET} PROPERTIES OUTPUT_NAME ${PROJECT_LIB_NAME_TARGET})
+set_target_properties(${PROJECT_LIB_NAME_TARGET} PROPERTIES VERSION ${PROJECT_VERSION_STRING} SOVERSION ${PROJECT_VERSION_MAJOR})
+set_target_properties(${PROJECT_LIB_NAME_TARGET} PROPERTIES
+  COMPILE_PDB_NAME "${PROJECT_LIB_NAME_TARGET}"
+  COMPILE_PDB_OUTPUT_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}")
+set_target_properties(${PROJECT_LIB_NAME_TARGET} PROPERTIES
+  ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}
+  LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}     RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})
+set_target_properties(${PROJECT_LIB_NAME_TARGET} PROPERTIES FOLDER "Driver")
+
+get_target_property(target_type ${PROJECT_LIB_NAME_TARGET} TYPE)
+if (target_type STREQUAL "SHARED_LIBRARY")
+  target_compile_definitions(${PROJECT_LIB_NAME_TARGET} PRIVATE CASS_BUILDING)
+elseif(target_type STREQUAL "STATIC_LIBRARY")
+  target_compile_definitions(${PROJECT_LIB_NAME_TARGET} PRIVATE CASS_STATIC)
 endif()
 
 #-------------------------------------
@@ -240,62 +250,17 @@ else()
   set(INSTALL_HEADER_DIR "include")
 endif()
 
-if(CASS_INSTALL_PKG_CONFIG)
-  if(NOT WIN32)
-    find_package(PkgConfig)
-    if(PKG_CONFIG_FOUND)
-      set(prefix ${CMAKE_INSTALL_PREFIX})
-      set(exec_prefix ${CMAKE_INSTALL_PREFIX})
-      set(libdir ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR})
-      set(includedir ${CMAKE_INSTALL_PREFIX}/${INSTALL_HEADER_DIR})
-      set(version ${PROJECT_VERSION_STRING})
-    endif()
-  endif()
-endif()
-
 # Determine if the header should be installed
 if(CASS_INSTALL_HEADER)
   file(GLOB CASS_API_HEADER_FILES ${CASS_INCLUDE_DIR}/*.h)
   install(FILES ${CASS_API_HEADER_FILES} DESTINATION ${INSTALL_HEADER_DIR})
 endif()
 
-# Install the dynamic/shared library
-if(CASS_BUILD_SHARED)
-  install(TARGETS cassandra
-    RUNTIME DESTINATION ${INSTALL_DLL_EXE_DIR}  # for dll/executable/pdb files
-    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}  # for shared library
-    ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}) # for static library
-  if(CASS_INSTALL_PKG_CONFIG)
-    if(NOT WIN32)
-      if(PKG_CONFIG_FOUND)
-        configure_file("${PROJECT_SOURCE_DIR}/packaging/cassandra.pc.in" "cassandra.pc" @ONLY)
-        install(FILES "${CMAKE_CURRENT_BINARY_DIR}/cassandra.pc"
-          DESTINATION "${CMAKE_INSTALL_LIBDIR}/pkgconfig")
-      endif()
-    endif()
-  endif()
-  if(WIN32)
-    install(FILES $<TARGET_PDB_FILE:cassandra>
-      DESTINATION "${INSTALL_DLL_EXE_DIR}"
-      OPTIONAL)
-  endif()
-endif()
-
-if(CASS_BUILD_STATIC)
-  install(TARGETS cassandra_static
-    RUNTIME DESTINATION ${INSTALL_DLL_EXE_DIR}  # for dll/executable/pdb files
-    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}  # for shared library
-    ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}) # for static library
-  if(CASS_INSTALL_PKG_CONFIG)
-    if(NOT WIN32)
-      if(PKG_CONFIG_FOUND)
-        configure_file("${PROJECT_SOURCE_DIR}/packaging/cassandra_static.pc.in" "cassandra_static.pc" @ONLY)
-        install(FILES "${CMAKE_CURRENT_BINARY_DIR}/cassandra_static.pc"
-          DESTINATION "${CMAKE_INSTALL_LIBDIR}/pkgconfig")
-      endif()
-    endif()
-  endif()
-endif()
+# Install the library
+install(TARGETS ${PROJECT_LIB_NAME_TARGET}
+  RUNTIME DESTINATION ${INSTALL_DLL_EXE_DIR}  # for dll/executable/pdb files
+  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}  # for shared library
+  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}) # for static library
 
 #-------------------
 # Uninstall target
diff --git a/src/third_party/curl/CMakeLists.txt b/src/third_party/curl/CMakeLists.txt
index 63f391752..8c00dd203 100644
--- a/src/third_party/curl/CMakeLists.txt
+++ b/src/third_party/curl/CMakeLists.txt
@@ -3,16 +3,8 @@ file(GLOB SOURCES *.cpp *.hpp)
 source_group("Source Files\\" REGULAR_EXPRESSION ".*\\.c(pp)?")
 source_group("Header Files\\" REGULAR_EXPRESSION ".*\\.h(pp)?")
 
-if(CASS_BUILD_SHARED)
-  add_library(curl_hostcheck OBJECT ${SOURCES})
-  set_target_properties(curl_hostcheck PROPERTIES 
-    POSITION_INDEPENDENT_CODE ON 
-    FOLDER "Driver/Dependencies")
-endif()
-
-if(CASS_BUILD_STATIC)
-  add_library(curl_hostcheck_static OBJECT ${SOURCES})
-  set_target_properties(curl_hostcheck_static PROPERTIES 
-    FOLDER "Driver/Dependencies")
-endif()
+add_library(curl_hostcheck OBJECT ${SOURCES})
+set_target_properties(curl_hostcheck PROPERTIES 
+  POSITION_INDEPENDENT_CODE ON 
+  FOLDER "Driver/Dependencies")
 
diff --git a/src/third_party/hdr_histogram/CMakeLists.txt b/src/third_party/hdr_histogram/CMakeLists.txt
index 41e4bab5b..890df4e4b 100644
--- a/src/third_party/hdr_histogram/CMakeLists.txt
+++ b/src/third_party/hdr_histogram/CMakeLists.txt
@@ -3,15 +3,8 @@ file(GLOB SOURCES *.cpp *.hpp)
 source_group("Source Files\\" REGULAR_EXPRESSION ".*\\.c(pp)?")
 source_group("Header Files\\" REGULAR_EXPRESSION ".*\\.h(pp)?")
 
-if(CASS_BUILD_SHARED)
-  add_library(hdr_histogram OBJECT ${SOURCES})
-  set_target_properties(hdr_histogram PROPERTIES 
-    POSITION_INDEPENDENT_CODE ON
-    FOLDER "Driver/Dependencies")
-endif()
+add_library(hdr_histogram OBJECT ${SOURCES})
+set_target_properties(hdr_histogram PROPERTIES 
+  POSITION_INDEPENDENT_CODE ON
+  FOLDER "Driver/Dependencies")
 
-if(CASS_BUILD_STATIC)
-  add_library(hdr_histogram_static OBJECT ${SOURCES})
-  set_target_properties(hdr_histogram_static PROPERTIES 
-    FOLDER "Driver/Dependencies")
-endif()
diff --git a/src/third_party/http-parser/CMakeLists.txt b/src/third_party/http-parser/CMakeLists.txt
index 8b9f8dc8e..91ef87798 100644
--- a/src/third_party/http-parser/CMakeLists.txt
+++ b/src/third_party/http-parser/CMakeLists.txt
@@ -3,15 +3,8 @@ file(GLOB SOURCES http_parser.c http_parser.h)
 source_group("Source Files\\" REGULAR_EXPRESSION ".*\\.c(pp)?")
 source_group("Header Files\\" REGULAR_EXPRESSION ".*\\.h(pp)?")
 
-if(CASS_BUILD_SHARED)
-  add_library(http-parser OBJECT ${SOURCES})
-  set_target_properties(http-parser PROPERTIES 
-    POSITION_INDEPENDENT_CODE ON
-    FOLDER "Driver/Dependencies")
-endif()
+add_library(http-parser OBJECT ${SOURCES})
+set_target_properties(http-parser PROPERTIES 
+  POSITION_INDEPENDENT_CODE ON
+  FOLDER "Driver/Dependencies")
 
-if(CASS_BUILD_STATIC)
-  add_library(http-parser_static OBJECT ${SOURCES})
-  set_target_properties(http-parser_static PROPERTIES 
-    FOLDER "Driver/Dependencies")
-endif()
diff --git a/src/third_party/minizip/CMakeLists.txt b/src/third_party/minizip/CMakeLists.txt
index 569bf91f6..b2e189360 100644
--- a/src/third_party/minizip/CMakeLists.txt
+++ b/src/third_party/minizip/CMakeLists.txt
@@ -3,17 +3,8 @@ file(GLOB SOURCES ioapi.c unzip.c crypt.h ioapi.h unzip.h)
 source_group("Source Files\\" REGULAR_EXPRESSION ".*\\.c(pp)?")
 source_group("Header Files\\" REGULAR_EXPRESSION ".*\\.h(pp)?")
 
-if(CASS_BUILD_SHARED)
-  add_library(minizip OBJECT ${SOURCES})
-  target_include_directories(minizip PRIVATE ${ZLIB_INCLUDE_DIRS})
-  set_target_properties(minizip PROPERTIES 
-    POSITION_INDEPENDENT_CODE ON
-    FOLDER "Driver/Dependencies")
-endif()
-
-if(CASS_BUILD_STATIC)
-  add_library(minizip_static OBJECT ${SOURCES})
-  target_include_directories(minizip_static PRIVATE ${ZLIB_INCLUDE_DIRS})
-  set_target_properties(minizip_static PROPERTIES 
-    FOLDER "Driver/Dependencies")
-endif()
+add_library(minizip OBJECT ${SOURCES})
+target_include_directories(minizip PRIVATE ${ZLIB_INCLUDE_DIRS})
+set_target_properties(minizip PROPERTIES 
+  POSITION_INDEPENDENT_CODE ON
+  FOLDER "Driver/Dependencies")
\ No newline at end of file
