--- third_party/mini_chromium/mini_chromium/build/win_helper.py
+++ third_party/mini_chromium/mini_chromium/build/win_helper.py
@@ -4,7 +4,10 @@
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
 
-import _winreg
+try:
+    import _winreg
+except ImportError:
+    import winreg as _winreg
 import os
 import re
 import subprocess
@@ -62,7 +65,7 @@
   CreateProcess() documentation for more details."""
   block = ''
   nul = '\0'
-  for key, value in envvar_dict.iteritems():
+  for key, value in envvar_dict.items():
     block += key + '=' + value + nul
   block += nul
   return block
@@ -81,7 +84,7 @@
   archs = ('x86', 'amd64', 'arm64')
   result = []
   for arch in archs:
-    # Extract environment variables for subprocesses.
+    sys.stderr.write("install_dir {} script_path {}".format(install_dir, script_path))
     args = [os.path.join(install_dir, script_path)]
     script_arch_name = arch
     if script_path.endswith('SetEnv.cmd') and arch == 'amd64':
@@ -94,12 +97,12 @@
     variables, _ = popen.communicate()
     if popen.returncode != 0:
       raise Exception('"%s" failed with error %d' % (args, popen.returncode))
-    env = _ExtractImportantEnvironment(variables)
+    env = _ExtractImportantEnvironment(variables.decode())
 
     env_block = _FormatAsEnvironmentBlock(env)
     basename = 'environment.' + arch
     with open(os.path.join(out_dir, basename), 'wb') as f:
-      f.write(env_block)
+      f.write(env_block.encode())
     result.append(basename)
   return result
 
@@ -139,10 +142,10 @@
     link = subprocess.Popen(args, env=env, shell=True, stdout=subprocess.PIPE)
     out, _ = link.communicate()
     for line in out.splitlines():
-      if (not line.startswith('   Creating library ') and
-          not line.startswith('Generating code') and
-          not line.startswith('Finished generating code')):
-        print line
+      if (not line.startswith(b'   Creating library ') and
+          not line.startswith(b'Generating code') and
+          not line.startswith(b'Finished generating code')):
+        print(line)
     return link.returncode
 
   def ExecAsmWrapper(self, arch, *args):
@@ -152,11 +155,11 @@
                              stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
     out, _ = popen.communicate()
     for line in out.splitlines():
-      if (not line.startswith('Copyright (C) Microsoft Corporation') and
-          not line.startswith('Microsoft (R) Macro Assembler') and
-          not line.startswith(' Assembling: ') and
+      if (not line.startswith(b'Copyright (C) Microsoft Corporation') and
+          not line.startswith(b'Microsoft (R) Macro Assembler') and
+          not line.startswith(b' Assembling: ') and
           line):
-        print line
+        print(line)
     return popen.returncode
 
   def ExecGetVisualStudioData(self, outdir, toolchain_path):
@@ -178,7 +181,7 @@
           'Microsoft Visual Studio', 'Installer', 'vswhere.exe')
       if os.path.exists(vswhere_path):
         installation_path = subprocess.check_output(
-            [vswhere_path, '-latest', '-property', 'installationPath']).strip()
+            [vswhere_path, '-latest', '-property', 'installationPath']).strip().decode()
         if installation_path:
           return (installation_path,
                   os.path.join('VC', 'Auxiliary', 'Build', 'vcvarsall.bat'))
@@ -207,7 +210,7 @@
 x86_environment_file = "%s"
 x64_environment_file = "%s"
 arm64_environment_file = "%s"''' % (install_dir, x86_file, x64_file, arm64_file)
-    print result
+    print(result)
     return 0
 
   def ExecStamp(self, path):
