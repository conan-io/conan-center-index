import pprint

from conan import ConanFile
from conan.tools.cmake import CMake, cmake_layout, CMakeToolchain
from conan.tools.env import VirtualBuildEnv


class TestPackageConan(ConanFile):
    settings = "os", "arch", "compiler", "build_type"
    generators = "CMakeDeps"

    def build_requirements(self):
        self.tool_requires(self.tested_reference_str)

    def layout(self):
        cmake_layout(self)

    def generate(self):
        if str(self.settings.os) != "Windows":
            virtual_build_env = VirtualBuildEnv(self)
            virtual_build_env.generate()

        tc = CMakeToolchain(self)

        tc.variables["CMAKE_TRY_COMPILE_TARGET_TYPE"] = "STATIC_LIBRARY"
        tc.blocks["arch_flags"].values = {
            "arch_flag": "-mthumb -mfloat-abi=hard -march=armv7e-m+fp -mtune=cortex-m4"
        }

        pp = pprint.PrettyPrinter(indent=4)
        pp.pprint(tc.blocks["generic_system"].values)

        tc.blocks["generic_system"].values = {
            'cmake_sysroot': None,
            'cmake_system_name': "Generic",
            'cmake_system_processor': "ARM",
            'cmake_system_version': None,
            'generator_platform': None,
            'toolset': None
        }

        pp.pprint(tc.blocks["generic_system"].values)
        print("=================================================")

        tc.variables[
            "CMAKE_EXE_LINKER_FLAGS_INIT"
        ] = "${{CMAKE_EXE_LINKER_FLAGS_INIT}} -specs=nano.specs -specs=nosys.specs"

        tc.generate()

    def build(self):
        if str(self.settings.os) != "Windows":
            cmake = CMake(self)
            cmake.configure()
            cmake.build()

    def test(self):
        # Executables generated by this toolchain will never work on a host
        # machine and thus can never be executed.
        pass
