diff --git a/CMakeLists.txt b/CMakeLists.txt
index a8a67e8..358703f 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -140,10 +140,10 @@ if(USE_ARC4)
 endif()
 
 if(USE_LZMA)
-	find_package(LZMA REQUIRED)
-	list(APPEND LIBRARIES ${LZMA_LIBRARIES})
-	include_directories(SYSTEM ${LZMA_INCLUDE_DIR})
-	add_definitions(${LZMA_DEFINITIONS})
+	find_package(LibLZMA REQUIRED)
+	list(APPEND LIBRARIES ${LibLZMA_LIBRARIES})
+	include_directories(SYSTEM ${LibLZMA_INCLUDE_DIR})
+	add_definitions(${LibLZMA_DEFINITIONS})
 	set(INNOEXTRACT_HAVE_LZMA 1)
 else()
 	message(WARNING "\nDisabling LZMA decompression support.\n"
diff --git a/cmake/FindLZMA.cmake b/cmake/FindLZMA.cmake
deleted file mode 100644
index 6cfa78d..0000000
--- a/cmake/FindLZMA.cmake
+++ /dev/null
@@ -1,91 +0,0 @@
-
-# Copyright (C) 2011-2019 Daniel Scharrer
-#
-# This software is provided 'as-is', without any express or implied
-# warranty.  In no event will the author(s) be held liable for any damages
-# arising from the use of this software.
-#
-# Permission is granted to anyone to use this software for any purpose,
-# including commercial applications, and to alter it and redistribute it
-# freely, subject to the following restrictions:
-#
-# 1. The origin of this software must not be misrepresented; you must not
-#    claim that you wrote the original software. If you use this software
-#    in a product, an acknowledgment in the product documentation would be
-#    appreciated but is not required.
-# 2. Altered source versions must be plainly marked as such, and must not be
-#    misrepresented as being the original software.
-# 3. This notice may not be removed or altered from any source distribution.
-
-# Try to find the LZMA library and include path for lzma.h from xz-utils.
-# Once done this will define
-#
-# LZMA_FOUND
-# LZMA_INCLUDE_DIR   Where to find lzma.h
-# LZMA_LIBRARIES     The liblzma library
-# LZMA_DEFINITIONS   Definitions to use when compiling code that uses liblzma
-#
-# Typical usage could be something like:
-#   find_package(LZMA REQUIRED)
-#   include_directories(SYSTEM ${LZMA_INCLUDE_DIR})
-#   add_definitions(${LZMA_DEFINITIONS})
-#   ...
-#   target_link_libraries(myexe ${LZMA_LIBRARIES})
-#
-# The following additional options can be defined before the find_package() call:
-# LZMA_USE_STATIC_LIBS  Statically link against liblzma (default: OFF)
-
-if(UNIX)
-	find_package(PkgConfig QUIET)
-	pkg_check_modules(_PC_LZMA liblzma)
-endif()
-
-include(UseStaticLibs)
-
-foreach(static IN ITEMS 1 0)
-	
-	if(static)
-		use_static_libs(LZMA _PC_LZMA)
-	endif()
-	
-	find_path(LZMA_INCLUDE_DIR lzma.h
-		HINTS
-			${_PC_LZMA_INCLUDE_DIRS}
-		DOC "The directory where lzma.h resides"
-	)
-	mark_as_advanced(LZMA_INCLUDE_DIR)
-	
-	# Prefer libraries in the same prefix as the include files
-	string(REGEX REPLACE "(.*)/include/?" "\\1" LZMA_BASE_DIR ${LZMA_INCLUDE_DIR})
-	
-	find_library(LZMA_LIBRARY lzma liblzma
-		HINTS
-			${_PC_LZMA_LIBRARY_DIRS}
-			"${LZMA_BASE_DIR}/lib"
-		DOC "The LZMA library"
-	)
-	mark_as_advanced(LZMA_LIBRARY)
-	
-	if(static)
-		use_static_libs_restore()
-	endif()
-	
-	if(LZMA_LIBRARY OR STRICT_USE)
-		break()
-	endif()
-	
-endforeach()
-
-set(LZMA_DEFINITIONS)
-if(WIN32 AND LZMA_USE_STATIC_LIBS)
-	set(LZMA_DEFINITIONS -DLZMA_API_STATIC)
-endif()
-
-# handle the QUIETLY and REQUIRED arguments and set LZMA_FOUND to TRUE if 
-# all listed variables are TRUE
-include(FindPackageHandleStandardArgs)
-find_package_handle_standard_args(LZMA DEFAULT_MSG LZMA_LIBRARY LZMA_INCLUDE_DIR)
-
-if(LZMA_FOUND)
-	set(LZMA_LIBRARIES ${LZMA_LIBRARY})
-endif(LZMA_FOUND)
diff --git a/cmake/Findiconv.cmake b/cmake/Findiconv.cmake
deleted file mode 100644
index 87e72a9..0000000
--- a/cmake/Findiconv.cmake
+++ /dev/null
@@ -1,102 +0,0 @@
-
-# Copyright (C) 2012-2019 Daniel Scharrer
-#
-# This software is provided 'as-is', without any express or implied
-# warranty.  In no event will the author(s) be held liable for any damages
-# arising from the use of this software.
-#
-# Permission is granted to anyone to use this software for any purpose,
-# including commercial applications, and to alter it and redistribute it
-# freely, subject to the following restrictions:
-#
-# 1. The origin of this software must not be misrepresented; you must not
-#    claim that you wrote the original software. If you use this software
-#    in a product, an acknowledgment in the product documentation would be
-#    appreciated but is not required.
-# 2. Altered source versions must be plainly marked as such, and must not be
-#    misrepresented as being the original software.
-# 3. This notice may not be removed or altered from any source distribution.
-
-# Try to find the iconv library and include path for iconv.h.
-# Once done this will define
-#
-# ICONV_FOUND
-# iconv_INCLUDE_DIR   Where to find iconv.h
-# iconv_LIBRARIES     The libiconv library or empty if none was found
-# iconv_DEFINITIONS   Definitions to use when compiling code that uses iconv
-#
-# An empty iconv_LIBRARIES is not an error as iconv is often included in the system libc.
-#
-# Typical usage could be something like:
-#   find_package(iconv REQUIRED)
-#   include_directories(SYSTEM ${iconv_INCLUDE_DIR})
-#   add_definitions(${iconv_DEFINITIONS})
-#   ...
-#   target_link_libraries(myexe ${iconv_LIBRARIES})
-#
-# The following additional options can be defined before the find_package() call:
-# iconv_USE_STATIC_LIBS  Statically link against libiconv (default: OFF)
-
-include(UseStaticLibs)
-
-foreach(static IN ITEMS 1 0)
-	
-	if(static)
-		use_static_libs(iconv)
-	endif()
-	
-	if(APPLE)
-		# Prefer local iconv.h location over the system iconv.h location as /opt/local/include
-		# may be added to the include path by other libraries, resulting in the #include
-		# statements finding the local copy while we will link agains the system lib.
-		# This way we always find both include file and library in /opt/local/ if there is one.
-		find_path(iconv_INCLUDE_DIR iconv.h
-			PATHS /opt/local/include
-			DOC "The directory where iconv.h resides"
-			NO_CMAKE_SYSTEM_PATH
-		)
-	endif(APPLE)
-	
-	find_path(iconv_INCLUDE_DIR iconv.h
-		PATHS /opt/local/include
-		DOC "The directory where iconv.h resides"
-	)
-	mark_as_advanced(iconv_INCLUDE_DIR)
-	
-	# Prefer libraries in the same prefix as the include files
-	string(REGEX REPLACE "(.*)/include/?" "\\1" iconv_BASE_DIR ${iconv_INCLUDE_DIR})
-	
-	find_library(iconv_LIBRARY iconv libiconv
-		HINTS "${iconv_BASE_DIR}/lib"
-		PATHS /opt/local/lib
-		DOC "The iconv library"
-	)
-	mark_as_advanced(iconv_LIBRARY)
-	
-	if(static)
-		use_static_libs_restore()
-	endif()
-	
-	if(iconv_LIBRARY OR STRICT_USE)
-		break()
-	endif()
-	
-endforeach()
-
-set(iconv_DEFINITIONS)
-if(WIN32 AND iconv_USE_STATIC_LIBS)
-	set(iconv_DEFINITIONS -DLIBICONV_STATIC -DUSING_STATIC_LIBICONV)
-endif()
-
-# handle the QUIETLY and REQUIRED arguments and set iconv_FOUND to TRUE if 
-# all listed variables are TRUE
-include(FindPackageHandleStandardArgs)
-find_package_handle_standard_args(iconv DEFAULT_MSG iconv_INCLUDE_DIR)
-
-# For some reason, find_package_... uppercases it's first argument. Nice!
-if(ICONV_FOUND)
-	set(iconv_LIBRARIES)
-	if(iconv_LIBRARY)
-		list(APPEND iconv_LIBRARIES ${iconv_LIBRARY})
-	endif()
-endif(ICONV_FOUND)
