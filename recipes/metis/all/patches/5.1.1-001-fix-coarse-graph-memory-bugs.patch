From 36262adecaa9720a4417a67124428061c367fd3f Mon Sep 17 00:00:00 2001
From: George Karypis <karypis@umn.edu>
Date: Fri, 27 Nov 2020 23:17:52 +0000
Subject: [PATCH] fixed a memory bug that appears when the coarser graph stayed
 the same size as the original graph

diff --git a/libmetis/coarsen.c b/libmetis/coarsen.c
--- a/libmetis/coarsen.c
+++ b/libmetis/coarsen.c
@@ -629,7 +629,7 @@
   idx_t *xadj, *vwgt, *adjncy, *adjwgt, *maxvwgt;
   idx_t *match, *cmap, *degrees, *perm, *tperm, *vec, *marker;
   idx_t mytwgt, xtwgt, ctwgt;
-  float bscore, score;
+  real_t bscore, score;
 
   WCOREPUSH;
 
@@ -817,6 +817,7 @@
   printf(" ]\n");
 }
 
+#if 0
 
 /*************************************************************************/
 /*! This function creates the coarser graph. It uses a simple hash-table 
@@ -1327,6 +1328,7 @@
   WCOREPOP;
 }
 
+#endif
 
 /*************************************************************************/
 /*! This function creates the coarser graph. Depending on the size of the
@@ -1340,11 +1342,11 @@
   idx_t j, jj, k, kk, l, m, istart, iend, nvtxs, nedges, ncon, 
         cnedges, v, u, mask;
   idx_t *xadj, *vwgt, *vsize, *adjncy, *adjwgt;
-  idx_t *cmap, *htable, *table;
+  idx_t *cmap, *htable, *dtable;
   idx_t *cxadj, *cvwgt, *cvsize, *cadjncy, *cadjwgt;
   graph_t *cgraph;
   int dovsize, dropedges;
-  idx_t cv, nkeep, droppedewgt;
+  idx_t cv, nkeys, droppedewgt;
   idx_t *keys=NULL, *medianewgts=NULL, *noise=NULL;
 
   WCOREPUSH;
@@ -1367,12 +1369,13 @@
 
   /* Setup structures for dropedges */
   if (dropedges) {
-    for (nkeep=-1, v=0; v<nvtxs; v++) 
-      nkeep = gk_max(nkeep, xadj[v+1]-xadj[v]);
+    for (nkeys=0, v=0; v<nvtxs; v++) 
+      nkeys = gk_max(nkeys, xadj[v+1]-xadj[v]);
+    nkeys = 2*nkeys+1;
 
-    medianewgts = iwspacemalloc(ctrl, cnvtxs);
+    keys        = iwspacemalloc(ctrl, nkeys);
     noise       = iwspacemalloc(ctrl, cnvtxs);
-    keys        = iwspacemalloc(ctrl, 2*(nkeep+1));
+    medianewgts = iset(cnvtxs, -1, iwspacemalloc(ctrl, cnvtxs));
 
     for (v=0; v<cnvtxs; v++) 
       noise[v] = irandInRange(128);
@@ -1386,8 +1389,8 @@
   cadjncy  = cgraph->adjncy;
   cadjwgt  = cgraph->adjwgt;
 
-  htable = iset(gk_min(cnvtxs+1, mask+1), -1, iwspacemalloc(ctrl, mask+1)); 
-  table  = iset(cnvtxs, -1, iwspacemalloc(ctrl, cnvtxs));
+  htable = iset(mask+1, -1, iwspacemalloc(ctrl, mask+1));   /* hash table */
+  dtable = iset(cnvtxs, -1, iwspacemalloc(ctrl, cnvtxs));   /* direct table */
 
   cxadj[0] = cnvtxs = cnedges = 0;
   for (v=0; v<nvtxs; v++) {
@@ -1429,7 +1432,7 @@
       iend   = xadj[v+1];
       for (j=istart; j<iend; j++) {
         k = cmap[adjncy[j]];
-        for (kk=k&mask; htable[kk]!=-1 && cadjncy[htable[kk]]!=k; kk=((kk+1)%mask));
+        for (kk=k&mask; htable[kk]!=-1 && cadjncy[htable[kk]]!=k; kk=((kk+1)&mask));
         if ((m = htable[kk]) == -1) {
           cadjncy[nedges] = k;
           cadjwgt[nedges] = adjwgt[j];
@@ -1445,7 +1448,7 @@
         iend   = xadj[u+1];
         for (j=istart; j<iend; j++) {
           k = cmap[adjncy[j]];
-          for (kk=k&mask; htable[kk]!=-1 && cadjncy[htable[kk]]!=k; kk=((kk+1)%mask));
+          for (kk=k&mask; htable[kk]!=-1 && cadjncy[htable[kk]]!=k; kk=((kk+1)&mask));
           if ((m = htable[kk]) == -1) {
             cadjncy[nedges] = k;
             cadjwgt[nedges] = adjwgt[j];
@@ -1457,10 +1460,11 @@
         }
       }
 
-      /* zero out the htable */
-      for (j=0; j<nedges; j++) {
+      /* reset the htable -- reverse order (LIFO) is critical to prevent cadjncy[-1]
+       * indexing due to a remove of an earlier entry */
+      for (j=nedges-1; j>=0; j--) {
         k = cadjncy[j];
-        for (kk=k&mask; cadjncy[htable[kk]]!=k; kk=((kk+1)%mask));
+        for (kk=k&mask; cadjncy[htable[kk]]!=k; kk=((kk+1)&mask));
         htable[kk] = -1;  
       }
 
@@ -1474,10 +1478,10 @@
       iend   = xadj[v+1];
       for (j=istart; j<iend; j++) {
         k = cmap[adjncy[j]];
-        if ((m = table[k]) == -1) {
+        if ((m = dtable[k]) == -1) {
           cadjncy[nedges] = k;
           cadjwgt[nedges] = adjwgt[j];
-          table[k] = nedges++;
+          dtable[k] = nedges++;
         }
         else {
           cadjwgt[m] += adjwgt[j];
@@ -1489,38 +1493,42 @@
         iend   = xadj[u+1];
         for (j=istart; j<iend; j++) {
           k = cmap[adjncy[j]];
-          if ((m = table[k]) == -1) {
+          if ((m = dtable[k]) == -1) {
             cadjncy[nedges] = k;
             cadjwgt[nedges] = adjwgt[j];
-            table[k] = nedges++;
+            dtable[k] = nedges++;
           }
           else {
             cadjwgt[m] += adjwgt[j];
           }
         }
 
-        /* Remove the contracted adjacency weight */
-        if ((j = table[cnvtxs]) != -1) {
+        /* Remove the contracted self-loop, when present */
+        if ((j = dtable[cnvtxs]) != -1) {
           ASSERT(cadjncy[j] == cnvtxs);
           cadjncy[j]        = cadjncy[--nedges];
           cadjwgt[j]        = cadjwgt[nedges];
-          table[cnvtxs] = -1;
+          dtable[cnvtxs] = -1;
         }
       }
 
-      /* Zero out the htable */
+      /* Zero out the dtable */
       for (j=0; j<nedges; j++)
-        table[cadjncy[j]] = -1;  
+        dtable[cadjncy[j]] = -1;  
     }
 
 
     /* Determine the median weight of the incident edges, which will be used
        to keep an edge (u, v) iff wgt(u, v) >= min(medianewgts[u], medianewgts[v]) */
     if (dropedges) {
-      for (j=0; j<nedges; j++) 
-        keys[j] = (cadjwgt[j]<<8) + noise[cnvtxs] + noise[cadjncy[j]];
-      isortd(nedges, keys);
-      medianewgts[cnvtxs] = keys[((xadj[v+1]-xadj[v] + xadj[u+1]-xadj[u])>>1)];
+      ASSERTP(nedges < nkeys, ("%"PRIDX", %"PRIDX"\n", nkeys, nedges));
+      medianewgts[cnvtxs] = 8;  /* default for island nodes */ 
+      if (nedges > 0) {
+        for (j=0; j<nedges; j++) 
+          keys[j] = (cadjwgt[j]<<8) + noise[cnvtxs] + noise[cadjncy[j]];
+        isortd(nedges, keys);
+        medianewgts[cnvtxs] = keys[gk_min(nedges-1, ((xadj[v+1]-xadj[v] + xadj[u+1]-xadj[u])>>1))];
+      }
     }
 
     cadjncy         += nedges;
@@ -1542,6 +1550,8 @@
       iend   = cxadj[u+1];
       for (j=istart; j<iend; j++) {
         v = cadjncy[j];
+        ASSERTP(medianewgts[u] >= 0, ("%"PRIDX" %"PRIDX"\n", u, medianewgts[u]));
+        ASSERTP(medianewgts[v] >= 0, ("%"PRIDX" %"PRIDX" %"PRIDX"\n", v, medianewgts[v], cnvtxs));
         if ((cadjwgt[j]<<8) + noise[u] + noise[v] >= gk_min(medianewgts[u], medianewgts[v])) {
           cadjncy[cnedges]   = cadjncy[j];
           cadjwgt[cnedges++] = cadjwgt[j];
@@ -1573,6 +1583,7 @@
   WCOREPOP;
 }
 
+#if 0
 
 /*************************************************************************/
 /*! This function creates the coarser graph. It uses a full-size array
@@ -1925,6 +1936,7 @@
   WCOREPOP;
 }
 
+#endif
 
 /*************************************************************************/
 /*! Setup the various arrays for the coarse graph 
@@ -1942,10 +1954,14 @@
   cgraph->finer  = graph;
   graph->coarser = cgraph;
 
-  /* Allocate memory for the coarser graph */
+  /* Allocate memory for the coarser graph.
+     NOTE: The +1 in the adjwgt/adjncy is to allow the optimization of self-loop
+           detection by adding ahead of time the self-loop. That optimization
+           requires a +1 adjncy/adjwgt array for the limit case where the 
+           coarser graph is of the same size of the previous graph. */
   cgraph->xadj     = imalloc(cnvtxs+1, "SetupCoarseGraph: xadj");
-  cgraph->adjncy   = imalloc(graph->nedges,   "SetupCoarseGraph: adjncy");
-  cgraph->adjwgt   = imalloc(graph->nedges,   "SetupCoarseGraph: adjwgt");
+  cgraph->adjncy   = imalloc(graph->nedges+1,   "SetupCoarseGraph: adjncy");
+  cgraph->adjwgt   = imalloc(graph->nedges+1,   "SetupCoarseGraph: adjwgt");
   cgraph->vwgt     = imalloc(cgraph->ncon*cnvtxs, "SetupCoarseGraph: vwgt");
   cgraph->tvwgt    = imalloc(cgraph->ncon, "SetupCoarseGraph: tvwgt");
   cgraph->invtvwgt = rmalloc(cgraph->ncon, "SetupCoarseGraph: invtvwgt");
diff --git a/libmetis/proto.h b/libmetis/proto.h
--- a/libmetis/proto.h
+++ b/libmetis/proto.h
@@ -51,10 +51,6 @@
 void PrintCGraphStats(ctrl_t *ctrl, graph_t *graph);
 void CreateCoarseGraph(ctrl_t *ctrl, graph_t *graph, idx_t cnvtxs, 
          idx_t *match);
-void CreateCoarseGraphNoMask(ctrl_t *ctrl, graph_t *graph, idx_t cnvtxs, 
-         idx_t *match);
-void CreateCoarseGraphPerm(ctrl_t *ctrl, graph_t *graph, idx_t cnvtxs, 
-         idx_t *match, idx_t *perm);
 graph_t *SetupCoarseGraph(graph_t *graph, idx_t cnvtxs, int dovsize);
 void ReAdjustMemory(ctrl_t *ctrl, graph_t *graph, graph_t *cgraph);
 
diff --git a/libmetis/rename.h b/libmetis/rename.h
--- a/libmetis/rename.h
+++ b/libmetis/rename.h
@@ -41,8 +41,6 @@
 #define Match_JC                        libmetis__Match_JC
 #define PrintCGraphStats                libmetis__PrintCGraphStats
 #define CreateCoarseGraph		libmetis__CreateCoarseGraph
-#define CreateCoarseGraphNoMask		libmetis__CreateCoarseGraphNoMask
-#define CreateCoarseGraphPerm		libmetis__CreateCoarseGraphPerm
 #define SetupCoarseGraph		libmetis__SetupCoarseGraph
 #define ReAdjustMemory			libmetis__ReAdjustMemory
 
