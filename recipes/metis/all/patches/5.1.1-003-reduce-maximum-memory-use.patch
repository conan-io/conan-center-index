From aef54c5b2a72f9d0c3c91b008c35271560b79cac Mon Sep 17 00:00:00 2001
From: George Karypis <karypis@umn.edu>
Date: Fri, 7 Jan 2022 14:01:46 +0000
Subject: [PATCH] Small changes to reduce maximum memory use

diff --git a/libmetis/checkgraph.c b/libmetis/checkgraph.c
--- a/libmetis/checkgraph.c
+++ b/libmetis/checkgraph.c
@@ -45,9 +45,11 @@
 
   htable = ismalloc(nvtxs, 0, "htable");
 
-  minedge = maxedge = adjncy[0];
-  if (adjwgt) 
-    minewgt = maxewgt = adjwgt[0];
+  if (graph->nedges > 0) {
+    minedge = maxedge = adjncy[0];
+    if (adjwgt) 
+      minewgt = maxewgt = adjwgt[0];
+  }
 
   for (i=0; i<nvtxs; i++) {
     for (j=xadj[i]; j<xadj[i+1]; j++) {
diff --git a/libmetis/kmetis.c b/libmetis/kmetis.c
--- a/libmetis/kmetis.c
+++ b/libmetis/kmetis.c
@@ -68,12 +68,11 @@
   IFSET(ctrl->dbglvl, METIS_DBG_TIME, InitTimers(ctrl));
   IFSET(ctrl->dbglvl, METIS_DBG_TIME, gk_startcputimer(ctrl->TotalTmr));
 
-  if (ctrl->dbglvl&512) {
-    *objval = BlockKWayPartitioning(ctrl, graph, part);
-  }
-  else {
-    *objval = MlevelKWayPartitioning(ctrl, graph, part);
-  }
+  iset(*nvtxs, 0, part);
+  if (ctrl->dbglvl&512)
+    *objval = (*nparts == 1 ? 0 : BlockKWayPartitioning(ctrl, graph, part));
+  else
+    *objval = (*nparts == 1 ? 0 : MlevelKWayPartitioning(ctrl, graph, part));
 
   IFSET(ctrl->dbglvl, METIS_DBG_TIME, gk_stopcputimer(ctrl->TotalTmr));
   IFSET(ctrl->dbglvl, METIS_DBG_TIME, PrintTimers(ctrl));
diff --git a/libmetis/mmd.c b/libmetis/mmd.c
--- a/libmetis/mmd.c
+++ b/libmetis/mmd.c
@@ -59,24 +59,24 @@
     if (neqns <= 0)  
       return;
 
-    /* Adjust from C to Fortran */
+    /* adjust from C to Fortran */
     xadj--; adjncy--; invp--; perm--; head--; qsize--; list--; marker--;
 
-    /* initialization for the minimum degree algorithm. */
+    /* initialization for the minimum degree algorithm */
     *ncsub = 0;
     mmdint(neqns, xadj, adjncy, head, invp, perm, qsize, list, marker);
 
-    /*  'num' counts the number of ordered nodes plus 1. */
+    /* 'num' counts the number of ordered nodes plus 1 */
     num = 1;
 
-    /* eliminate all isolated nodes. */
+    /* eliminate all isolated nodes */
     nextmd = head[1];
     while (nextmd > 0) {
       mdeg_node = nextmd;
       nextmd = invp[mdeg_node];
       marker[mdeg_node] = maxint;
       invp[mdeg_node] = -num;
-      num = num + 1;
+      num++;
     }
 
     /* search for node of the minimum degree. 'mdeg' is the current */
@@ -87,14 +87,16 @@
     head[1] = 0;
     mdeg = 2;
 
-    /* infinite loop here ! */
+    /* infinite loop here */
     while (1) {
       while (head[mdeg] <= 0) 
         mdeg++;
 
       /* use value of 'delta' to set up 'mdlmt', which governs */
       /* when a degree update is to be performed.              */
-      mdlmt = mdeg + delta;
+      //mdlmt = mdeg + delta;
+      // the need for gk_min() was identified by jsf67
+      mdlmt = gk_min(neqns, mdeg+delta);
       ehead = 0;
 
 n500:
@@ -107,7 +109,7 @@
         mdeg_node = head[mdeg];
       };
 
-      /*  remove 'mdeg_node' from the degree structure. */
+      /* remove 'mdeg_node' from the degree structure */
       nextmd = invp[mdeg_node];
       head[mdeg] = nextmd;
       if (nextmd > 0)  
@@ -140,7 +142,7 @@
       /* minimum degree nodes elimination.            */
       if (num > neqns)  
         goto n1000;
-      mmdupd( ehead, neqns, xadj, adjncy, delta, &mdeg, head, invp, perm, qsize, list, marker, maxint, &tag);
+      mmdupd(ehead, neqns, xadj, adjncy, delta, &mdeg, head, invp, perm, qsize, list, marker, maxint, &tag);
     }; /* end of -- while ( 1 ) -- */
 
 n1000:
@@ -289,6 +291,7 @@
       return;
  }
 
+
 /***************************************************************************
 *    mmdint ---- mult minimum degree initialization
 *    purpose -- this routine performs initialization for the
@@ -305,33 +308,30 @@
 idx_t  mmdint(idx_t neqns, idx_t *xadj, idx_t *adjncy, idx_t *head, idx_t *forward,
      idx_t *backward, idx_t *qsize, idx_t *list, idx_t *marker)
 {
-    idx_t  fnode, ndeg, node;
+  idx_t fnode, ndeg, node;
 
-    for ( node = 1; node <= neqns; node++ ) {
-        head[node] = 0;
-        qsize[node] = 1;
-        marker[node] = 0;
-        list[node] = 0;
-    };
+  for (node=1; node<=neqns; node++) {
+    head[node] = 0;
+    qsize[node] = 1;
+    marker[node] = 0;
+    list[node] = 0;
+  };
 
-    /* initialize the degree doubly linked lists. */
-    for ( node = 1; node <= neqns; node++ ) {
-        // The following is something that Olaf Schenk identified as potentially a
-        // bug that I introduced in the original code. For now, I reverted back
-        // to the original code until I have some time to check.
-        // ndeg = xadj[node+1] - xadj[node]/* + 1*/;   /* george */
-        ndeg = xadj[node+1] - xadj[node] + 1;
-        if (ndeg == 0)
-          ndeg = 1;
-        fnode = head[ndeg];
-        forward[node] = fnode;
-        head[ndeg] = node;
-        if ( fnode > 0 ) backward[fnode] = node;
-        backward[node] = -ndeg;
-    };
-    return 0;
+  /* initialize the degree doubly linked lists. */
+  for (node=1; node<=neqns; node++) {
+    ndeg = xadj[node+1]-xadj[node]+1;
+    fnode = head[ndeg];
+    forward[node] = fnode;
+    head[ndeg] = node;
+    if (fnode > 0)
+      backward[fnode] = node;
+    backward[node] = -ndeg;
+  };
+
+  return 0;
 }
 
+
 /****************************************************************************
 * mmdnum --- multi minimum degree numbering
 * purpose -- this routine performs the final step in producing
@@ -395,6 +395,7 @@
   return;
 }
 
+
 /****************************************************************************
 * mmdupd ---- multiple minimum degree update
 * purpose -- this routine updates the degrees of nodes after a
diff --git a/libmetis/pmetis.c b/libmetis/pmetis.c
--- a/libmetis/pmetis.c
+++ b/libmetis/pmetis.c
@@ -130,7 +130,8 @@
   IFSET(ctrl->dbglvl, METIS_DBG_TIME, InitTimers(ctrl));
   IFSET(ctrl->dbglvl, METIS_DBG_TIME, gk_startcputimer(ctrl->TotalTmr));
 
-  *objval = MlevelRecursiveBisection(ctrl, graph, *nparts, part, ctrl->tpwgts, 0);
+  iset(*nvtxs, 0, part);
+  *objval = (*nparts == 1 ? 0 : MlevelRecursiveBisection(ctrl, graph, *nparts, part, ctrl->tpwgts, 0));
 
   IFSET(ctrl->dbglvl, METIS_DBG_TIME, gk_stopcputimer(ctrl->TotalTmr));
   IFSET(ctrl->dbglvl, METIS_DBG_TIME, PrintTimers(ctrl));
