diff --git a/CMakeLists.txt b/CMakeLists.txt
index 7b1bd27..32ce569 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -120,16 +120,16 @@ set(${LIBRARY_TARGET_NAME}_HDR
 
 # Build the library
 if (UNIX)
-  add_library(${LIBRARY_TARGET_NAME} SHARED ${${LIBRARY_TARGET_NAME}_SRC})
+  add_library(${LIBRARY_TARGET_NAME} ${${LIBRARY_TARGET_NAME}_SRC})
 endif(UNIX)
 
 if (MSVC)
   add_definitions(-D _CRT_SECURE_NO_WARNINGS)
-  add_library(${LIBRARY_TARGET_NAME} STATIC ${${LIBRARY_TARGET_NAME}_SRC})
+  add_library(${LIBRARY_TARGET_NAME} ${${LIBRARY_TARGET_NAME}_SRC})
 endif(MSVC)
 
 if (MINGW)
-  add_library(${LIBRARY_TARGET_NAME} STATIC ${${LIBRARY_TARGET_NAME}_SRC})
+  add_library(${LIBRARY_TARGET_NAME} ${${LIBRARY_TARGET_NAME}_SRC})
 endif()
 
 # Set two minimum target properties for the library.
@@ -151,7 +151,7 @@ target_include_directories(${LIBRARY_TARGET_NAME}
 # Specify installation targets, typology and destination folders.
 install(TARGETS ${LIBRARY_TARGET_NAME}
         EXPORT  ${PROJECT_NAME}
-        LIBRARY DESTINATION "${CMAKE_INSTALL_LIBDIR}" COMPONENT shlib
+        LIBRARY DESTINATION "${CMAKE_INSTALL_LIBDIR}" COMPONENT lib
         ARCHIVE DESTINATION "${CMAKE_INSTALL_LIBDIR}" COMPONENT lib
         RUNTIME DESTINATION "${CMAKE_INSTALL_BINDIR}" COMPONENT bin
 )
@@ -211,144 +211,9 @@ endif(MSVC)
 # Add the uninstall target
 include(AddUninstallTarget)
 
-# Build the test binary
-add_executable(dataframe_tester  test/dataframe_tester.cc)
-add_executable(dataframe_performance  test/dataframe_performance.cc)
-add_executable(vectors_tester    test/vectors_tester.cc)
-add_executable(vector_ptr_view_tester test/vector_ptr_view_tester.cc)
-add_executable(date_time_tester  test/date_time_tester.cc)
-add_executable(mmfile_tester     test/mmfile_tester.cc)
-add_executable(obj_vector_tester test/obj_vector_tester.cc)
-add_executable(obj_vector_erase_tester test/obj_vector_erase_tester.cc)
-add_executable(sharedmem_tester  test/sharedmem_tester.cc)
-add_executable(gen_rand_tester  test/gen_rand_tester.cc)
-
-# Link the DataFrame library to the test binary
-target_link_libraries(dataframe_tester DataFrame)
-
-# Link the DataFrame library to the test binary
-target_link_libraries(dataframe_performance DataFrame)
-
-# Link the DataFrame library to the test binary
-target_link_libraries(vectors_tester DataFrame)
-
-# Link the DataFrame library to the test binary
-target_link_libraries(vector_ptr_view_tester DataFrame)
-
-# Link the DataFrame library to the test binary
-target_link_libraries(date_time_tester DataFrame)
-
-# Link the DataFrame library to the test binary
-target_link_libraries(mmfile_tester DataFrame)
-
-# Link the DataFrame library to the test binary
-target_link_libraries(obj_vector_tester DataFrame)
-
-# Link the DataFrame library to the test binary
-target_link_libraries(obj_vector_erase_tester DataFrame)
-
-# Link the DataFrame library to the test binary
-target_link_libraries(sharedmem_tester DataFrame)
-
-# Link the DataFrame library to the test binary
-target_link_libraries(gen_rand_tester DataFrame)
-
-if (UNIX)
-  # Find pthreads library
-  set(THREADS_PREFER_PTHREAD_FLAG ON)
-  find_package(Threads REQUIRED)
-  target_link_libraries(dataframe_tester Threads::Threads)
-  target_link_libraries(dataframe_performance Threads::Threads)
-  target_link_libraries(vectors_tester Threads::Threads)
-  target_link_libraries(vector_ptr_view_tester Threads::Threads)
-  target_link_libraries(date_time_tester Threads::Threads)
-  target_link_libraries(mmfile_tester Threads::Threads)
-  target_link_libraries(obj_vector_tester Threads::Threads)
-  target_link_libraries(obj_vector_erase_tester Threads::Threads)
-  target_link_libraries(sharedmem_tester Threads::Threads)
-  target_link_libraries(gen_rand_tester Threads::Threads)
-endif (UNIX)
-
-if (UNIX AND NOT APPLE)
-  target_link_libraries(dataframe_tester rt)
-  target_link_libraries(dataframe_performance rt)
-  target_link_libraries(vectors_tester rt)
-  target_link_libraries(vector_ptr_view_tester rt)
-  target_link_libraries(date_time_tester rt)
-  target_link_libraries(mmfile_tester rt)
-  target_link_libraries(obj_vector_tester rt)
-  target_link_libraries(obj_vector_erase_tester rt)
-  target_link_libraries(sharedmem_tester rt)
-  target_link_libraries(gen_rand_tester rt)
-endif()
-
-# Enable ctest, testing so we can see if unit tests pass or fail in CI
-enable_testing()
-add_test(NAME dataframe_tester
-         COMMAND dataframe_tester
-         WORKING_DIRECTORY $<TARGET_FILE_DIR:dataframe_tester>)
-add_test(NAME vectors_tester
-         COMMAND vectors_tester
-         WORKING_DIRECTORY $<TARGET_FILE_DIR:vectors_tester>)
-add_test(NAME vector_ptr_view_tester
-         COMMAND vector_ptr_view_tester
-         WORKING_DIRECTORY $<TARGET_FILE_DIR:vector_ptr_view_tester>)
-add_test(NAME date_time_tester
-         COMMAND date_time_tester
-         WORKING_DIRECTORY $<TARGET_FILE_DIR:date_time_tester>)
-
 # For some unknown reason to me, this test hangs in Travis CI
 #
 # add_test(NAME mmfile_tester
 #          COMMAND mmfile_tester
 #          WORKING_DIRECTORY $<TARGET_FILE_DIR:mmfile_tester>)
 
-add_test(NAME obj_vector_tester
-         COMMAND obj_vector_tester
-         WORKING_DIRECTORY $<TARGET_FILE_DIR:obj_vector_tester>)
-
-add_test(NAME obj_vector_erase_tester
-         COMMAND obj_vector_erase_tester
-         WORKING_DIRECTORY $<TARGET_FILE_DIR:obj_vector_erase_tester>)
-add_test(NAME gen_rand_tester
-         COMMAND gen_rand_tester
-         WORKING_DIRECTORY $<TARGET_FILE_DIR:gen_rand_tester>)
-
-message("-- Copying files for testing")
-# Ctest require this files in the build dir, on all platforms
-add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD
-                   COMMAND ${CMAKE_COMMAND} -E copy
-                   ${CMAKE_CURRENT_SOURCE_DIR}/test/sample_data.csv
-                   ${CMAKE_CURRENT_BINARY_DIR}/sample_data.csv)
-add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD
-                   COMMAND ${CMAKE_COMMAND} -E copy
-                   ${CMAKE_CURRENT_SOURCE_DIR}/test/sample_data.json
-                   ${CMAKE_CURRENT_BINARY_DIR}/sample_data.json)
-add_custom_command(
-    TARGET ${PROJECT_NAME} POST_BUILD
-    COMMAND ${CMAKE_COMMAND} -E copy
-    ${CMAKE_CURRENT_SOURCE_DIR}/test/sample_data_dt_index.csv
-    ${CMAKE_CURRENT_BINARY_DIR}/sample_data_dt_index.csv)
-add_custom_command(
-    TARGET ${PROJECT_NAME} POST_BUILD
-    COMMAND ${CMAKE_COMMAND} -E copy
-    ${CMAKE_CURRENT_SOURCE_DIR}/test/sample_data_string_index.csv
-    ${CMAKE_CURRENT_BINARY_DIR}/sample_data_string_index.csv)
-
-file(COPY ${CMAKE_CURRENT_SOURCE_DIR}/test/sample_data.csv
-          DESTINATION ${CMAKE_CURRENT_BINARY_DIR}/bin/Debug)
-file(COPY ${CMAKE_CURRENT_SOURCE_DIR}/test/sample_data.csv
-          DESTINATION ${CMAKE_CURRENT_BINARY_DIR}/bin/Release)
-file(COPY ${CMAKE_CURRENT_SOURCE_DIR}/test/sample_data.json
-          DESTINATION ${CMAKE_CURRENT_BINARY_DIR}/bin/Debug)
-file(COPY ${CMAKE_CURRENT_SOURCE_DIR}/test/sample_data.json
-          DESTINATION ${CMAKE_CURRENT_BINARY_DIR}/bin/Release)
-file(COPY ${CMAKE_CURRENT_SOURCE_DIR}/test/sample_data_dt_index.csv
-          DESTINATION ${CMAKE_CURRENT_BINARY_DIR}/bin/Debug)
-file(COPY ${CMAKE_CURRENT_SOURCE_DIR}/test/sample_data_dt_index.csv
-          DESTINATION ${CMAKE_CURRENT_BINARY_DIR}/bin/Release)
-file(COPY ${CMAKE_CURRENT_SOURCE_DIR}/test/sample_data_string_index.csv
-          DESTINATION ${CMAKE_CURRENT_BINARY_DIR}/bin/Debug)
-file(COPY ${CMAKE_CURRENT_SOURCE_DIR}/test/sample_data_string_index.csv
-          DESTINATION ${CMAKE_CURRENT_BINARY_DIR}/bin/Release)
-message("-- Copying files for testing - done")
