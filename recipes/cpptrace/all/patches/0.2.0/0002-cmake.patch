diff --git CMakeLists.txt CMakeLists.txt
index 137f584..56436a0 100644
--- CMakeLists.txt
+++ CMakeLists.txt
@@ -103,16 +103,6 @@ if(NOT WIN32)
   check_support(HAS_BACKTRACE has_backtrace.cpp "" "backtrace" "${CPPTRACE_BACKTRACE_PATH_DEFINITION}")
   check_support(HAS_DL has_dl.cpp "" "dl" "")
   set(STACKTRACE_LINK_LIB "stdc++_libbacktrace")
-  if(APPLE)
-    find_program(ADDR2LINE_PATH atos PATHS ENV PATH)
-  else()
-    find_program(ADDR2LINE_PATH addr2line PATHS ENV PATH)
-  endif()
-  if("${ADDR2LINE_PATH}" STREQUAL "ADDR2LINE_PATH-NOTFOUND")
-    set(HAS_ADDR2LINE FALSE)
-  else()
-    set(HAS_ADDR2LINE TRUE)
-  endif()
 else()
   check_support(HAS_STACKWALK has_stackwalk.cpp "" "dbghelp" "")
 endif()
diff --git bundled/libdwarf/CMakeLists.txt bundled/libdwarf/CMakeLists.txt
index b272e94..62244b3 100644
--- bundled/libdwarf/CMakeLists.txt
+++ bundled/libdwarf/CMakeLists.txt
@@ -217,74 +217,83 @@ check_c_source_compiles([=[
   }]=] HAVE_STDAFX_H)
 #message(STATUS "Checking have windows stdafx.h... ${HAVE_STDAFX_H}")

-set(CMAKE_REQUIRED_LIBRARIES z)
-check_c_source_compiles( [=[
-  #include "zlib.h"
-  int main()
-  {
-      Bytef dest[100];
-      uLongf destlen = 100;
-      Bytef *src = 0;
-      uLong srclen = 3;
-      int res = uncompress(dest,&destlen,src,srclen);
-      if (res == Z_OK) {
-           /* ALL IS WELL */
-      }
-      return 0;
-  } ]=]  HAVE_ZLIB )
-check_c_source_compiles( [=[
-  #include "zlib.h"
-  int main()
-  {
-      Bytef dest[100];
-      uLongf destlen = 100;
-      Bytef *src = 0;
-      uLong srclen = 3;
-      int res = uncompress(dest,&destlen,src,srclen);
-      if (res == Z_OK) {
-           /* ALL IS WELL */
-      }
-      return 0;
-  } ]=]  HAVE_ZLIB_H )
-set(CMAKE_REQUIRED_LIBRARIES)
-if (HAVE_ZLIB)
-  # For linking in libz
-  set(DW_FZLIB "z")
-endif()
+option(CMAKE_DWARF_FINDPACKAGE_Z "" OFF)
+
+mark_as_advanced(CMAKE_DWARF_FINDPACKAGE_Z)
+
+if(NOT CMAKE_DWARF_FINDPACKAGE_Z)
+  set(CMAKE_REQUIRED_LIBRARIES z)
+  check_c_source_compiles( [=[
+    #include "zlib.h"
+    int main()
+    {
+        Bytef dest[100];
+        uLongf destlen = 100;
+        Bytef *src = 0;
+        uLong srclen = 3;
+        int res = uncompress(dest,&destlen,src,srclen);
+        if (res == Z_OK) {
+            /* ALL IS WELL */
+        }
+        return 0;
+    } ]=]  HAVE_ZLIB )
+  check_c_source_compiles( [=[
+    #include "zlib.h"
+    int main()
+    {
+        Bytef dest[100];
+        uLongf destlen = 100;
+        Bytef *src = 0;
+        uLong srclen = 3;
+        int res = uncompress(dest,&destlen,src,srclen);
+        if (res == Z_OK) {
+            /* ALL IS WELL */
+        }
+        return 0;
+    } ]=]  HAVE_ZLIB_H )
+  set(CMAKE_REQUIRED_LIBRARIES)
+  if (HAVE_ZLIB)
+    # For linking in libz
+    set(DW_FZLIB "z")
+  endif()

-set(CMAKE_REQUIRED_LIBRARIES zstd )
-check_c_source_compiles( [=[
-  #include "zstd.h"
-  int main()
-  {
-      char * dest[100];
-      size_t destlen = 100;
-      char *src = 0;
-      size_t srclen = 3;
-      size_t res = ZSTD_decompress(dest,destlen,src,srclen);
-      if (res == destlen) {
-           /* ALL IS WELL */
-      }
-      return 0;
-  } ]=]  HAVE_ZSTD )
-check_c_source_compiles( [=[
-  #include "zstd.h"
-  int main()
-  {
-      char * dest[100];
-      size_t destlen = 100;
-      char *src = 0;
-      size_t srclen = 3;
-      size_t res = ZSTD_decompress(dest,destlen,src,srclen);
-      if (res == destlen) {
-           /* ALL IS WELL */
-      }
-      return 0;
-  } ]=]  HAVE_ZSTD_H )
-set(CMAKE_REQUIRED_LIBRARIES)
-if (HAVE_ZSTD)
-  # For linking in libzstd
-  set(DW_FZSTD "zstd")
+  set(CMAKE_REQUIRED_LIBRARIES zstd )
+  check_c_source_compiles( [=[
+    #include "zstd.h"
+    int main()
+    {
+        char * dest[100];
+        size_t destlen = 100;
+        char *src = 0;
+        size_t srclen = 3;
+        size_t res = ZSTD_decompress(dest,destlen,src,srclen);
+        if (res == destlen) {
+            /* ALL IS WELL */
+        }
+        return 0;
+    } ]=]  HAVE_ZSTD )
+  check_c_source_compiles( [=[
+    #include "zstd.h"
+    int main()
+    {
+        char * dest[100];
+        size_t destlen = 100;
+        char *src = 0;
+        size_t srclen = 3;
+        size_t res = ZSTD_decompress(dest,destlen,src,srclen);
+        if (res == destlen) {
+            /* ALL IS WELL */
+        }
+        return 0;
+    } ]=]  HAVE_ZSTD_H )
+  set(CMAKE_REQUIRED_LIBRARIES)
+  if (HAVE_ZSTD)
+    # For linking in libzstd
+    set(DW_FZSTD "zstd")
+  endif()
+else()
+  find_package(z REQUIRED)
+  set(DW_FZLIB "z")
 endif()

 check_c_source_compiles([=[
@@ -434,7 +443,7 @@ target_include_directories(
   $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>
 )

-target_link_libraries(dwarf PUBLIC ${LIBELF_LIBRARIES} ${DW_FZLIB} ${DW_FZSTD})
+target_link_libraries(dwarf PUBLIC ${DW_FZLIB} ${DW_FZSTD})

 # TODO: Something will have to be figured out for dynamic linking, but for now there's nothing to install
 # if(NOT CMAKE_SKIP_INSTALL_RULES)
