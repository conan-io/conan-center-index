Add option to specify the precision of the output points.
Patch upstream in progress.

--- a/Filters/Core/vtkHull.cxx	2023-11-14 07:37:21.000000000 +0800
+++ b/Filters/Core/vtkHull.cxx	2024-03-13 12:54:54.896459205 +0800
@@ -14,6 +14,11 @@
 VTK_ABI_NAMESPACE_BEGIN
 vtkStandardNewMacro(vtkHull);
 
+vtkHull::vtkHull()
+{
+  this->OutputPointsPrecision = vtkAlgorithm::DEFAULT_PRECISION;
+}
+
 //------------------------------------------------------------------------------
 int vtkHull::GetNumberOfPlanes()
 {
@@ -469,6 +474,23 @@
   vtkNew<vtkPoints> outPoints;
   vtkNew<vtkCellArray> outPolys;
 
+  // Set the desired precision for the points in the output.
+  if (this->OutputPointsPrecision == vtkAlgorithm::DEFAULT_PRECISION)
+  {
+    if (vtkPoints * inPts = input->GetPoints())
+    {
+      outPoints->SetDataType(inPts->GetDataType());
+    }
+  }
+  else if (this->OutputPointsPrecision == vtkAlgorithm::SINGLE_PRECISION)
+  {
+    outPoints->SetDataType(VTK_FLOAT);
+  }
+  else if (this->OutputPointsPrecision == vtkAlgorithm::DOUBLE_PRECISION)
+  {
+    outPoints->SetDataType(VTK_DOUBLE);
+  }
+
   // Compute the D value for each plane according to the vertices in the
   // geometry
   this->ComputePlaneDistances(input);
@@ -765,6 +787,23 @@
   vtkNew<vtkCellArray> newPolys;
   newPolys->AllocateEstimate(numPlanes, 3);
 
+  // Set the desired precision for the points in the output.
+  if (this->OutputPointsPrecision == vtkAlgorithm::DEFAULT_PRECISION)
+  {
+    if (vtkPoints * currentPts = pd->GetPoints())
+    {
+      newPoints->SetDataType(currentPts->GetDataType());
+    }
+  }
+  else if (this->OutputPointsPrecision == vtkAlgorithm::SINGLE_PRECISION)
+  {
+    newPoints->SetDataType(VTK_FLOAT);
+  }
+  else if (this->OutputPointsPrecision == vtkAlgorithm::DOUBLE_PRECISION)
+  {
+    newPoints->SetDataType(VTK_DOUBLE);
+  }
+
   this->ClipPolygonsFromPlanes(newPoints, newPolys, bounds);
 
   pd->SetPoints(newPoints);
--- a/Filters/Core/vtkHull.h	2023-11-14 07:37:21.000000000 +0800
+++ b/Filters/Core/vtkHull.h	2024-03-13 12:54:54.896459205 +0800
@@ -142,6 +142,16 @@
 
   ///@{
   /**
+   * Set/get the desired precision for the output types. See the documentation
+   * for the vtkAlgorithm::DesiredOutputPrecision enum for an explanation of
+   * the available precision settings.
+   */
+  vtkSetMacro(OutputPointsPrecision, int);
+  vtkGetMacro(OutputPointsPrecision, int);
+  ///@}
+
+  ///@{
+  /**
    * A special method that is used to generate a polyhedron directly
    * from a set of n planes. The planes that are supplied by the user
    * are not squeezed towards the input data (in fact the user need
@@ -158,12 +168,14 @@
   ///@}
 
 protected:
-  vtkHull() = default;
+  vtkHull();
   ~vtkHull() override = default;
 
   // The planes - 4 doubles per plane for A, B, C, D.
   std::vector<double> Planes;
 
+  int OutputPointsPrecision;
+
   // Internal method used to find the position of each plane
   void ComputePlaneDistances(vtkPointSet* input);
 
