diff --git a/Common/Core/vtkSMPTools.h b/Common/Core/vtkSMPTools.h
index 3a87743084..23183ad6a3 100644
--- a/Common/Core/vtkSMPTools.h
+++ b/Common/Core/vtkSMPTools.h
@@ -103,7 +103,7 @@ struct vtkSMPTools_FunctorInternal<Functor, false>
   }
   vtkSMPTools_FunctorInternal<Functor, false>& operator=(
     const vtkSMPTools_FunctorInternal<Functor, false>&);
-  vtkSMPTools_FunctorInternal<Functor, false>(const vtkSMPTools_FunctorInternal<Functor, false>&);
+  vtkSMPTools_FunctorInternal(const vtkSMPTools_FunctorInternal<Functor, false>&);
 };
 
 template <typename Functor>
@@ -134,7 +134,7 @@ struct vtkSMPTools_FunctorInternal<Functor, true>
   }
   vtkSMPTools_FunctorInternal<Functor, true>& operator=(
     const vtkSMPTools_FunctorInternal<Functor, true>&);
-  vtkSMPTools_FunctorInternal<Functor, true>(const vtkSMPTools_FunctorInternal<Functor, true>&);
+  vtkSMPTools_FunctorInternal(const vtkSMPTools_FunctorInternal<Functor, true>&);
 };
 
 template <typename Functor>
diff --git a/Filters/Extraction/vtkValueSelector.cxx b/Filters/Extraction/vtkValueSelector.cxx
index 5d4a6cd6c5..c91b44c08f 100644
--- a/Filters/Extraction/vtkValueSelector.cxx
+++ b/Filters/Extraction/vtkValueSelector.cxx
@@ -180,7 +180,7 @@ struct ArrayValueRangeFunctor
 
     if (comp >= 0)
     {
-      vtkSMPTools::For(0, fArray->GetNumberOfTuples(), [=](vtkIdType begin, vtkIdType end) {
+      vtkSMPTools::For(0, fArray->GetNumberOfTuples(), [=, this](vtkIdType begin, vtkIdType end) {
         const auto fRange = vtk::DataArrayTupleRange(fArray, begin, end);
         const auto selRange = vtk::DataArrayTupleRange<2>(selList);
         auto insideRange = vtk::DataArrayValueRange<1>(this->InsidednessArray, begin, end);
@@ -201,7 +201,7 @@ struct ArrayValueRangeFunctor
     else
     {
       // compare vector magnitude.
-      vtkSMPTools::For(0, fArray->GetNumberOfTuples(), [=](vtkIdType begin, vtkIdType end) {
+      vtkSMPTools::For(0, fArray->GetNumberOfTuples(), [=, this](vtkIdType begin, vtkIdType end) {
         const auto fRange = vtk::DataArrayTupleRange(fArray, begin, end);
         const auto selRange = vtk::DataArrayTupleRange<2>(selList);
         auto insideRange = vtk::DataArrayValueRange<1>(this->InsidednessArray, begin, end);
diff --git a/Filters/General/vtkDeflectNormals.cxx b/Filters/General/vtkDeflectNormals.cxx
index e991ea2cc2..1a9d64f80a 100644
--- a/Filters/General/vtkDeflectNormals.cxx
+++ b/Filters/General/vtkDeflectNormals.cxx
@@ -70,7 +70,7 @@ struct vtkDeflectNormalsWorker
   void operator()(VectorArrayT* vectors)
   {
     const double* normal = this->Self->GetUserNormal();
-    vtkSMPTools::For(0, vectors->GetNumberOfTuples(), [=](vtkIdType begin, vtkIdType end) {
+    vtkSMPTools::For(0, vectors->GetNumberOfTuples(), [=, this](vtkIdType begin, vtkIdType end) {
       for (vtkIdType t = begin; t < end; ++t)
       {
         typename VectorArrayT::ValueType vec[3];
@@ -83,7 +83,7 @@ struct vtkDeflectNormalsWorker
   template <typename VectorArrayT, typename NormalArrayT>
   void operator()(VectorArrayT* vectors, NormalArrayT* normals)
   {
-    vtkSMPTools::For(0, vectors->GetNumberOfTuples(), [=](vtkIdType begin, vtkIdType end) {
+    vtkSMPTools::For(0, vectors->GetNumberOfTuples(), [=, this](vtkIdType begin, vtkIdType end) {
       for (vtkIdType t = begin; t < end; ++t)
       {
         typename VectorArrayT::ValueType vec[3];
diff --git a/Filters/General/vtkMergeTimeFilter.cxx b/Filters/General/vtkMergeTimeFilter.cxx
index 8ce7694cc9..69b51cd534 100644
--- a/Filters/General/vtkMergeTimeFilter.cxx
+++ b/Filters/General/vtkMergeTimeFilter.cxx
@@ -94,7 +94,7 @@ void vtkMergeTimeFilter::MergeTimeSteps(const std::vector<double>& timeSteps)
   for (double newTime : timeSteps)
   {
     // lambda to find TimeStep in the list, depending on Tolerance.
-    auto insideTolerance = [=](double outputTime) {
+    auto insideTolerance = [=, this](double outputTime) {
       return this->AreTimesWithinTolerance(outputTime, newTime);
     };
 
diff --git a/IO/Geometry/vtkGLTFWriter.cxx b/IO/Geometry/vtkGLTFWriter.cxx
index ab6c2a51c8..ea503be112 100644
--- a/IO/Geometry/vtkGLTFWriter.cxx
+++ b/IO/Geometry/vtkGLTFWriter.cxx
@@ -699,7 +699,7 @@ void vtkGLTFWriter::WriteToStream(ostream& output, vtkMultiBlockDataSet* mb)
       auto pd = vtkPolyData::SafeDownCast(it->GetCurrentDataObject());
       if (!pd)
       {
-        vtkLog(WARNING, "Expecting vtkPolyData but got: " << pd->GetClassName());
+        vtkLog(WARNING, "Expecting vtkPolyData but got: " << it->GetClassName());
       }
 
       if (pd && pd->GetNumberOfCells() > 0)
diff --git a/IO/Legacy/vtkDataReader.cxx b/IO/Legacy/vtkDataReader.cxx
index 41188c085d..4d652d72b8 100644
--- a/IO/Legacy/vtkDataReader.cxx
+++ b/IO/Legacy/vtkDataReader.cxx
@@ -295,7 +295,7 @@ int vtkDataReader::ReadLine(char result[256])
 //------------------------------------------------------------------------------
 // Internal function to read in a string up to 256 characters.
 // Returns zero if there was an error.
-int vtkDataReader::ReadString(char result[256])
+int vtkDataReader::ReadString(char (&result)[256])
 {
   this->IS->width(256);
   *this->IS >> result;
@@ -668,7 +668,7 @@ int vtkDataReader::ReadHeader(const char* fname)
 //------------------------------------------------------------------------------
 int vtkDataReader::IsFileValid(const char* dstype)
 {
-  char line[1024];
+  char line[256];
 
   if (!dstype)
   {
@@ -2299,7 +2299,7 @@ int vtkDataReader::ReadScalarData(vtkDataSetAttributes* a, vtkIdType numPts)
   int skipScalar = 0;
   vtkDataArray* data;
   int numComp = 1;
-  char buffer[1024];
+  char buffer[256];
 
   if (!(this->ReadString(buffer) && this->ReadString(line)))
   {
@@ -2392,7 +2392,7 @@ int vtkDataReader::ReadVectorData(vtkDataSetAttributes* a, vtkIdType numPts)
   int skipVector = 0;
   char line[256], name[256];
   vtkDataArray* data;
-  char buffer[1024];
+  char buffer[256];
 
   if (!(this->ReadString(buffer) && this->ReadString(line)))
   {
@@ -2444,7 +2444,7 @@ int vtkDataReader::ReadNormalData(vtkDataSetAttributes* a, vtkIdType numPts)
   int skipNormal = 0;
   char line[256], name[256];
   vtkDataArray* data;
-  char buffer[1024];
+  char buffer[256];
 
   if (!(this->ReadString(buffer) && this->ReadString(line)))
   {
@@ -2496,7 +2496,7 @@ int vtkDataReader::ReadTensorData(vtkDataSetAttributes* a, vtkIdType numPts, vtk
   int skipTensor = 0;
   char line[256], name[256];
   vtkDataArray* data;
-  char buffer[1024];
+  char buffer[256];
 
   if (!(this->ReadString(buffer) && this->ReadString(line)))
   {
@@ -2546,7 +2546,7 @@ int vtkDataReader::ReadCoScalarData(vtkDataSetAttributes* a, vtkIdType numPts)
 {
   int i, j, idx, numComp = 0, skipScalar = 0;
   char name[256];
-  char buffer[1024];
+  char buffer[256];
 
   if (!(this->ReadString(buffer) && this->Read(&numComp)))
   {
@@ -2645,7 +2645,7 @@ int vtkDataReader::ReadTCoordsData(vtkDataSetAttributes* a, vtkIdType numPts)
   int skipTCoord = 0;
   char line[256], name[256];
   vtkDataArray* data;
-  char buffer[1024];
+  char buffer[256];
 
   if (!(this->ReadString(buffer) && this->Read(&dim) && this->ReadString(line)))
   {
@@ -2705,7 +2705,7 @@ int vtkDataReader::ReadGlobalIds(vtkDataSetAttributes* a, vtkIdType numPts)
   int skipGlobalIds = 0;
   char line[256], name[256];
   vtkDataArray* data;
-  char buffer[1024];
+  char buffer[256];
 
   if (!(this->ReadString(buffer) && this->ReadString(line)))
   {
@@ -2752,7 +2752,7 @@ int vtkDataReader::ReadPedigreeIds(vtkDataSetAttributes* a, vtkIdType numPts)
   int skipPedigreeIds = 0;
   char line[256], name[256];
   vtkAbstractArray* data;
-  char buffer[1024];
+  char buffer[256];
 
   if (!(this->ReadString(buffer) && this->ReadString(line)))
   {
@@ -2799,7 +2799,7 @@ int vtkDataReader::ReadEdgeFlags(vtkDataSetAttributes* a, vtkIdType numPts)
   int skipEdgeFlags = 0;
   char line[256], name[256];
   vtkAbstractArray* data;
-  char buffer[1024];
+  char buffer[256];
 
   if (!(this->ReadString(buffer) && this->ReadString(line)))
   {
@@ -3461,7 +3461,7 @@ vtkFieldData* vtkDataReader::ReadFieldData(FieldType fieldType)
   // Read the number of arrays specified
   for (i = 0; i < numArrays; i++)
   {
-    char buffer[1024];
+    char buffer[256];
     this->ReadString(buffer);
     if (strcmp(buffer, "NULL_ARRAY") == 0)
     {
diff --git a/IO/Legacy/vtkDataReader.h b/IO/Legacy/vtkDataReader.h
index 4bad0fdc6e..e074632307 100644
--- a/IO/Legacy/vtkDataReader.h
+++ b/IO/Legacy/vtkDataReader.h
@@ -468,7 +468,7 @@ public:
    * Internal function to read in a string up to 256 characters.
    * Returns zero if there was an error.
    */
-  int ReadString(char result[256]);
+  int ReadString(char (&result)[256]);
 
   /**
    * Helper method for reading in data.
diff --git a/IO/XML/vtkXMLPHyperTreeGridReader.cxx b/IO/XML/vtkXMLPHyperTreeGridReader.cxx
index a6097323e6..3c0bb3fffe 100644
--- a/IO/XML/vtkXMLPHyperTreeGridReader.cxx
+++ b/IO/XML/vtkXMLPHyperTreeGridReader.cxx
@@ -201,7 +201,7 @@ int vtkXMLPHyperTreeGridReader::ReadPieceData()
 
   if (!output)
   {
-    vtkErrorMacro("Incorrect type of output: " << output->GetClassName());
+    vtkErrorMacro("Incorrect type of output: " << this->GetClassName());
     return 0;
   }
 
diff --git a/Rendering/Volume/vtkUnstructuredGridPartialPreIntegration.cxx b/Rendering/Volume/vtkUnstructuredGridPartialPreIntegration.cxx
index 27a0c4d18d..f6388615ef 100644
--- a/Rendering/Volume/vtkUnstructuredGridPartialPreIntegration.cxx
+++ b/Rendering/Volume/vtkUnstructuredGridPartialPreIntegration.cxx
@@ -538,14 +538,14 @@ void vtkUnstructuredGridPartialPreIntegration::BuildPsiTable()
 
   for (int gammafi = 0; gammafi < PSI_TABLE_SIZE; gammafi++)
   {
-    float gammaf = ((float)gammafi + 0.0f) / PSI_TABLE_SIZE;
+    float gammaf = ((float)gammafi + 0.0f) / static_cast<int>(PSI_TABLE_SIZE);
     float taufD = gammaf / (1 - gammaf);
     for (int gammabi = 0; gammabi < PSI_TABLE_SIZE; gammabi++)
     {
-      float gammab = ((float)gammabi + 0.0f) / PSI_TABLE_SIZE;
+      float gammab = ((float)gammabi + 0.0f) / static_cast<int>(PSI_TABLE_SIZE);
       float taubD = gammab / (1 - gammab);
 
-      PsiTable[gammafi * PSI_TABLE_SIZE + gammabi] =
+      PsiTable[gammafi * static_cast<int>(PSI_TABLE_SIZE) + gammabi] =
         vtkUnstructuredGridLinearRayIntegrator::Psi(1, taufD, taubD);
     }
   }
diff --git a/Rendering/Volume/vtkUnstructuredGridPartialPreIntegration.h b/Rendering/Volume/vtkUnstructuredGridPartialPreIntegration.h
index 72b7fb6b42..3807b05dc4 100644
--- a/Rendering/Volume/vtkUnstructuredGridPartialPreIntegration.h
+++ b/Rendering/Volume/vtkUnstructuredGridPartialPreIntegration.h
@@ -113,8 +113,8 @@ inline float vtkUnstructuredGridPartialPreIntegration::Psi(float taufD, float ta
 {
   float gammaf = taufD / (taufD + 1);
   float gammab = taubD / (taubD + 1);
-  int gammafi = vtkMath::Floor(gammaf * PSI_TABLE_SIZE);
-  int gammabi = vtkMath::Floor(gammab * PSI_TABLE_SIZE);
+  int gammafi = vtkMath::Floor(gammaf * static_cast<int>(PSI_TABLE_SIZE));
+  int gammabi = vtkMath::Floor(gammab * static_cast<int>(PSI_TABLE_SIZE));
   return PsiTable[gammafi * PSI_TABLE_SIZE + gammabi];
 }
 
