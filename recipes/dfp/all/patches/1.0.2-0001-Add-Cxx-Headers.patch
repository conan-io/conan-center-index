From 2a18c294a783babdb6cf90a79e18872b1c3d057a Mon Sep 17 00:00:00 2001
From: Andrei Davydov <andrei_davydau1@epam.com>
Date: Mon, 13 Nov 2023 16:09:16 +0300
Subject: [PATCH] Add Cxx Headers

---
 native/include/DecimalNative.h   |  136 +++
 native/include/DecimalNative.hpp | 1520 ++++++++++++++++++++++++++++++
 2 files changed, 1656 insertions(+)
 create mode 100644 native/include/DecimalNative.h
 create mode 100644 native/include/DecimalNative.hpp

diff --git a/native/include/DecimalNative.h b/native/include/DecimalNative.h
new file mode 100644
index 0000000..b6dc6f6
--- /dev/null
+++ b/native/include/DecimalNative.h
@@ -0,0 +1,136 @@
+#pragma once
+#ifndef DECIMALNATIVE
+#define DECIMALNATIVE
+
+#ifdef __cplusplus
+#include <cstdint>
+#else
+#include <stdint.h>
+#endif
+
+#define DECIMALNATIVE_VERSION "1.0.2-SNAPSHOT"
+
+#ifdef __cplusplus
+#    define DECIMALNATIVE_MANGLING extern "C"
+#else
+#    define DECIMALNATIVE_MANGLING extern
+#endif
+
+#ifdef DECIMALNATIVE_SHARED
+#    ifdef _MSC_VER
+#        define DECIMALNATIVE_EXPORT    __declspec(dllimport)
+#    else
+#        define DECIMALNATIVE_EXPORT    __attribute__ ((visibility("default")))
+#    endif
+#else
+#    define DECIMALNATIVE_EXPORT
+#endif
+
+#define DECIMALNATIVE_API(x) DECIMALNATIVE_MANGLING DECIMALNATIVE_EXPORT x
+
+typedef struct {
+    uint64_t val;
+} decimal_native_t;
+
+inline static uint64_t ddfp_toUnderlying(decimal_native_t _value) {
+    return _value.val;
+}
+
+inline static decimal_native_t ddfp_fromUnderlying(uint64_t value) {
+    decimal_native_t dn;
+    dn.val = value;
+    return dn;
+}
+
+static const uint64_t DECIMAL_NATIVE_UNDERLYING_POSITIVE_INFINITY = 0x7800000000000000ULL;
+static const uint64_t DECIMAL_NATIVE_UNDERLYING_NEGATIVE_INFINITY = 0xF800000000000000ULL;
+static const uint64_t DECIMAL_NATIVE_UNDERLYING_NAN = 0x7C00000000000000ULL;
+static const uint64_t DECIMAL_NATIVE_UNDERLYING_NULL = 0xFFFFFFFFFFFFFF80ULL;	// = -0x80
+
+static const uint64_t DECIMAL_NATIVE_UNDERLYING_MIN_VALUE = 0xF7FB86F26FC0FFFFULL;
+static const uint64_t DECIMAL_NATIVE_UNDERLYING_MAX_VALUE = 0x77FB86F26FC0FFFFULL;
+
+static const uint64_t DECIMAL_NATIVE_UNDERLYING_MIN_POSITIVE_VALUE = 0x0000000000000001ULL;
+static const uint64_t DECIMAL_NATIVE_UNDERLYING_MAX_NEGATIVE_VALUE = 0x8000000000000001ULL;
+
+static const uint64_t DECIMAL_NATIVE_UNDERLYING_ZERO = 0x31C0000000000000ULL; // e=0, m=0, sign=0
+static const uint64_t DECIMAL_NATIVE_UNDERLYING_ONE = 0x31C0000000000001ULL;
+static const uint64_t DECIMAL_NATIVE_UNDERLYING_TWO = 0x31C0000000000002ULL;
+static const uint64_t DECIMAL_NATIVE_UNDERLYING_TEN = 0x31C000000000000AULL;
+static const uint64_t DECIMAL_NATIVE_UNDERLYING_HUNDRED = 0x31C0000000000064ULL;
+static const uint64_t DECIMAL_NATIVE_UNDERLYING_THOUSAND = 0x31C00000000003E8ULL;
+static const uint64_t DECIMAL_NATIVE_UNDERLYING_MILLION = 0x31C00000000F4240ULL;
+
+static const uint64_t DECIMAL_NATIVE_UNDERLYING_ONETENTH = 0x31A0000000000000ULL + 1;
+static const uint64_t DECIMAL_NATIVE_UNDERLYING_ONEHUNDREDTH = 0x3180000000000000ULL + 1;
+
+DECIMALNATIVE_API(decimal_native_t) ddfp_fromFloat64(double x);
+DECIMALNATIVE_API(decimal_native_t) ddfp_fromFloat32(float x);
+DECIMALNATIVE_API(decimal_native_t) ddfp_fromInt64(int64_t x);
+DECIMALNATIVE_API(decimal_native_t) ddfp_fromUInt64(uint64_t x);
+DECIMALNATIVE_API(double) ddfp_toFloat64(decimal_native_t x);
+DECIMALNATIVE_API(float) ddfp_toFloat32(decimal_native_t x);
+DECIMALNATIVE_API(int64_t) ddfp_toInt64(decimal_native_t x);
+DECIMALNATIVE_API(uint64_t) ddfp_toUInt64(decimal_native_t x);
+DECIMALNATIVE_API(decimal_native_t) ddfp_fromFixedPoint64(int64_t mantissa, int32_t tenPowerFactor);
+DECIMALNATIVE_API(int64_t) ddfp_toFixedPoint(decimal_native_t value, int32_t numberOfDigits);
+DECIMALNATIVE_API(decimal_native_t) ddfp_parse(const char * str);
+DECIMALNATIVE_API(decimal_native_t) ddfp_tryParse(const char * str, uint32_t * exception);
+DECIMALNATIVE_API(const char *) ddfp_to_string(decimal_native_t x);
+DECIMALNATIVE_API(const char *) ddfp_to_string_2(decimal_native_t x, char decimalMark);
+DECIMALNATIVE_API(const char *) ddfp_to_string_3(decimal_native_t x, char decimalMark, char * buffer512);
+DECIMALNATIVE_API(const char *) ddfp_to_scientific_string(decimal_native_t x);
+DECIMALNATIVE_API(const char *) ddfp_to_scientific_string_2(decimal_native_t x, char decimalMark);
+DECIMALNATIVE_API(const char *) ddfp_to_scientific_string_3(decimal_native_t x, char decimalMark, char * buffer512);
+DECIMALNATIVE_API(int) ddfp_isNaN(decimal_native_t x);
+DECIMALNATIVE_API(int) ddfp_isInfinity(decimal_native_t x);
+DECIMALNATIVE_API(int) ddfp_isPositiveInfinity(decimal_native_t x);
+DECIMALNATIVE_API(int) ddfp_isNegativeInfinity(decimal_native_t x);
+DECIMALNATIVE_API(int) ddfp_isFinite(decimal_native_t x);
+DECIMALNATIVE_API(int) ddfp_isNormal(decimal_native_t x);
+DECIMALNATIVE_API(int) ddfp_signBit(decimal_native_t x);
+DECIMALNATIVE_API(int32_t) ddfp_compare(decimal_native_t a, decimal_native_t b);
+DECIMALNATIVE_API(int) ddfp_isEqual(decimal_native_t a, decimal_native_t b);
+DECIMALNATIVE_API(int) ddfp_isNotEqual(decimal_native_t a, decimal_native_t b);
+DECIMALNATIVE_API(int) ddfp_isLess(decimal_native_t a, decimal_native_t b);
+DECIMALNATIVE_API(int) ddfp_isLessOrEqual(decimal_native_t a, decimal_native_t b);
+DECIMALNATIVE_API(int) ddfp_isGreater(decimal_native_t a, decimal_native_t b);
+DECIMALNATIVE_API(int) ddfp_isGreaterOrEqual(decimal_native_t a, decimal_native_t b);
+DECIMALNATIVE_API(int) ddfp_isZero(decimal_native_t a);
+DECIMALNATIVE_API(int) ddfp_isNonZero(decimal_native_t a);
+DECIMALNATIVE_API(int) ddfp_isPositive(decimal_native_t a);
+DECIMALNATIVE_API(int) ddfp_isNegative(decimal_native_t a);
+DECIMALNATIVE_API(int) ddfp_isNonPositive(decimal_native_t a);
+DECIMALNATIVE_API(int) ddfp_isNonNegative(decimal_native_t a);
+DECIMALNATIVE_API(decimal_native_t) ddfp_roundTowardsPositiveInfinity(decimal_native_t x);
+DECIMALNATIVE_API(decimal_native_t) ddfp_roundTowardsNegativeInfinity(decimal_native_t x);
+DECIMALNATIVE_API(decimal_native_t) ddfp_roundTowardsZero(decimal_native_t x);
+DECIMALNATIVE_API(decimal_native_t) ddfp_roundToNearestTiesAwayFromZero(decimal_native_t x);
+DECIMALNATIVE_API(decimal_native_t) ddfp_roundToNearestTiesToEven(decimal_native_t x);
+DECIMALNATIVE_API(decimal_native_t) ddfp_max2(decimal_native_t a, decimal_native_t b);
+DECIMALNATIVE_API(decimal_native_t) ddfp_max3(decimal_native_t a, decimal_native_t b, decimal_native_t c);
+DECIMALNATIVE_API(decimal_native_t) ddfp_max4(decimal_native_t a, decimal_native_t b, decimal_native_t c, decimal_native_t d);
+DECIMALNATIVE_API(decimal_native_t) ddfp_min2(decimal_native_t a, decimal_native_t b);
+DECIMALNATIVE_API(decimal_native_t) ddfp_min3(decimal_native_t a, decimal_native_t b, decimal_native_t c);
+DECIMALNATIVE_API(decimal_native_t) ddfp_min4(decimal_native_t a, decimal_native_t b, decimal_native_t c, decimal_native_t d);
+DECIMALNATIVE_API(decimal_native_t) ddfp_negate(decimal_native_t x);
+DECIMALNATIVE_API(decimal_native_t) ddfp_abs(decimal_native_t x);
+DECIMALNATIVE_API(decimal_native_t) ddfp_add2(decimal_native_t a, decimal_native_t b);
+DECIMALNATIVE_API(decimal_native_t) ddfp_add3(decimal_native_t a, decimal_native_t b, decimal_native_t c);
+DECIMALNATIVE_API(decimal_native_t) ddfp_add4(decimal_native_t a, decimal_native_t b, decimal_native_t c, decimal_native_t d);
+DECIMALNATIVE_API(decimal_native_t) ddfp_subtract(decimal_native_t a, decimal_native_t b);
+DECIMALNATIVE_API(decimal_native_t) ddfp_multiply2(decimal_native_t a, decimal_native_t b);
+DECIMALNATIVE_API(decimal_native_t) ddfp_multiply3(decimal_native_t a, decimal_native_t b, decimal_native_t c);
+DECIMALNATIVE_API(decimal_native_t) ddfp_multiply4(decimal_native_t a, decimal_native_t b, decimal_native_t c, decimal_native_t d);
+DECIMALNATIVE_API(decimal_native_t) ddfp_multiplyByInt32(decimal_native_t a, int32_t integer);
+DECIMALNATIVE_API(decimal_native_t) ddfp_multiplyByInt64(decimal_native_t a, int64_t integer);
+DECIMALNATIVE_API(decimal_native_t) ddfp_divide(decimal_native_t a, decimal_native_t b);
+DECIMALNATIVE_API(decimal_native_t) ddfp_divideByInt32(decimal_native_t x, int32_t integer);
+DECIMALNATIVE_API(decimal_native_t) ddfp_divideByInt64(decimal_native_t x, int64_t integer);
+DECIMALNATIVE_API(decimal_native_t) ddfp_multiplyAndAdd(decimal_native_t a, decimal_native_t b, decimal_native_t c);
+DECIMALNATIVE_API(decimal_native_t) ddfp_scaleByPowerOfTen(decimal_native_t a, int32_t n);
+DECIMALNATIVE_API(decimal_native_t) ddfp_mean2(decimal_native_t a, decimal_native_t b);
+DECIMALNATIVE_API(decimal_native_t) ddfp_nextUp(decimal_native_t x);
+DECIMALNATIVE_API(decimal_native_t) ddfp_nextDown(decimal_native_t x);
+
+#endif
diff --git a/native/include/DecimalNative.hpp b/native/include/DecimalNative.hpp
new file mode 100644
index 0000000..9c8ef94
--- /dev/null
+++ b/native/include/DecimalNative.hpp
@@ -0,0 +1,1520 @@
+#pragma once
+#ifndef DECIMALNATIVEHPP
+#define DECIMALNATIVEHPP
+
+#include "DecimalNative.h"
+#include <iostream>
+#include <string>
+#include <cstring>
+#include <stdexcept>
+
+#define DN_STRINGIFY(x) #x
+#define DN_TOSTRING(x) DN_STRINGIFY(x)
+#if defined(_MSC_VER)
+#define DN_FUNC (std::string("At ") + __FILE__ + "[" + DN_TOSTRING(__LINE__) + "] " + __FUNCSIG__)
+#elif defined(__GNUC__)
+#define DN_FUNC (std::string("At ") + __FILE__ + "[" + DN_TOSTRING(__LINE__) + "] " + __PRETTY_FUNCTION__)
+#else
+#define DN_FUNC (std::string("At ") + __FILE__ + "[" + DN_TOSTRING(__LINE__) + "] " + __func__)
+#endif
+#define DN_NAMEOF(a) #a
+
+inline std::ostream& operator <<(std::ostream& output, decimal_native_t const& a) {
+    char str[512];
+    output << ddfp_to_string_3(a, '.', str);
+    return output;
+}
+
+inline std::istream& operator >>(std::istream& input, decimal_native_t& a) {
+    std::string word;
+    input >> word;
+    a = ddfp_parse(word.c_str());
+    return input;
+}
+
+namespace epam {
+    namespace deltix {
+        namespace dfp {
+
+            template <bool nullCheck = false>
+            class Decimal64_t {
+            protected:
+                decimal_native_t _value;
+
+            public:
+                uint64_t toUnderlying() const {
+                    return _value.val;
+                }
+                static Decimal64_t fromUnderlying(uint64_t value) {
+                    decimal_native_t dn;
+                    dn.val = value;
+                    return Decimal64_t(dn);
+                }
+                Decimal64_t() {
+                    _value.val = DECIMAL_NATIVE_UNDERLYING_ZERO;
+                }
+                Decimal64_t(Decimal64_t const &b) {
+                    _value = b._value;
+                }
+                Decimal64_t& operator =(Decimal64_t const &b) {
+                    _value = b._value;
+                    return *this;
+                }
+                Decimal64_t(decimal_native_t const &b) {
+                    _value = b;
+                }
+                Decimal64_t& operator =(decimal_native_t const &b) {
+                    _value = b;
+                    return *this;
+                }
+                explicit operator decimal_native_t() const {
+                    return _value;
+                }
+                Decimal64_t operator +(Decimal64_t const& b) const {
+                    return add(*this, b);
+                }
+                Decimal64_t& operator +=(Decimal64_t const& b) {
+                    *this = add(*this, b);
+                    return *this;
+                }
+                Decimal64_t& operator++() {
+                    *this += fromUnderlying(DECIMAL_NATIVE_UNDERLYING_ONE);
+                    return *this;
+                }
+                Decimal64_t operator++(int) {
+                    Decimal64_t ret = *this;
+                    ++*this;
+                    return ret;
+                }
+                Decimal64_t operator -(Decimal64_t const& b) const {
+                    return subtract(*this, b);
+                }
+                Decimal64_t& operator -=(Decimal64_t const& b) {
+                    *this = subtract(*this, b);
+                    return *this;
+                }
+                Decimal64_t& operator--() {
+                    *this -= fromUnderlying(DECIMAL_NATIVE_UNDERLYING_ONE);
+                    return *this;
+                }
+                Decimal64_t operator--(int) {
+                    Decimal64_t ret = *this;
+                    --*this;
+                    return ret;
+                }
+                Decimal64_t operator *(Decimal64_t const& b) const {
+                    return multiply(*this, b);
+                }
+                Decimal64_t& operator *=(Decimal64_t const& b) {
+                    *this = multiply(*this, b);
+                    return *this;
+                }
+                Decimal64_t operator /(Decimal64_t const& b) const {
+                    return divide(*this, b);
+                }
+                Decimal64_t& operator /=(Decimal64_t const& b) {
+                    *this = divide(*this, b);
+                    return *this;
+                }
+                explicit operator std::string() const {
+                    char str[512];
+                    return std::string(ddfp_to_string_3(_value, '.', str));
+                }
+                friend std::ostream& operator <<(std::ostream& output, Decimal64_t const& a) {
+                    output << a._value;
+                    return output;
+                }
+                friend std::istream& operator >>(std::istream& input, Decimal64_t& a) {
+                    decimal_native_t val;
+                    input >> val;
+                    a = Decimal64_t(val);
+                    return input;
+                }
+                bool isNull() const {
+                    return toUnderlying() == DECIMAL_NATIVE_UNDERLYING_NULL;
+                }
+
+
+                explicit Decimal64_t(double x) {
+                    _value = ddfp_fromFloat64(x);
+                }
+
+//--------------------------------------------------------------------------------------------------------
+
+                explicit Decimal64_t(float x) {
+                    _value = ddfp_fromFloat32(x);
+                }
+
+//--------------------------------------------------------------------------------------------------------
+
+                explicit Decimal64_t(int64_t x) {
+                    _value = ddfp_fromInt64(x);
+                }
+
+//--------------------------------------------------------------------------------------------------------
+
+                explicit Decimal64_t(uint64_t x) {
+                    _value = ddfp_fromUInt64(x);
+                }
+
+//--------------------------------------------------------------------------------------------------------
+
+                explicit operator double() const {
+                    return toFloat64(_value);
+                }
+
+                double toFloat64() const {
+                    return nullCheck
+                        ? toFloat64Checked()
+                        : toFloat64Unchecked();
+                }
+
+                double toFloat64Checked() const {
+                    if (isNull())
+                        throw std::invalid_argument(DN_FUNC + ": This object is null.");
+
+                    return toFloat64Unchecked();
+                }
+
+                double toFloat64Unchecked() const {
+                    return ddfp_toFloat64(_value);
+                }
+
+//--------------------------------------------------------------------------------------------------------
+
+                explicit operator float() const {
+                    return toFloat32(_value);
+                }
+
+                float toFloat32() const {
+                    return nullCheck
+                        ? toFloat32Checked()
+                        : toFloat32Unchecked();
+                }
+
+                float toFloat32Checked() const {
+                    if (isNull())
+                        throw std::invalid_argument(DN_FUNC + ": This object is null.");
+
+                    return toFloat32Unchecked();
+                }
+
+                float toFloat32Unchecked() const {
+                    return ddfp_toFloat32(_value);
+                }
+
+//--------------------------------------------------------------------------------------------------------
+
+                explicit operator int64_t() const {
+                    return toInt64(_value);
+                }
+
+                int64_t toInt64() const {
+                    return nullCheck
+                        ? toInt64Checked()
+                        : toInt64Unchecked();
+                }
+
+                int64_t toInt64Checked() const {
+                    if (isNull())
+                        throw std::invalid_argument(DN_FUNC + ": This object is null.");
+
+                    return toInt64Unchecked();
+                }
+
+                int64_t toInt64Unchecked() const {
+                    return ddfp_toInt64(_value);
+                }
+
+//--------------------------------------------------------------------------------------------------------
+
+                explicit operator uint64_t() const {
+                    return toUInt64(_value);
+                }
+
+                uint64_t toUInt64() const {
+                    return nullCheck
+                        ? toUInt64Checked()
+                        : toUInt64Unchecked();
+                }
+
+                uint64_t toUInt64Checked() const {
+                    if (isNull())
+                        throw std::invalid_argument(DN_FUNC + ": This object is null.");
+
+                    return toUInt64Unchecked();
+                }
+
+                uint64_t toUInt64Unchecked() const {
+                    return ddfp_toUInt64(_value);
+                }
+
+//--------------------------------------------------------------------------------------------------------
+
+                static Decimal64_t fromFixedPoint(int64_t mantissa, int32_t tenPowerFactor) {
+                    return Decimal64_t(ddfp_fromFixedPoint64(mantissa, tenPowerFactor));
+                }
+
+//--------------------------------------------------------------------------------------------------------
+
+                int64_t toFixedPoint(int32_t numberOfDigits) const {
+                    return nullCheck
+                        ? toFixedPointChecked(numberOfDigits)
+                        : toFixedPointUnchecked(numberOfDigits);
+                }
+
+                int64_t toFixedPointChecked(int32_t numberOfDigits) const {
+                    if (isNull())
+                        throw std::invalid_argument(DN_FUNC + ": This object is null.");
+
+                    return toFixedPointUnchecked(numberOfDigits);
+                }
+
+                int64_t toFixedPointUnchecked(int32_t numberOfDigits) const {
+                    return ddfp_toFixedPoint(_value, numberOfDigits);
+                }
+
+//--------------------------------------------------------------------------------------------------------
+
+                explicit Decimal64_t(const char * str) {
+                    _value = ddfp_parse(str);
+                }
+
+                explicit Decimal64_t(const std::string &str) : Decimal64_t(str.c_str()) {
+                }
+
+//--------------------------------------------------------------------------------------------------------
+
+                static Decimal64_t tryParse(const char * str, uint32_t * exception) {
+                    return ddfp_tryParse(str, exception);
+                }
+
+//--------------------------------------------------------------------------------------------------------
+
+                explicit operator const char *() const {
+                    return to_string(_value);
+                }
+
+                const char * to_string() const {
+                    return nullCheck
+                        ? to_stringChecked()
+                        : to_stringUnchecked();
+                }
+
+                const char * to_stringChecked() const {
+                    if (isNull())
+                        throw std::invalid_argument(DN_FUNC + ": This object is null.");
+
+                    return to_stringUnchecked();
+                }
+
+                const char * to_stringUnchecked() const {
+                    return ddfp_to_string(_value);
+                }
+
+//--------------------------------------------------------------------------------------------------------
+
+                static const char * to_string_2(Decimal64_t const& x, char decimalMark) {
+                    return nullCheck
+                        ? to_string_2Checked(x, decimalMark)
+                        : to_string_2Unchecked(x, decimalMark);
+                }
+
+                static const char * to_string_2Checked(Decimal64_t const& x, char decimalMark) {
+                    if (x.isNull())
+                        throw std::invalid_argument(DN_FUNC + ": Argument '" + DN_NAMEOF(x) + "' is null.");
+
+                    return to_string_2Unchecked(x, decimalMark);
+                }
+
+                static const char * to_string_2Unchecked(Decimal64_t const& x, char decimalMark) {
+                    return ddfp_to_string_2(x._value, decimalMark);
+                }
+
+//--------------------------------------------------------------------------------------------------------
+
+                static const char * to_string_3(Decimal64_t const& x, char decimalMark, char * buffer512) {
+                    return nullCheck
+                        ? to_string_3Checked(x, decimalMark, buffer512)
+                        : to_string_3Unchecked(x, decimalMark, buffer512);
+                }
+
+                static const char * to_string_3Checked(Decimal64_t const& x, char decimalMark, char * buffer512) {
+                    if (x.isNull())
+                        throw std::invalid_argument(DN_FUNC + ": Argument '" + DN_NAMEOF(x) + "' is null.");
+
+                    return to_string_3Unchecked(x, decimalMark, buffer512);
+                }
+
+                static const char * to_string_3Unchecked(Decimal64_t const& x, char decimalMark, char * buffer512) {
+                    return ddfp_to_string_3(x._value, decimalMark, buffer512);
+                }
+
+//--------------------------------------------------------------------------------------------------------
+
+                static const char * to_scientific_string(Decimal64_t const& x) {
+                    return nullCheck
+                        ? to_scientific_stringChecked(x)
+                        : to_scientific_stringUnchecked(x);
+                }
+
+                static const char * to_scientific_stringChecked(Decimal64_t const& x) {
+                    if (x.isNull())
+                        throw std::invalid_argument(DN_FUNC + ": Argument '" + DN_NAMEOF(x) + "' is null.");
+
+                    return to_scientific_stringUnchecked(x);
+                }
+
+                static const char * to_scientific_stringUnchecked(Decimal64_t const& x) {
+                    return ddfp_to_scientific_string(x._value);
+                }
+
+//--------------------------------------------------------------------------------------------------------
+
+                static const char * to_scientific_string_2(Decimal64_t const& x, char decimalMark) {
+                    return nullCheck
+                        ? to_scientific_string_2Checked(x, decimalMark)
+                        : to_scientific_string_2Unchecked(x, decimalMark);
+                }
+
+                static const char * to_scientific_string_2Checked(Decimal64_t const& x, char decimalMark) {
+                    if (x.isNull())
+                        throw std::invalid_argument(DN_FUNC + ": Argument '" + DN_NAMEOF(x) + "' is null.");
+
+                    return to_scientific_string_2Unchecked(x, decimalMark);
+                }
+
+                static const char * to_scientific_string_2Unchecked(Decimal64_t const& x, char decimalMark) {
+                    return ddfp_to_scientific_string_2(x._value, decimalMark);
+                }
+
+//--------------------------------------------------------------------------------------------------------
+
+                static const char * to_scientific_string_3(Decimal64_t const& x, char decimalMark, char * buffer512) {
+                    return nullCheck
+                        ? to_scientific_string_3Checked(x, decimalMark, buffer512)
+                        : to_scientific_string_3Unchecked(x, decimalMark, buffer512);
+                }
+
+                static const char * to_scientific_string_3Checked(Decimal64_t const& x, char decimalMark, char * buffer512) {
+                    if (x.isNull())
+                        throw std::invalid_argument(DN_FUNC + ": Argument '" + DN_NAMEOF(x) + "' is null.");
+
+                    return to_scientific_string_3Unchecked(x, decimalMark, buffer512);
+                }
+
+                static const char * to_scientific_string_3Unchecked(Decimal64_t const& x, char decimalMark, char * buffer512) {
+                    return ddfp_to_scientific_string_3(x._value, decimalMark, buffer512);
+                }
+
+//--------------------------------------------------------------------------------------------------------
+
+                bool isNaN() const {
+                    return nullCheck
+                        ? isNaNChecked()
+                        : isNaNUnchecked();
+                }
+
+                bool isNaNChecked() const {
+                    if (isNull())
+                        throw std::invalid_argument(DN_FUNC + ": This object is null.");
+
+                    return isNaNUnchecked();
+                }
+
+                bool isNaNUnchecked() const {
+                    return ddfp_isNaN(_value) != 0;
+                }
+
+//--------------------------------------------------------------------------------------------------------
+
+                bool isInfinity() const {
+                    return nullCheck
+                        ? isInfinityChecked()
+                        : isInfinityUnchecked();
+                }
+
+                bool isInfinityChecked() const {
+                    if (isNull())
+                        throw std::invalid_argument(DN_FUNC + ": This object is null.");
+
+                    return isInfinityUnchecked();
+                }
+
+                bool isInfinityUnchecked() const {
+                    return ddfp_isInfinity(_value) != 0;
+                }
+
+//--------------------------------------------------------------------------------------------------------
+
+                bool isPositiveInfinity() const {
+                    return nullCheck
+                        ? isPositiveInfinityChecked()
+                        : isPositiveInfinityUnchecked();
+                }
+
+                bool isPositiveInfinityChecked() const {
+                    if (isNull())
+                        throw std::invalid_argument(DN_FUNC + ": This object is null.");
+
+                    return isPositiveInfinityUnchecked();
+                }
+
+                bool isPositiveInfinityUnchecked() const {
+                    return ddfp_isPositiveInfinity(_value) != 0;
+                }
+
+//--------------------------------------------------------------------------------------------------------
+
+                bool isNegativeInfinity() const {
+                    return nullCheck
+                        ? isNegativeInfinityChecked()
+                        : isNegativeInfinityUnchecked();
+                }
+
+                bool isNegativeInfinityChecked() const {
+                    if (isNull())
+                        throw std::invalid_argument(DN_FUNC + ": This object is null.");
+
+                    return isNegativeInfinityUnchecked();
+                }
+
+                bool isNegativeInfinityUnchecked() const {
+                    return ddfp_isNegativeInfinity(_value) != 0;
+                }
+
+//--------------------------------------------------------------------------------------------------------
+
+                bool isFinite() const {
+                    return nullCheck
+                        ? isFiniteChecked()
+                        : isFiniteUnchecked();
+                }
+
+                bool isFiniteChecked() const {
+                    if (isNull())
+                        throw std::invalid_argument(DN_FUNC + ": This object is null.");
+
+                    return isFiniteUnchecked();
+                }
+
+                bool isFiniteUnchecked() const {
+                    return ddfp_isFinite(_value) != 0;
+                }
+
+//--------------------------------------------------------------------------------------------------------
+
+                bool isNormal() const {
+                    return nullCheck
+                        ? isNormalChecked()
+                        : isNormalUnchecked();
+                }
+
+                bool isNormalChecked() const {
+                    if (isNull())
+                        throw std::invalid_argument(DN_FUNC + ": This object is null.");
+
+                    return isNormalUnchecked();
+                }
+
+                bool isNormalUnchecked() const {
+                    return ddfp_isNormal(_value) != 0;
+                }
+
+//--------------------------------------------------------------------------------------------------------
+
+                bool signBit() const {
+                    return nullCheck
+                        ? signBitChecked()
+                        : signBitUnchecked();
+                }
+
+                bool signBitChecked() const {
+                    if (isNull())
+                        throw std::invalid_argument(DN_FUNC + ": This object is null.");
+
+                    return signBitUnchecked();
+                }
+
+                bool signBitUnchecked() const {
+                    return ddfp_signBit(_value) != 0;
+                }
+
+//--------------------------------------------------------------------------------------------------------
+
+                int32_t compare(Decimal64_t const& b) const {
+                    return nullCheck
+                        ? compareChecked(b)
+                        : compareUnchecked(b);
+                }
+
+                int32_t compareChecked(Decimal64_t const& b) const {
+                    if (isNull())
+                        throw std::invalid_argument(DN_FUNC + ": This object is null.");
+                    if (b.isNull())
+                        throw std::invalid_argument(DN_FUNC + ": Argument '" + DN_NAMEOF(b) + "' is null.");
+
+                    return compareUnchecked(b);
+                }
+
+                int32_t compareUnchecked(Decimal64_t const& b) const {
+                    return ddfp_compare(_value, b._value);
+                }
+
+//--------------------------------------------------------------------------------------------------------
+
+                bool operator ==(Decimal64_t const &b) const {
+                    if (toUnderlying() == DECIMAL_NATIVE_UNDERLYING_NULL &&
+                        b.toUnderlying() == DECIMAL_NATIVE_UNDERLYING_NULL)
+                        return true;
+
+                    return ddfp_isEqual(_value, b._value) != 0;
+                }
+
+
+//--------------------------------------------------------------------------------------------------------
+
+                bool operator !=(Decimal64_t const &b) const {
+                    if (toUnderlying() == DECIMAL_NATIVE_UNDERLYING_NULL &&
+                        b.toUnderlying() == DECIMAL_NATIVE_UNDERLYING_NULL)
+                        return false;
+
+                    return ddfp_isNotEqual(_value, b._value) != 0;
+                }
+
+
+//--------------------------------------------------------------------------------------------------------
+
+                bool operator <(Decimal64_t const &b) const {
+                    return isLess(b);
+                }
+
+                bool isLess(Decimal64_t const &b) const {
+                    return nullCheck
+                        ? isLessChecked(b)
+                        : isLessUnchecked(b);
+                }
+
+                bool isLessChecked(Decimal64_t const &b) const {
+                    if (isNull())
+                        throw std::invalid_argument(DN_FUNC + ": This object is null.");
+                    if (b.isNull())
+                        throw std::invalid_argument(DN_FUNC + ": Argument '" + DN_NAMEOF(b) + "' is null.");
+
+                    return isLessUnchecked(b);
+                }
+
+                bool isLessUnchecked(Decimal64_t const &b) const {
+                    return ddfp_isLess(_value, b._value) != 0;
+                }
+
+//--------------------------------------------------------------------------------------------------------
+
+                bool operator <=(Decimal64_t const &b) const {
+                    return isLessOrEqual(b);
+                }
+
+                bool isLessOrEqual(Decimal64_t const &b) const {
+                    return nullCheck
+                        ? isLessOrEqualChecked(b)
+                        : isLessOrEqualUnchecked(b);
+                }
+
+                bool isLessOrEqualChecked(Decimal64_t const &b) const {
+                    if (isNull())
+                        throw std::invalid_argument(DN_FUNC + ": This object is null.");
+                    if (b.isNull())
+                        throw std::invalid_argument(DN_FUNC + ": Argument '" + DN_NAMEOF(b) + "' is null.");
+
+                    return isLessOrEqualUnchecked(b);
+                }
+
+                bool isLessOrEqualUnchecked(Decimal64_t const &b) const {
+                    return ddfp_isLessOrEqual(_value, b._value) != 0;
+                }
+
+//--------------------------------------------------------------------------------------------------------
+
+                bool operator >(Decimal64_t const &b) const {
+                    return isGreater(b);
+                }
+
+                bool isGreater(Decimal64_t const &b) const {
+                    return nullCheck
+                        ? isGreaterChecked(b)
+                        : isGreaterUnchecked(b);
+                }
+
+                bool isGreaterChecked(Decimal64_t const &b) const {
+                    if (isNull())
+                        throw std::invalid_argument(DN_FUNC + ": This object is null.");
+                    if (b.isNull())
+                        throw std::invalid_argument(DN_FUNC + ": Argument '" + DN_NAMEOF(b) + "' is null.");
+
+                    return isGreaterUnchecked(b);
+                }
+
+                bool isGreaterUnchecked(Decimal64_t const &b) const {
+                    return ddfp_isGreater(_value, b._value) != 0;
+                }
+
+//--------------------------------------------------------------------------------------------------------
+
+                bool operator >=(Decimal64_t const &b) const {
+                    return isGreaterOrEqual(b);
+                }
+
+                bool isGreaterOrEqual(Decimal64_t const &b) const {
+                    return nullCheck
+                        ? isGreaterOrEqualChecked(b)
+                        : isGreaterOrEqualUnchecked(b);
+                }
+
+                bool isGreaterOrEqualChecked(Decimal64_t const &b) const {
+                    if (isNull())
+                        throw std::invalid_argument(DN_FUNC + ": This object is null.");
+                    if (b.isNull())
+                        throw std::invalid_argument(DN_FUNC + ": Argument '" + DN_NAMEOF(b) + "' is null.");
+
+                    return isGreaterOrEqualUnchecked(b);
+                }
+
+                bool isGreaterOrEqualUnchecked(Decimal64_t const &b) const {
+                    return ddfp_isGreaterOrEqual(_value, b._value) != 0;
+                }
+
+//--------------------------------------------------------------------------------------------------------
+
+                bool isZero() const {
+                    return nullCheck
+                        ? isZeroChecked()
+                        : isZeroUnchecked();
+                }
+
+                bool isZeroChecked() const {
+                    if (isNull())
+                        throw std::invalid_argument(DN_FUNC + ": This object is null.");
+
+                    return isZeroUnchecked();
+                }
+
+                bool isZeroUnchecked() const {
+                    return ddfp_isZero(_value) != 0;
+                }
+
+//--------------------------------------------------------------------------------------------------------
+
+                bool isNonZero() const {
+                    return nullCheck
+                        ? isNonZeroChecked()
+                        : isNonZeroUnchecked();
+                }
+
+                bool isNonZeroChecked() const {
+                    if (isNull())
+                        throw std::invalid_argument(DN_FUNC + ": This object is null.");
+
+                    return isNonZeroUnchecked();
+                }
+
+                bool isNonZeroUnchecked() const {
+                    return ddfp_isNonZero(_value) != 0;
+                }
+
+//--------------------------------------------------------------------------------------------------------
+
+                bool isPositive() const {
+                    return nullCheck
+                        ? isPositiveChecked()
+                        : isPositiveUnchecked();
+                }
+
+                bool isPositiveChecked() const {
+                    if (isNull())
+                        throw std::invalid_argument(DN_FUNC + ": This object is null.");
+
+                    return isPositiveUnchecked();
+                }
+
+                bool isPositiveUnchecked() const {
+                    return ddfp_isPositive(_value) != 0;
+                }
+
+//--------------------------------------------------------------------------------------------------------
+
+                bool isNegative() const {
+                    return nullCheck
+                        ? isNegativeChecked()
+                        : isNegativeUnchecked();
+                }
+
+                bool isNegativeChecked() const {
+                    if (isNull())
+                        throw std::invalid_argument(DN_FUNC + ": This object is null.");
+
+                    return isNegativeUnchecked();
+                }
+
+                bool isNegativeUnchecked() const {
+                    return ddfp_isNegative(_value) != 0;
+                }
+
+//--------------------------------------------------------------------------------------------------------
+
+                bool isNonPositive() const {
+                    return nullCheck
+                        ? isNonPositiveChecked()
+                        : isNonPositiveUnchecked();
+                }
+
+                bool isNonPositiveChecked() const {
+                    if (isNull())
+                        throw std::invalid_argument(DN_FUNC + ": This object is null.");
+
+                    return isNonPositiveUnchecked();
+                }
+
+                bool isNonPositiveUnchecked() const {
+                    return ddfp_isNonPositive(_value) != 0;
+                }
+
+//--------------------------------------------------------------------------------------------------------
+
+                bool isNonNegative() const {
+                    return nullCheck
+                        ? isNonNegativeChecked()
+                        : isNonNegativeUnchecked();
+                }
+
+                bool isNonNegativeChecked() const {
+                    if (isNull())
+                        throw std::invalid_argument(DN_FUNC + ": This object is null.");
+
+                    return isNonNegativeUnchecked();
+                }
+
+                bool isNonNegativeUnchecked() const {
+                    return ddfp_isNonNegative(_value) != 0;
+                }
+
+//--------------------------------------------------------------------------------------------------------
+
+                Decimal64_t& roundTowardsPositiveInfinity() {
+                    return nullCheck
+                        ? roundTowardsPositiveInfinityChecked()
+                        : roundTowardsPositiveInfinityUnchecked();
+                }
+
+                Decimal64_t& roundTowardsPositiveInfinityChecked() {
+                    if (isNull())
+                        throw std::invalid_argument(DN_FUNC + ": This object is null.");
+
+                    return roundTowardsPositiveInfinityUnchecked();
+                }
+
+                Decimal64_t& roundTowardsPositiveInfinityUnchecked() {
+                    _value = ddfp_roundTowardsPositiveInfinity(_value);
+
+                    return *this;
+                }
+
+//--------------------------------------------------------------------------------------------------------
+
+                Decimal64_t& roundTowardsNegativeInfinity() {
+                    return nullCheck
+                        ? roundTowardsNegativeInfinityChecked()
+                        : roundTowardsNegativeInfinityUnchecked();
+                }
+
+                Decimal64_t& roundTowardsNegativeInfinityChecked() {
+                    if (isNull())
+                        throw std::invalid_argument(DN_FUNC + ": This object is null.");
+
+                    return roundTowardsNegativeInfinityUnchecked();
+                }
+
+                Decimal64_t& roundTowardsNegativeInfinityUnchecked() {
+                    _value = ddfp_roundTowardsNegativeInfinity(_value);
+
+                    return *this;
+                }
+
+//--------------------------------------------------------------------------------------------------------
+
+                Decimal64_t& roundTowardsZero() {
+                    return nullCheck
+                        ? roundTowardsZeroChecked()
+                        : roundTowardsZeroUnchecked();
+                }
+
+                Decimal64_t& roundTowardsZeroChecked() {
+                    if (isNull())
+                        throw std::invalid_argument(DN_FUNC + ": This object is null.");
+
+                    return roundTowardsZeroUnchecked();
+                }
+
+                Decimal64_t& roundTowardsZeroUnchecked() {
+                    _value = ddfp_roundTowardsZero(_value);
+
+                    return *this;
+                }
+
+//--------------------------------------------------------------------------------------------------------
+
+                Decimal64_t& roundToNearestTiesAwayFromZero() {
+                    return nullCheck
+                        ? roundToNearestTiesAwayFromZeroChecked()
+                        : roundToNearestTiesAwayFromZeroUnchecked();
+                }
+
+                Decimal64_t& roundToNearestTiesAwayFromZeroChecked() {
+                    if (isNull())
+                        throw std::invalid_argument(DN_FUNC + ": This object is null.");
+
+                    return roundToNearestTiesAwayFromZeroUnchecked();
+                }
+
+                Decimal64_t& roundToNearestTiesAwayFromZeroUnchecked() {
+                    _value = ddfp_roundToNearestTiesAwayFromZero(_value);
+
+                    return *this;
+                }
+
+//--------------------------------------------------------------------------------------------------------
+
+                Decimal64_t& roundToNearestTiesToEven() {
+                    return nullCheck
+                        ? roundToNearestTiesToEvenChecked()
+                        : roundToNearestTiesToEvenUnchecked();
+                }
+
+                Decimal64_t& roundToNearestTiesToEvenChecked() {
+                    if (isNull())
+                        throw std::invalid_argument(DN_FUNC + ": This object is null.");
+
+                    return roundToNearestTiesToEvenUnchecked();
+                }
+
+                Decimal64_t& roundToNearestTiesToEvenUnchecked() {
+                    _value = ddfp_roundToNearestTiesToEven(_value);
+
+                    return *this;
+                }
+
+//--------------------------------------------------------------------------------------------------------
+
+                static Decimal64_t max(Decimal64_t const& a, Decimal64_t const& b) {
+                    return nullCheck
+                        ? maxChecked(a, b)
+                        : maxUnchecked(a, b);
+                }
+
+                static Decimal64_t maxChecked(Decimal64_t const& a, Decimal64_t const& b) {
+                    if (a.isNull())
+                        throw std::invalid_argument(DN_FUNC + ": Argument '" + DN_NAMEOF(a) + "' is null.");
+                    if (b.isNull())
+                        throw std::invalid_argument(DN_FUNC + ": Argument '" + DN_NAMEOF(b) + "' is null.");
+
+                    return maxUnchecked(a, b);
+                }
+
+                static Decimal64_t maxUnchecked(Decimal64_t const& a, Decimal64_t const& b) {
+                    return Decimal64_t(ddfp_max2(a._value, b._value));
+                }
+
+//--------------------------------------------------------------------------------------------------------
+
+                static Decimal64_t max(Decimal64_t const& a, Decimal64_t const& b, Decimal64_t const& c) {
+                    return nullCheck
+                        ? maxChecked(a, b, c)
+                        : maxUnchecked(a, b, c);
+                }
+
+                static Decimal64_t maxChecked(Decimal64_t const& a, Decimal64_t const& b, Decimal64_t const& c) {
+                    if (a.isNull())
+                        throw std::invalid_argument(DN_FUNC + ": Argument '" + DN_NAMEOF(a) + "' is null.");
+                    if (b.isNull())
+                        throw std::invalid_argument(DN_FUNC + ": Argument '" + DN_NAMEOF(b) + "' is null.");
+                    if (c.isNull())
+                        throw std::invalid_argument(DN_FUNC + ": Argument '" + DN_NAMEOF(c) + "' is null.");
+
+                    return maxUnchecked(a, b, c);
+                }
+
+                static Decimal64_t maxUnchecked(Decimal64_t const& a, Decimal64_t const& b, Decimal64_t const& c) {
+                    return Decimal64_t(ddfp_max3(a._value, b._value, c._value));
+                }
+
+//--------------------------------------------------------------------------------------------------------
+
+                static Decimal64_t max(Decimal64_t const& a, Decimal64_t const& b, Decimal64_t const& c, Decimal64_t const& d) {
+                    return nullCheck
+                        ? maxChecked(a, b, c, d)
+                        : maxUnchecked(a, b, c, d);
+                }
+
+                static Decimal64_t maxChecked(Decimal64_t const& a, Decimal64_t const& b, Decimal64_t const& c, Decimal64_t const& d) {
+                    if (a.isNull())
+                        throw std::invalid_argument(DN_FUNC + ": Argument '" + DN_NAMEOF(a) + "' is null.");
+                    if (b.isNull())
+                        throw std::invalid_argument(DN_FUNC + ": Argument '" + DN_NAMEOF(b) + "' is null.");
+                    if (c.isNull())
+                        throw std::invalid_argument(DN_FUNC + ": Argument '" + DN_NAMEOF(c) + "' is null.");
+                    if (d.isNull())
+                        throw std::invalid_argument(DN_FUNC + ": Argument '" + DN_NAMEOF(d) + "' is null.");
+
+                    return maxUnchecked(a, b, c, d);
+                }
+
+                static Decimal64_t maxUnchecked(Decimal64_t const& a, Decimal64_t const& b, Decimal64_t const& c, Decimal64_t const& d) {
+                    return Decimal64_t(ddfp_max4(a._value, b._value, c._value, d._value));
+                }
+
+//--------------------------------------------------------------------------------------------------------
+
+                static Decimal64_t min(Decimal64_t const& a, Decimal64_t const& b) {
+                    return nullCheck
+                        ? minChecked(a, b)
+                        : minUnchecked(a, b);
+                }
+
+                static Decimal64_t minChecked(Decimal64_t const& a, Decimal64_t const& b) {
+                    if (a.isNull())
+                        throw std::invalid_argument(DN_FUNC + ": Argument '" + DN_NAMEOF(a) + "' is null.");
+                    if (b.isNull())
+                        throw std::invalid_argument(DN_FUNC + ": Argument '" + DN_NAMEOF(b) + "' is null.");
+
+                    return minUnchecked(a, b);
+                }
+
+                static Decimal64_t minUnchecked(Decimal64_t const& a, Decimal64_t const& b) {
+                    return Decimal64_t(ddfp_min2(a._value, b._value));
+                }
+
+//--------------------------------------------------------------------------------------------------------
+
+                static Decimal64_t min(Decimal64_t const& a, Decimal64_t const& b, Decimal64_t const& c) {
+                    return nullCheck
+                        ? minChecked(a, b, c)
+                        : minUnchecked(a, b, c);
+                }
+
+                static Decimal64_t minChecked(Decimal64_t const& a, Decimal64_t const& b, Decimal64_t const& c) {
+                    if (a.isNull())
+                        throw std::invalid_argument(DN_FUNC + ": Argument '" + DN_NAMEOF(a) + "' is null.");
+                    if (b.isNull())
+                        throw std::invalid_argument(DN_FUNC + ": Argument '" + DN_NAMEOF(b) + "' is null.");
+                    if (c.isNull())
+                        throw std::invalid_argument(DN_FUNC + ": Argument '" + DN_NAMEOF(c) + "' is null.");
+
+                    return minUnchecked(a, b, c);
+                }
+
+                static Decimal64_t minUnchecked(Decimal64_t const& a, Decimal64_t const& b, Decimal64_t const& c) {
+                    return Decimal64_t(ddfp_min3(a._value, b._value, c._value));
+                }
+
+//--------------------------------------------------------------------------------------------------------
+
+                static Decimal64_t min(Decimal64_t const& a, Decimal64_t const& b, Decimal64_t const& c, Decimal64_t const& d) {
+                    return nullCheck
+                        ? minChecked(a, b, c, d)
+                        : minUnchecked(a, b, c, d);
+                }
+
+                static Decimal64_t minChecked(Decimal64_t const& a, Decimal64_t const& b, Decimal64_t const& c, Decimal64_t const& d) {
+                    if (a.isNull())
+                        throw std::invalid_argument(DN_FUNC + ": Argument '" + DN_NAMEOF(a) + "' is null.");
+                    if (b.isNull())
+                        throw std::invalid_argument(DN_FUNC + ": Argument '" + DN_NAMEOF(b) + "' is null.");
+                    if (c.isNull())
+                        throw std::invalid_argument(DN_FUNC + ": Argument '" + DN_NAMEOF(c) + "' is null.");
+                    if (d.isNull())
+                        throw std::invalid_argument(DN_FUNC + ": Argument '" + DN_NAMEOF(d) + "' is null.");
+
+                    return minUnchecked(a, b, c, d);
+                }
+
+                static Decimal64_t minUnchecked(Decimal64_t const& a, Decimal64_t const& b, Decimal64_t const& c, Decimal64_t const& d) {
+                    return Decimal64_t(ddfp_min4(a._value, b._value, c._value, d._value));
+                }
+
+//--------------------------------------------------------------------------------------------------------
+
+                Decimal64_t& negate() {
+                    return nullCheck
+                        ? negateChecked()
+                        : negateUnchecked();
+                }
+
+                Decimal64_t& negateChecked() {
+                    if (isNull())
+                        throw std::invalid_argument(DN_FUNC + ": This object is null.");
+
+                    return negateUnchecked();
+                }
+
+                Decimal64_t& negateUnchecked() {
+                    _value = ddfp_negate(_value);
+
+                    return *this;
+                }
+
+//--------------------------------------------------------------------------------------------------------
+
+                Decimal64_t& abs() {
+                    return nullCheck
+                        ? absChecked()
+                        : absUnchecked();
+                }
+
+                Decimal64_t& absChecked() {
+                    if (isNull())
+                        throw std::invalid_argument(DN_FUNC + ": This object is null.");
+
+                    return absUnchecked();
+                }
+
+                Decimal64_t& absUnchecked() {
+                    _value = ddfp_abs(_value);
+
+                    return *this;
+                }
+
+//--------------------------------------------------------------------------------------------------------
+
+                static Decimal64_t add(Decimal64_t const& a, Decimal64_t const& b) {
+                    return nullCheck
+                        ? addChecked(a, b)
+                        : addUnchecked(a, b);
+                }
+
+                static Decimal64_t addChecked(Decimal64_t const& a, Decimal64_t const& b) {
+                    if (a.isNull())
+                        throw std::invalid_argument(DN_FUNC + ": Argument '" + DN_NAMEOF(a) + "' is null.");
+                    if (b.isNull())
+                        throw std::invalid_argument(DN_FUNC + ": Argument '" + DN_NAMEOF(b) + "' is null.");
+
+                    return addUnchecked(a, b);
+                }
+
+                static Decimal64_t addUnchecked(Decimal64_t const& a, Decimal64_t const& b) {
+                    return Decimal64_t(ddfp_add2(a._value, b._value));
+                }
+
+//--------------------------------------------------------------------------------------------------------
+
+                static Decimal64_t add(Decimal64_t const& a, Decimal64_t const& b, Decimal64_t const& c) {
+                    return nullCheck
+                        ? addChecked(a, b, c)
+                        : addUnchecked(a, b, c);
+                }
+
+                static Decimal64_t addChecked(Decimal64_t const& a, Decimal64_t const& b, Decimal64_t const& c) {
+                    if (a.isNull())
+                        throw std::invalid_argument(DN_FUNC + ": Argument '" + DN_NAMEOF(a) + "' is null.");
+                    if (b.isNull())
+                        throw std::invalid_argument(DN_FUNC + ": Argument '" + DN_NAMEOF(b) + "' is null.");
+                    if (c.isNull())
+                        throw std::invalid_argument(DN_FUNC + ": Argument '" + DN_NAMEOF(c) + "' is null.");
+
+                    return addUnchecked(a, b, c);
+                }
+
+                static Decimal64_t addUnchecked(Decimal64_t const& a, Decimal64_t const& b, Decimal64_t const& c) {
+                    return Decimal64_t(ddfp_add3(a._value, b._value, c._value));
+                }
+
+//--------------------------------------------------------------------------------------------------------
+
+                static Decimal64_t add(Decimal64_t const& a, Decimal64_t const& b, Decimal64_t const& c, Decimal64_t const& d) {
+                    return nullCheck
+                        ? addChecked(a, b, c, d)
+                        : addUnchecked(a, b, c, d);
+                }
+
+                static Decimal64_t addChecked(Decimal64_t const& a, Decimal64_t const& b, Decimal64_t const& c, Decimal64_t const& d) {
+                    if (a.isNull())
+                        throw std::invalid_argument(DN_FUNC + ": Argument '" + DN_NAMEOF(a) + "' is null.");
+                    if (b.isNull())
+                        throw std::invalid_argument(DN_FUNC + ": Argument '" + DN_NAMEOF(b) + "' is null.");
+                    if (c.isNull())
+                        throw std::invalid_argument(DN_FUNC + ": Argument '" + DN_NAMEOF(c) + "' is null.");
+                    if (d.isNull())
+                        throw std::invalid_argument(DN_FUNC + ": Argument '" + DN_NAMEOF(d) + "' is null.");
+
+                    return addUnchecked(a, b, c, d);
+                }
+
+                static Decimal64_t addUnchecked(Decimal64_t const& a, Decimal64_t const& b, Decimal64_t const& c, Decimal64_t const& d) {
+                    return Decimal64_t(ddfp_add4(a._value, b._value, c._value, d._value));
+                }
+
+//--------------------------------------------------------------------------------------------------------
+
+                static Decimal64_t subtract(Decimal64_t const& a, Decimal64_t const& b) {
+                    return nullCheck
+                        ? subtractChecked(a, b)
+                        : subtractUnchecked(a, b);
+                }
+
+                static Decimal64_t subtractChecked(Decimal64_t const& a, Decimal64_t const& b) {
+                    if (a.isNull())
+                        throw std::invalid_argument(DN_FUNC + ": Argument '" + DN_NAMEOF(a) + "' is null.");
+                    if (b.isNull())
+                        throw std::invalid_argument(DN_FUNC + ": Argument '" + DN_NAMEOF(b) + "' is null.");
+
+                    return subtractUnchecked(a, b);
+                }
+
+                static Decimal64_t subtractUnchecked(Decimal64_t const& a, Decimal64_t const& b) {
+                    return Decimal64_t(ddfp_subtract(a._value, b._value));
+                }
+
+//--------------------------------------------------------------------------------------------------------
+
+                static Decimal64_t multiply(Decimal64_t const& a, Decimal64_t const& b) {
+                    return nullCheck
+                        ? multiplyChecked(a, b)
+                        : multiplyUnchecked(a, b);
+                }
+
+                static Decimal64_t multiplyChecked(Decimal64_t const& a, Decimal64_t const& b) {
+                    if (a.isNull())
+                        throw std::invalid_argument(DN_FUNC + ": Argument '" + DN_NAMEOF(a) + "' is null.");
+                    if (b.isNull())
+                        throw std::invalid_argument(DN_FUNC + ": Argument '" + DN_NAMEOF(b) + "' is null.");
+
+                    return multiplyUnchecked(a, b);
+                }
+
+                static Decimal64_t multiplyUnchecked(Decimal64_t const& a, Decimal64_t const& b) {
+                    return Decimal64_t(ddfp_multiply2(a._value, b._value));
+                }
+
+//--------------------------------------------------------------------------------------------------------
+
+                static Decimal64_t multiply(Decimal64_t const& a, Decimal64_t const& b, Decimal64_t const& c) {
+                    return nullCheck
+                        ? multiplyChecked(a, b, c)
+                        : multiplyUnchecked(a, b, c);
+                }
+
+                static Decimal64_t multiplyChecked(Decimal64_t const& a, Decimal64_t const& b, Decimal64_t const& c) {
+                    if (a.isNull())
+                        throw std::invalid_argument(DN_FUNC + ": Argument '" + DN_NAMEOF(a) + "' is null.");
+                    if (b.isNull())
+                        throw std::invalid_argument(DN_FUNC + ": Argument '" + DN_NAMEOF(b) + "' is null.");
+                    if (c.isNull())
+                        throw std::invalid_argument(DN_FUNC + ": Argument '" + DN_NAMEOF(c) + "' is null.");
+
+                    return multiplyUnchecked(a, b, c);
+                }
+
+                static Decimal64_t multiplyUnchecked(Decimal64_t const& a, Decimal64_t const& b, Decimal64_t const& c) {
+                    return Decimal64_t(ddfp_multiply3(a._value, b._value, c._value));
+                }
+
+//--------------------------------------------------------------------------------------------------------
+
+                static Decimal64_t multiply(Decimal64_t const& a, Decimal64_t const& b, Decimal64_t const& c, Decimal64_t const& d) {
+                    return nullCheck
+                        ? multiplyChecked(a, b, c, d)
+                        : multiplyUnchecked(a, b, c, d);
+                }
+
+                static Decimal64_t multiplyChecked(Decimal64_t const& a, Decimal64_t const& b, Decimal64_t const& c, Decimal64_t const& d) {
+                    if (a.isNull())
+                        throw std::invalid_argument(DN_FUNC + ": Argument '" + DN_NAMEOF(a) + "' is null.");
+                    if (b.isNull())
+                        throw std::invalid_argument(DN_FUNC + ": Argument '" + DN_NAMEOF(b) + "' is null.");
+                    if (c.isNull())
+                        throw std::invalid_argument(DN_FUNC + ": Argument '" + DN_NAMEOF(c) + "' is null.");
+                    if (d.isNull())
+                        throw std::invalid_argument(DN_FUNC + ": Argument '" + DN_NAMEOF(d) + "' is null.");
+
+                    return multiplyUnchecked(a, b, c, d);
+                }
+
+                static Decimal64_t multiplyUnchecked(Decimal64_t const& a, Decimal64_t const& b, Decimal64_t const& c, Decimal64_t const& d) {
+                    return Decimal64_t(ddfp_multiply4(a._value, b._value, c._value, d._value));
+                }
+
+//--------------------------------------------------------------------------------------------------------
+
+                Decimal64_t operator *(int32_t b) const {
+                    return multiplyByInt32(_value, b);
+                }
+
+                Decimal64_t& operator *=(int32_t b) {
+                    _value = multiplyByInt32(_value, b);
+
+                    return *this;
+                }
+
+                Decimal64_t multiplyByInt32(int32_t b) const {
+                    return nullCheck
+                        ? multiplyByInt32Checked(b)
+                        : multiplyByInt32Unchecked(b);
+                }
+
+                Decimal64_t multiplyByInt32Checked(int32_t b) const {
+                    if (isNull())
+                        throw std::invalid_argument(DN_FUNC + ": This object is null.");
+
+                    return multiplyByInt32Unchecked(b);
+                }
+
+                Decimal64_t multiplyByInt32Unchecked(int32_t b) const {
+                    return Decimal64_t(ddfp_multiplyByInt32(_value, b));
+                }
+
+//--------------------------------------------------------------------------------------------------------
+
+                Decimal64_t operator *(int64_t b) const {
+                    return multiplyByInt64(_value, b);
+                }
+
+                Decimal64_t& operator *=(int64_t b) {
+                    _value = multiplyByInt64(_value, b);
+
+                    return *this;
+                }
+
+                Decimal64_t multiplyByInt64(int64_t b) const {
+                    return nullCheck
+                        ? multiplyByInt64Checked(b)
+                        : multiplyByInt64Unchecked(b);
+                }
+
+                Decimal64_t multiplyByInt64Checked(int64_t b) const {
+                    if (isNull())
+                        throw std::invalid_argument(DN_FUNC + ": This object is null.");
+
+                    return multiplyByInt64Unchecked(b);
+                }
+
+                Decimal64_t multiplyByInt64Unchecked(int64_t b) const {
+                    return Decimal64_t(ddfp_multiplyByInt64(_value, b));
+                }
+
+//--------------------------------------------------------------------------------------------------------
+
+                static Decimal64_t divide(Decimal64_t const& a, Decimal64_t const& b) {
+                    return nullCheck
+                        ? divideChecked(a, b)
+                        : divideUnchecked(a, b);
+                }
+
+                static Decimal64_t divideChecked(Decimal64_t const& a, Decimal64_t const& b) {
+                    if (a.isNull())
+                        throw std::invalid_argument(DN_FUNC + ": Argument '" + DN_NAMEOF(a) + "' is null.");
+                    if (b.isNull())
+                        throw std::invalid_argument(DN_FUNC + ": Argument '" + DN_NAMEOF(b) + "' is null.");
+
+                    return divideUnchecked(a, b);
+                }
+
+                static Decimal64_t divideUnchecked(Decimal64_t const& a, Decimal64_t const& b) {
+                    return Decimal64_t(ddfp_divide(a._value, b._value));
+                }
+
+//--------------------------------------------------------------------------------------------------------
+
+                Decimal64_t operator /(int32_t b) const {
+                    return divideByInt32(_value, b);
+                }
+
+                Decimal64_t& operator /=(int32_t b) {
+                    _value = divideByInt32(_value, b);
+
+                    return *this;
+                }
+
+                Decimal64_t divideByInt32(int32_t b) const {
+                    return nullCheck
+                        ? divideByInt32Checked(b)
+                        : divideByInt32Unchecked(b);
+                }
+
+                Decimal64_t divideByInt32Checked(int32_t b) const {
+                    if (isNull())
+                        throw std::invalid_argument(DN_FUNC + ": This object is null.");
+
+                    return divideByInt32Unchecked(b);
+                }
+
+                Decimal64_t divideByInt32Unchecked(int32_t b) const {
+                    return Decimal64_t(ddfp_divideByInt32(_value, b));
+                }
+
+//--------------------------------------------------------------------------------------------------------
+
+                Decimal64_t operator /(int64_t b) const {
+                    return divideByInt64(_value, b);
+                }
+
+                Decimal64_t& operator /=(int64_t b) {
+                    _value = divideByInt64(_value, b);
+
+                    return *this;
+                }
+
+                Decimal64_t divideByInt64(int64_t b) const {
+                    return nullCheck
+                        ? divideByInt64Checked(b)
+                        : divideByInt64Unchecked(b);
+                }
+
+                Decimal64_t divideByInt64Checked(int64_t b) const {
+                    if (isNull())
+                        throw std::invalid_argument(DN_FUNC + ": This object is null.");
+
+                    return divideByInt64Unchecked(b);
+                }
+
+                Decimal64_t divideByInt64Unchecked(int64_t b) const {
+                    return Decimal64_t(ddfp_divideByInt64(_value, b));
+                }
+
+//--------------------------------------------------------------------------------------------------------
+
+                Decimal64_t& multiplyAndAdd(Decimal64_t const& a, Decimal64_t const& b) {
+                    return nullCheck
+                        ? multiplyAndAddChecked(a, b)
+                        : multiplyAndAddUnchecked(a, b);
+                }
+
+                Decimal64_t& multiplyAndAddChecked(Decimal64_t const& a, Decimal64_t const& b) {
+                    if (a.isNull())
+                        throw std::invalid_argument(DN_FUNC + ": Argument '" + DN_NAMEOF(a) + "' is null.");
+                    if (b.isNull())
+                        throw std::invalid_argument(DN_FUNC + ": Argument '" + DN_NAMEOF(b) + "' is null.");
+                    if (isNull())
+                        throw std::invalid_argument(DN_FUNC + ": This object is null.");
+
+                    return multiplyAndAddUnchecked(a, b);
+                }
+
+                Decimal64_t& multiplyAndAddUnchecked(Decimal64_t const& a, Decimal64_t const& b) {
+                    _value = ddfp_multiplyAndAdd(a._value, b._value, _value);
+
+                    return *this;
+                }
+
+//--------------------------------------------------------------------------------------------------------
+
+                Decimal64_t& scaleByPowerOfTen(int32_t n) {
+                    return nullCheck
+                        ? scaleByPowerOfTenChecked(n)
+                        : scaleByPowerOfTenUnchecked(n);
+                }
+
+                Decimal64_t& scaleByPowerOfTenChecked(int32_t n) {
+                    if (isNull())
+                        throw std::invalid_argument(DN_FUNC + ": This object is null.");
+
+                    return scaleByPowerOfTenUnchecked(n);
+                }
+
+                Decimal64_t& scaleByPowerOfTenUnchecked(int32_t n) {
+                    _value = ddfp_scaleByPowerOfTen(_value, n);
+
+                    return *this;
+                }
+
+//--------------------------------------------------------------------------------------------------------
+
+                static Decimal64_t mean(Decimal64_t const& a, Decimal64_t const& b) {
+                    return nullCheck
+                        ? meanChecked(a, b)
+                        : meanUnchecked(a, b);
+                }
+
+                static Decimal64_t meanChecked(Decimal64_t const& a, Decimal64_t const& b) {
+                    if (a.isNull())
+                        throw std::invalid_argument(DN_FUNC + ": Argument '" + DN_NAMEOF(a) + "' is null.");
+                    if (b.isNull())
+                        throw std::invalid_argument(DN_FUNC + ": Argument '" + DN_NAMEOF(b) + "' is null.");
+
+                    return meanUnchecked(a, b);
+                }
+
+                static Decimal64_t meanUnchecked(Decimal64_t const& a, Decimal64_t const& b) {
+                    return Decimal64_t(ddfp_mean2(a._value, b._value));
+                }
+
+//--------------------------------------------------------------------------------------------------------
+
+                Decimal64_t& nextUp() {
+                    return nullCheck
+                        ? nextUpChecked()
+                        : nextUpUnchecked();
+                }
+
+                Decimal64_t& nextUpChecked() {
+                    if (isNull())
+                        throw std::invalid_argument(DN_FUNC + ": This object is null.");
+
+                    return nextUpUnchecked();
+                }
+
+                Decimal64_t& nextUpUnchecked() {
+                    _value = ddfp_nextUp(_value);
+
+                    return *this;
+                }
+
+//--------------------------------------------------------------------------------------------------------
+
+                Decimal64_t& nextDown() {
+                    return nullCheck
+                        ? nextDownChecked()
+                        : nextDownUnchecked();
+                }
+
+                Decimal64_t& nextDownChecked() {
+                    if (isNull())
+                        throw std::invalid_argument(DN_FUNC + ": This object is null.");
+
+                    return nextDownUnchecked();
+                }
+
+                Decimal64_t& nextDownUnchecked() {
+                    _value = ddfp_nextDown(_value);
+
+                    return *this;
+                }
+
+//--------------------------------------------------------------------------------------------------------
+            };
+
+            typedef Decimal64_t<> Decimal64;
+
+            static const Decimal64 D64_POSITIVE_INFINITY = Decimal64::fromUnderlying(DECIMAL_NATIVE_UNDERLYING_POSITIVE_INFINITY);
+            static const Decimal64 D64_NEGATIVE_INFINITY = Decimal64::fromUnderlying(DECIMAL_NATIVE_UNDERLYING_NEGATIVE_INFINITY);
+            static const Decimal64 D64_NAN = Decimal64::fromUnderlying(DECIMAL_NATIVE_UNDERLYING_NAN);
+            static const Decimal64 D64_NULL = Decimal64::fromUnderlying(DECIMAL_NATIVE_UNDERLYING_NULL); // = -0x80
+
+            static const Decimal64 D64_MIN_VALUE = Decimal64::fromUnderlying(DECIMAL_NATIVE_UNDERLYING_MIN_VALUE);
+            static const Decimal64 D64_MAX_VALUE = Decimal64::fromUnderlying(DECIMAL_NATIVE_UNDERLYING_MAX_VALUE);
+
+            static const Decimal64 D64_MIN_POSITIVE_VALUE = Decimal64::fromUnderlying(DECIMAL_NATIVE_UNDERLYING_MIN_POSITIVE_VALUE);
+            static const Decimal64 D64_MAX_NEGATIVE_VALUE = Decimal64::fromUnderlying(DECIMAL_NATIVE_UNDERLYING_MAX_NEGATIVE_VALUE);
+
+            static const Decimal64 D64_ZERO = Decimal64::fromUnderlying(DECIMAL_NATIVE_UNDERLYING_ZERO); // e=0, m=0, sign=0
+            static const Decimal64 D64_ONE = Decimal64::fromUnderlying(DECIMAL_NATIVE_UNDERLYING_ONE);
+            static const Decimal64 D64_TWO = Decimal64::fromUnderlying(DECIMAL_NATIVE_UNDERLYING_TWO);
+            static const Decimal64 D64_TEN = Decimal64::fromUnderlying(DECIMAL_NATIVE_UNDERLYING_TEN);
+            static const Decimal64 D64_HUNDRED = Decimal64::fromUnderlying(DECIMAL_NATIVE_UNDERLYING_HUNDRED);
+            static const Decimal64 D64_THOUSAND = Decimal64::fromUnderlying(DECIMAL_NATIVE_UNDERLYING_THOUSAND);
+            static const Decimal64 D64_MILLION = Decimal64::fromUnderlying(DECIMAL_NATIVE_UNDERLYING_MILLION);
+
+            static const Decimal64 D64_ONETENTH = Decimal64::fromUnderlying(DECIMAL_NATIVE_UNDERLYING_ONETENTH);
+            static const Decimal64 D64_ONEHUNDREDTH = Decimal64::fromUnderlying(DECIMAL_NATIVE_UNDERLYING_ONEHUNDREDTH);
+        }
+    }
+}
+
+#endif
-- 
2.35.3.windows.1

