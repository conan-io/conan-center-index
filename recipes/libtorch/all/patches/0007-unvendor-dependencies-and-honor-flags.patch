diff --git a/CMakeLists.txt b/CMakeLists.txt
index ef677702ce..f2e594c81f 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -272,7 +272,7 @@ if(WIN32)
   set(USE_TENSORPIPE OFF)
   message(WARNING "TensorPipe cannot be used on Windows. Set it to OFF")
 
-  if(USE_DISTRIBUTED AND NOT DEFINED ENV{libuv_ROOT})
+  if(0) # don't care, libuv is a dependency of gloo
     find_library(
       libuv_tmp_LIBRARY
       NAMES uv libuv
@@ -538,6 +538,8 @@ endif()
 # The below means we are cross compiling for arm64 or x86_64 on MacOSX
 if(NOT IOS AND CMAKE_SYSTEM_NAME STREQUAL "Darwin" AND CMAKE_OSX_ARCHITECTURES MATCHES "^(x86_64|arm64)$")
   set(CROSS_COMPILING_MACOSX TRUE)
+endif()
+if(0) # trust conan protobuf recipe for cross compilation (anyway it can't work because all the vendoring stuff is missing)
   # We need to compile a universal protoc to not fail protobuf build
   execute_process(COMMAND ./scripts/build_host_protoc.sh --other-flags "-DCMAKE_OSX_ARCHITECTURES=x86_64;arm64"
                   WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
@@ -617,7 +619,6 @@ endif()
 set(CMAKE_C_STANDARD 11)
 set(CMAKE_CXX_STANDARD 14)
 if(NOT MSVC)
-  string(APPEND CMAKE_CXX_FLAGS " -O2 -fPIC")
   string(APPEND CMAKE_CXX_FLAGS " -Wno-narrowing")
   # Eigen fails to build with some versions, so convert this to a warning
   # Details at http://eigen.tuxfamily.org/bz/show_bug.cgi?id=1459
diff --git a/aten/src/ATen/CMakeLists.txt b/aten/src/ATen/CMakeLists.txt
index b63b99acb2..6e2fa9ca28 100644
--- a/aten/src/ATen/CMakeLists.txt
+++ b/aten/src/ATen/CMakeLists.txt
@@ -298,13 +298,6 @@ if(NOT MSVC AND NOT EMSCRIPTEN AND NOT INTERN_BUILD_MOBILE)
     list(APPEND ATen_THIRD_PARTY_INCLUDE ${CMAKE_BINARY_DIR}/include)
     link_directories(${CMAKE_BINARY_DIR}/sleef/lib)
   else()
-    add_library(sleef SHARED IMPORTED)
-    find_library(SLEEF_LIBRARY sleef)
-    if(NOT SLEEF_LIBRARY)
-      message(FATAL_ERROR "Cannot find sleef")
-    endif()
-    message("Found sleef: ${SLEEF_LIBRARY}")
-    set_target_properties(sleef PROPERTIES IMPORTED_LOCATION "${SLEEF_LIBRARY}")
   endif()
   list(APPEND ATen_CPU_DEPENDENCY_LIBS sleef)
 
diff --git a/binaries/CMakeLists.txt b/binaries/CMakeLists.txt
index 74df5089e4..c43e395d44 100644
--- a/binaries/CMakeLists.txt
+++ b/binaries/CMakeLists.txt
@@ -70,7 +70,7 @@ endif()
 
 if(USE_ZMQ)
   caffe2_binary_target("zmq_feeder.cc")
-  target_link_libraries(zmq_feeder ${ZMQ_LIBRARIES})
+  target_link_libraries(zmq_feeder CONAN_PKG::zeromq)
 endif()
 
 if(USE_MPI)
@@ -82,14 +82,14 @@ if(USE_OPENCV AND USE_LEVELDB)
   caffe2_binary_target("convert_encoded_to_raw_leveldb.cc")
   target_link_libraries(
       convert_encoded_to_raw_leveldb
-      ${OpenCV_LIBS} ${LevelDB_LIBRARIES} ${Snappy_LIBRARIES})
+      CONAN_PKG::opencv CONAN_PKG::leveldb)
 endif()
 
 if(USE_OPENCV)
   caffe2_binary_target("make_image_db.cc")
-  target_link_libraries(make_image_db ${OpenCV_LIBS})
+  target_link_libraries(make_image_db CONAN_PKG::opencv)
   caffe2_binary_target("convert_image_to_tensor.cc")
-  target_link_libraries(convert_image_to_tensor ${OpenCV_LIBS})
+  target_link_libraries(convert_image_to_tensor CONAN_PKG::opencv)
 endif()
 
 if(USE_OBSERVERS)
@@ -98,7 +98,7 @@ endif()
 
 if(USE_OBSERVERS AND USE_OPENCV)
   caffe2_binary_target("convert_and_benchmark.cc")
-  target_link_libraries(convert_and_benchmark ${OpenCV_LIBS})
+  target_link_libraries(convert_and_benchmark CONAN_PKG::opencv)
 endif()
 
 # ---[ tutorials
diff --git a/c10/CMakeLists.txt b/c10/CMakeLists.txt
index a267af43d1..63382626fd 100644
--- a/c10/CMakeLists.txt
+++ b/c10/CMakeLists.txt
@@ -73,8 +73,7 @@ if(USE_NUMA)
   message(STATUS "NUMA paths:")
   message(STATUS ${Numa_INCLUDE_DIR})
   message(STATUS ${Numa_LIBRARIES})
-  include_directories(SYSTEM ${Numa_INCLUDE_DIR})
-  target_link_libraries(c10 PRIVATE ${Numa_LIBRARIES})
+  target_link_libraries(c10 PRIVATE CONAN_PKG::libnuma)
 else()
   message(STATUS "don't use NUMA")
 endif()
diff --git a/caffe2/CMakeLists.txt b/caffe2/CMakeLists.txt
index 8f5a013756..75b805f580 100644
--- a/caffe2/CMakeLists.txt
+++ b/caffe2/CMakeLists.txt
@@ -98,7 +98,7 @@ endif()
 # Note: the folders that are being commented out have not been properly
 # addressed yet.
 
-if(NOT MSVC AND USE_XNNPACK)
+if(0) # don't try to build fxdiv from source
   if(NOT TARGET fxdiv)
     set(FXDIV_BUILD_TESTS OFF CACHE BOOL "")
     set(FXDIV_BUILD_BENCHMARKS OFF CACHE BOOL "")
@@ -348,7 +348,7 @@ if(NOT INTERN_BUILD_MOBILE OR NOT BUILD_CAFFE2_MOBILE)
     # up being empty. Downstream targets should also add a #ifdef guard.
     if(NOT WIN32)
       add_library(process_group_agent "${TORCH_SRC_DIR}/csrc/distributed/rpc/process_group_agent.cpp" "${TORCH_SRC_DIR}/csrc/distributed/rpc/process_group_agent.h")
-      target_link_libraries(process_group_agent PRIVATE torch c10d fmt::fmt-header-only)
+      target_link_libraries(process_group_agent PRIVATE torch c10d CONAN_PKG::fmt)
       add_dependencies(process_group_agent torch c10d)
       install(TARGETS process_group_agent DESTINATION ${CMAKE_INSTALL_LIBDIR})
 
@@ -359,7 +359,7 @@ if(NOT INTERN_BUILD_MOBILE OR NOT BUILD_CAFFE2_MOBILE)
         "${TORCH_SRC_DIR}/csrc/distributed/rpc/tensorpipe_utils.cpp"
         "${TORCH_SRC_DIR}/csrc/distributed/rpc/tensorpipe_utils.h"
         )
-      target_link_libraries(tensorpipe_agent PRIVATE torch c10d tensorpipe fmt::fmt-header-only)
+      target_link_libraries(tensorpipe_agent PRIVATE torch c10d CONAN_PKG::fmt)
       add_dependencies(tensorpipe_agent torch c10d)
       if(USE_TENSORPIPE)
         if(USE_CUDA)
@@ -375,7 +375,6 @@ if(NOT INTERN_BUILD_MOBILE OR NOT BUILD_CAFFE2_MOBILE)
 
         target_compile_definitions(tensorpipe_agent PUBLIC USE_TENSORPIPE)
         target_link_libraries(tensorpipe_agent PRIVATE tensorpipe)
-        add_dependencies(tensorpipe_agent tensorpipe)
         install(TARGETS tensorpipe_agent DESTINATION ${CMAKE_INSTALL_LIBDIR})
       endif()
     endif()
diff --git a/cmake/Dependencies.cmake b/cmake/Dependencies.cmake
index 72b7d2809f..1bbfc6febf 100644
--- a/cmake/Dependencies.cmake
+++ b/cmake/Dependencies.cmake
@@ -82,7 +82,7 @@ else()
       "Cannot find threading library. Caffe2 requires Threads to compile.")
 endif()
 
-if(USE_TBB)
+if(0)
   message(STATUS "Compiling TBB from source")
   # Unset our restrictive C++ flags here and reset them later.
   # Remove this once we use proper target_compile_options.
@@ -131,8 +131,7 @@ elseif(BLAS STREQUAL "ATLAS")
   list(APPEND Caffe2_PUBLIC_DEPENDENCY_LIBS cblas)
 elseif(BLAS STREQUAL "OpenBLAS")
   find_package(OpenBLAS REQUIRED)
-  include_directories(SYSTEM ${OpenBLAS_INCLUDE_DIR})
-  list(APPEND Caffe2_PUBLIC_DEPENDENCY_LIBS ${OpenBLAS_LIB})
+  list(APPEND Caffe2_PUBLIC_DEPENDENCY_LIBS OpenBLAS::OpenBLAS)
 elseif(BLAS STREQUAL "MKL")
   if(BLAS_SET_BY_USER)
     find_package(MKL REQUIRED)
@@ -410,7 +409,6 @@ if(USE_QNNPACK)
     # We build static versions of QNNPACK and pthreadpool but link
     # them into a shared library for Caffe2, so they need PIC.
     set_property(TARGET qnnpack PROPERTY POSITION_INDEPENDENT_CODE ON)
-    set_property(TARGET cpuinfo PROPERTY POSITION_INDEPENDENT_CODE ON)
 
     if(QNNPACK_CUSTOM_THREADPOOL)
       target_compile_definitions(
@@ -495,7 +493,6 @@ endif()
 
 # ---[ NNPACK
 if(USE_NNPACK)
-  include(${CMAKE_CURRENT_LIST_DIR}/External/nnpack.cmake)
   if(NNPACK_FOUND)
     if(TARGET nnpack)
       # ---[ NNPACK is being built together with Caffe2: explicitly specify dependency
@@ -542,13 +539,8 @@ if(USE_XNNPACK AND NOT USE_SYSTEM_XNNPACK)
   include_directories(SYSTEM ${XNNPACK_INCLUDE_DIR})
   list(APPEND Caffe2_DEPENDENCY_LIBS XNNPACK)
 elseif(NOT TARGET XNNPACK AND USE_SYSTEM_XNNPACK)
-  add_library(XNNPACK SHARED IMPORTED)
-  find_library(XNNPACK_LIBRARY XNNPACK)
-  set_property(TARGET XNNPACK PROPERTY IMPORTED_LOCATION "${XNNPACK_LIBRARY}")
-  if(NOT XNNPACK_LIBRARY)
-    message(FATAL_ERROR "Cannot find XNNPACK")
-  endif()
-  message("-- Found XNNPACK: ${XNNPACK_LIBRARY}")
+  add_library(XNNPACK INTERFACE IMPORTED)
+  set_property(TARGET XNNPACK PROPERTY INTERFACE_LINK_LIBRARIES CONAN_PKG::xnnpack)
   list(APPEND Caffe2_DEPENDENCY_LIBS XNNPACK)
 endif()
 
@@ -556,9 +548,10 @@ endif()
 if(USE_VULKAN)
   set(Vulkan_LIBS)
   set(Vulkan_INCLUDES)
-  include(${CMAKE_CURRENT_LIST_DIR}/VulkanDependencies.cmake)
-  list(APPEND Caffe2_DEPENDENCY_LIBS ${Vulkan_LIBS})
-  include_directories(SYSTEM ${Vulkan_INCLUDES})
+  list(APPEND Caffe2_DEPENDENCY_LIBS CONAN_PKG::vulkan-loader CONAN_PKG::vulkan-headers)
+  if(USE_VULKAN_SHADERC_RUNTIME)
+    list(APPEND Caffe2_DEPENDENCY_LIBS CONAN_PKG::shaderc)
+  endif()
 endif()
 
 # ---[ gflags
@@ -757,13 +750,8 @@ endif()
 # ---[ LevelDB
 # ---[ Snappy
 if(USE_LEVELDB)
-  find_package(LevelDB)
-  find_package(Snappy)
-  if(LEVELDB_FOUND AND SNAPPY_FOUND)
-    include_directories(SYSTEM ${LevelDB_INCLUDE})
-    list(APPEND Caffe2_DEPENDENCY_LIBS ${LevelDB_LIBRARIES})
-    include_directories(SYSTEM ${Snappy_INCLUDE_DIR})
-    list(APPEND Caffe2_DEPENDENCY_LIBS ${Snappy_LIBRARIES})
+  if(1)
+    list(APPEND Caffe2_DEPENDENCY_LIBS CONAN_PKG::leveldb)
   else()
     message(WARNING "Not compiling with LevelDB. Suppress this warning with -DUSE_LEVELDB=OFF")
     caffe2_update_option(USE_LEVELDB OFF)
@@ -773,10 +761,9 @@ endif()
 # ---[ NUMA
 if(USE_NUMA)
   if(LINUX)
-    find_package(Numa)
+    set(NUMA_FOUND 1)
     if(NUMA_FOUND)
-      include_directories(SYSTEM ${Numa_INCLUDE_DIR})
-      list(APPEND Caffe2_DEPENDENCY_LIBS ${Numa_LIBRARIES})
+      list(APPEND Caffe2_DEPENDENCY_LIBS CONAN_PKG::libnuma)
     else()
       message(WARNING "Not compiling with NUMA. Suppress this warning with -DUSE_NUMA=OFF")
       caffe2_update_option(USE_NUMA OFF)
@@ -789,10 +776,9 @@ endif()
 
 # ---[ ZMQ
 if(USE_ZMQ)
-  find_package(ZMQ)
+  set(ZMQ_FOUND 1)
   if(ZMQ_FOUND)
-    include_directories(SYSTEM ${ZMQ_INCLUDE_DIR})
-    list(APPEND Caffe2_DEPENDENCY_LIBS ${ZMQ_LIBRARIES})
+    list(APPEND Caffe2_DEPENDENCY_LIBS CONAN_PKG::zeromq)
   else()
     message(WARNING "Not compiling with ZMQ. Suppress this warning with -DUSE_ZMQ=OFF")
     caffe2_update_option(USE_ZMQ OFF)
@@ -801,10 +787,9 @@ endif()
 
 # ---[ Redis
 if(USE_REDIS)
-  find_package(Hiredis)
-  if(HIREDIS_FOUND)
-    include_directories(SYSTEM ${Hiredis_INCLUDE})
-    list(APPEND Caffe2_DEPENDENCY_LIBS ${Hiredis_LIBRARIES})
+  find_package(hiredis)
+  if(hiredis_FOUND)
+    list(APPEND Caffe2_DEPENDENCY_LIBS hiredis::hiredis)
   else()
     message(WARNING "Not compiling with Redis. Suppress this warning with -DUSE_REDIS=OFF")
     caffe2_update_option(USE_REDIS OFF)
@@ -825,10 +810,9 @@ if(USE_OPENCV)
     endif()
   endif()
   if(OpenCV_FOUND)
-    include_directories(SYSTEM ${OpenCV_INCLUDE_DIRS})
-    list(APPEND Caffe2_DEPENDENCY_LIBS ${OpenCV_LIBS})
+    list(APPEND Caffe2_DEPENDENCY_LIBS CONAN_PKG::opencv)
     if(MSVC AND USE_CUDA)
-        list(APPEND Caffe2_CUDA_DEPENDENCY_LIBS ${OpenCV_LIBS})
+        list(APPEND Caffe2_CUDA_DEPENDENCY_LIBS CONAN_PKG::opencv)
     endif()
     message(STATUS "OpenCV found (${OpenCV_CONFIG_PATH})")
   else()
@@ -851,6 +835,7 @@ if(USE_FFMPEG)
 endif()
 
 # ---[ Caffe2 depends on FP16 library for half-precision conversions
+if(USE_PYTORCH_QNNPACK)
 if(NOT TARGET fp16 AND NOT USE_SYSTEM_FP16)
   set(CAFFE2_THIRD_PARTY_ROOT "${PROJECT_SOURCE_DIR}/third_party")
   # PSIMD is required by FP16
@@ -871,6 +856,7 @@ elseif(NOT TARGET fp16 AND USE_SYSTEM_FP16)
   set_target_properties(fp16 PROPERTIES LINKER_LANGUAGE C)
 endif()
 list(APPEND Caffe2_DEPENDENCY_LIBS fp16)
+endif()
 
 # ---[ EIGEN
 # Due to license considerations, we will only use the MPL2 parts of Eigen.
@@ -1028,8 +1014,7 @@ if(USE_MPI)
     message(STATUS "MPI include path: " ${MPI_CXX_INCLUDE_PATH})
     message(STATUS "MPI LINK flags path: " ${MPI_CXX_LINK_FLAGS})
     message(STATUS "MPI libraries: " ${MPI_CXX_LIBRARIES})
-    include_directories(SYSTEM ${MPI_CXX_INCLUDE_PATH})
-    list(APPEND Caffe2_DEPENDENCY_LIBS ${MPI_CXX_LIBRARIES})
+    list(APPEND Caffe2_DEPENDENCY_LIBS CONAN_PKG::openmpi)
     set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${MPI_CXX_LINK_FLAGS}")
     find_program(OMPI_INFO
       NAMES ompi_info
@@ -1354,7 +1339,6 @@ if(USE_DISTRIBUTED AND USE_TENSORPIPE)
     set(TP_BUILD_LIBUV ON CACHE BOOL "" FORCE)
     set(TP_STATIC_OR_SHARED STATIC CACHE STRING "" FORCE)
 
-    add_subdirectory(${PROJECT_SOURCE_DIR}/third_party/tensorpipe)
 
     list(APPEND Caffe2_DEPENDENCY_LIBS tensorpipe)
   endif()
@@ -1406,10 +1390,7 @@ if(NOT INTERN_BUILD_MOBILE AND BUILD_CAFFE2_OPS)
 endif()
 
 if(USE_ZSTD)
-  list(APPEND Caffe2_DEPENDENCY_LIBS libzstd_static)
-  include_directories(SYSTEM ${CMAKE_CURRENT_LIST_DIR}/../third_party/zstd/lib)
-  add_subdirectory(${CMAKE_CURRENT_LIST_DIR}/../third_party/zstd/build/cmake)
-  set_property(TARGET libzstd_static PROPERTY POSITION_INDEPENDENT_CODE ON)
+  list(APPEND Caffe2_DEPENDENCY_LIBS CONAN_PKG::zstd)
 endif()
 
 # ---[ Onnx
@@ -1436,7 +1417,6 @@ if(CAFFE2_CMAKE_BUILDING_WITH_MAIN_REPO AND NOT INTERN_DISABLE_ONNX)
   if(NOT USE_SYSTEM_ONNX)
     add_subdirectory(${CMAKE_CURRENT_LIST_DIR}/../third_party/onnx EXCLUDE_FROM_ALL)
   endif()
-  add_subdirectory(${CMAKE_CURRENT_LIST_DIR}/../third_party/foxi EXCLUDE_FROM_ALL)
 
   add_definitions(-DONNX_NAMESPACE=${ONNX_NAMESPACE})
   if(NOT USE_SYSTEM_ONNX)
@@ -1450,23 +1430,11 @@ if(CAFFE2_CMAKE_BUILDING_WITH_MAIN_REPO AND NOT INTERN_DISABLE_ONNX)
     endif()
     list(APPEND Caffe2_DEPENDENCY_WHOLE_LINK_LIBS onnx_library)
   else()
-    add_library(onnx SHARED IMPORTED)
-    find_library(ONNX_LIBRARY onnx)
-    if(NOT ONNX_LIBRARY)
-      message(FATAL_ERROR "Cannot find onnx")
-    endif()
-    set_property(TARGET onnx PROPERTY IMPORTED_LOCATION ${ONNX_LIBRARY})
-    add_library(onnx_proto SHARED IMPORTED)
-    find_library(ONNX_PROTO_LIBRARY onnx_proto)
-    if(NOT ONNX_PROTO_LIBRARY)
-      message(FATAL_ERROR "Cannot find onnx")
-    endif()
-    set_property(TARGET onnx_proto PROPERTY IMPORTED_LOCATION ${ONNX_PROTO_LIBRARY})
-    message("-- Found onnx: ${ONNX_LIBRARY} ${ONNX_PROTO_LIBRARY}")
+    find_package(ONNX REQUIRED CONFIG)
     list(APPEND Caffe2_DEPENDENCY_LIBS onnx_proto onnx)
   endif()
   include_directories(${FOXI_INCLUDE_DIRS})
-  list(APPEND Caffe2_DEPENDENCY_LIBS foxi_loader)
+  list(APPEND Caffe2_DEPENDENCY_LIBS CONAN_PKG::foxi)
   # Recover the build shared libs option.
   set(BUILD_SHARED_LIBS ${TEMP_BUILD_SHARED_LIBS})
 endif()
@@ -1666,8 +1634,9 @@ if(NOT INTERN_BUILD_MOBILE)
       CACHE BOOL "Copy the required BLAS DLLs into the TH install dirs")
   endif()
 
-  find_package(LAPACK)
-  if(LAPACK_FOUND)
+  option(USE_LAPACK "Use LAPACK" ON)
+  if(USE_LAPACK)
+    find_package(LAPACK REQUIRED)
     set(USE_LAPACK 1)
     list(APPEND Caffe2_PRIVATE_DEPENDENCY_LIBS ${LAPACK_LIBRARIES})
   else()
@@ -1781,7 +1750,6 @@ endif()
 #
 set(TEMP_BUILD_SHARED_LIBS ${BUILD_SHARED_LIBS})
 set(BUILD_SHARED_LIBS OFF CACHE BOOL "Build shared libs" FORCE)
-add_subdirectory(${PROJECT_SOURCE_DIR}/third_party/fmt)
 
 # Disable compiler feature checks for `fmt`.
 #
@@ -1790,9 +1758,8 @@ add_subdirectory(${PROJECT_SOURCE_DIR}/third_party/fmt)
 # CMAKE_CXX_FLAGS in ways that break feature checks. Since we already know
 # `fmt` is compatible with a superset of the compilers that PyTorch is, it
 # shouldn't be too bad to just disable the checks.
-set_target_properties(fmt-header-only PROPERTIES INTERFACE_COMPILE_FEATURES "")
 
-list(APPEND Caffe2_DEPENDENCY_LIBS fmt::fmt-header-only)
+list(APPEND Caffe2_DEPENDENCY_LIBS CONAN_PKG::fmt)
 set(BUILD_SHARED_LIBS ${TEMP_BUILD_SHARED_LIBS} CACHE BOOL "Build shared libs" FORCE)
 
 # ---[ Kineto
