From e76442d20f526d7151b0ea06369a5dbfbc89a124 Mon Sep 17 00:00:00 2001
From: Martin Valgur <martin.valgur@gmail.com>
Date: Mon, 29 Jul 2024 18:35:04 +0300
Subject: [PATCH] use conan dependencies

---
 aten/CMakeLists.txt          | 12 ++++++------
 aten/src/ATen/CMakeLists.txt |  9 ---------
 c10/CMakeLists.txt           |  2 +-
 cmake/BuildVariables.cmake   |  4 ++--
 cmake/Dependencies.cmake     | 21 ++++-----------------
 5 files changed, 13 insertions(+), 35 deletions(-)

diff --git a/aten/CMakeLists.txt b/aten/CMakeLists.txt
index bda6aea327..3c394539ec 100644
--- a/aten/CMakeLists.txt
+++ b/aten/CMakeLists.txt
@@ -40,12 +40,12 @@ set(ATen_XPU_SRCS)
 set(ATen_XPU_INCLUDE)
 set(ATen_XPU_TEST_SRCS)
 set(ATen_VULKAN_TEST_SRCS)
-set(ATen_CPU_DEPENDENCY_LIBS)
-set(ATen_XPU_DEPENDENCY_LIBS)
-set(ATen_CUDA_DEPENDENCY_LIBS)
-set(ATen_HIP_DEPENDENCY_LIBS)
-set(ATen_PUBLIC_CUDA_DEPENDENCY_LIBS)
-set(ATen_PUBLIC_HIP_DEPENDENCY_LIBS)
+#set(ATen_CPU_DEPENDENCY_LIBS)
+#set(ATen_XPU_DEPENDENCY_LIBS)
+#set(ATen_CUDA_DEPENDENCY_LIBS)
+#set(ATen_HIP_DEPENDENCY_LIBS)
+#set(ATen_PUBLIC_CUDA_DEPENDENCY_LIBS)
+#set(ATen_PUBLIC_HIP_DEPENDENCY_LIBS)
 set(ATEN_INSTALL_BIN_SUBDIR "bin" CACHE PATH "ATen install binary subdirectory")
 set(ATEN_INSTALL_LIB_SUBDIR "lib" CACHE PATH "ATen install library subdirectory")
 set(ATEN_INSTALL_INCLUDE_SUBDIR "include" CACHE PATH "ATen install include subdirectory")
diff --git a/aten/src/ATen/CMakeLists.txt b/aten/src/ATen/CMakeLists.txt
index 0087dd95d9..ab59c1c36b 100644
--- a/aten/src/ATen/CMakeLists.txt
+++ b/aten/src/ATen/CMakeLists.txt
@@ -455,16 +455,7 @@ if(NOT EMSCRIPTEN AND NOT INTERN_BUILD_MOBILE)
     set_property(TARGET sleef PROPERTY FOLDER "dependencies")
     list(APPEND ATen_THIRD_PARTY_INCLUDE ${CMAKE_BINARY_DIR}/include)
     link_directories(${CMAKE_BINARY_DIR}/sleef/lib)
-  else()
-    add_library(sleef SHARED IMPORTED)
-    find_library(SLEEF_LIBRARY sleef)
-    if(NOT SLEEF_LIBRARY)
-      message(FATAL_ERROR "Cannot find sleef")
-    endif()
-    message("Found sleef: ${SLEEF_LIBRARY}")
-    set_target_properties(sleef PROPERTIES IMPORTED_LOCATION "${SLEEF_LIBRARY}")
   endif()
-  list(APPEND ATen_CPU_DEPENDENCY_LIBS sleef)
 
   if(NOT MSVC)
     set(CMAKE_C_FLAGS_DEBUG ${OLD_CMAKE_C_FLAGS_DEBUG})
diff --git a/c10/CMakeLists.txt b/c10/CMakeLists.txt
index 82eb969038..94173660b9 100644
--- a/c10/CMakeLists.txt
+++ b/c10/CMakeLists.txt
@@ -94,7 +94,7 @@ if(NOT BUILD_LIBTORCHLESS)
   if(C10_USE_GLOG)
     target_link_libraries(c10 PUBLIC glog::glog)
   endif()
-  target_link_libraries(c10 PRIVATE fmt::fmt-header-only)
+  target_link_libraries(c10 PRIVATE fmt::fmt-header-only httplib::httplib)
 
   if(C10_USE_NUMA)
     message(STATUS "NUMA paths:")
diff --git a/cmake/BuildVariables.cmake b/cmake/BuildVariables.cmake
index c849c26014..36b26448fd 100644
--- a/cmake/BuildVariables.cmake
+++ b/cmake/BuildVariables.cmake
@@ -23,8 +23,8 @@ set(Caffe2_CPU_INCLUDE)
 set(Caffe2_GPU_INCLUDE)
 
 # Lists for Caffe2 dependency libraries, for CPU and CUDA respectively.
-set(Caffe2_DEPENDENCY_LIBS "")
-set(Caffe2_CUDA_DEPENDENCY_LIBS "")
+#set(Caffe2_DEPENDENCY_LIBS "")
+#set(Caffe2_CUDA_DEPENDENCY_LIBS "")
 # This variable contains dependency libraries of Caffe2 which requires whole
 # symbol linkage. One example is the onnx lib where we need all its schema
 # symbols. However, if the lib is whole linked in caffe2 lib, we don't want
diff --git a/cmake/Dependencies.cmake b/cmake/Dependencies.cmake
index c4661e39e1..b17edad046 100644
--- a/cmake/Dependencies.cmake
+++ b/cmake/Dependencies.cmake
@@ -1306,22 +1306,10 @@ if(CAFFE2_CMAKE_BUILDING_WITH_MAIN_REPO AND NOT INTERN_DISABLE_ONNX)
       target_compile_options(onnx PRIVATE -Wno-deprecated-declarations)
     endif()
   else()
-    add_library(onnx SHARED IMPORTED)
-    find_library(ONNX_LIBRARY onnx)
-    if(NOT ONNX_LIBRARY)
-      message(FATAL_ERROR "Cannot find onnx")
-    endif()
-    set_property(TARGET onnx PROPERTY IMPORTED_LOCATION ${ONNX_LIBRARY})
-    add_library(onnx_proto SHARED IMPORTED)
-    find_library(ONNX_PROTO_LIBRARY onnx_proto)
-    if(NOT ONNX_PROTO_LIBRARY)
-      message(FATAL_ERROR "Cannot find onnx")
-    endif()
-    set_property(TARGET onnx_proto PROPERTY IMPORTED_LOCATION ${ONNX_PROTO_LIBRARY})
-    message("-- Found onnx: ${ONNX_LIBRARY} ${ONNX_PROTO_LIBRARY}")
-    list(APPEND Caffe2_DEPENDENCY_LIBS onnx_proto onnx)
-  endif()
-  include_directories(${FOXI_INCLUDE_DIRS})
+    find_package(ONNX REQUIRED CONFIG)
+    list(APPEND Caffe2_DEPENDENCY_LIBS onnx::onnx)
+  endif()
+  find_package(foxi REQUIRED CONFIG)
   list(APPEND Caffe2_DEPENDENCY_LIBS foxi_loader)
   # Recover the build shared libs option.
   set(BUILD_SHARED_LIBS ${TEMP_BUILD_SHARED_LIBS})
@@ -1539,7 +1527,6 @@ add_subdirectory(${PROJECT_SOURCE_DIR}/third_party/fmt)
 # CMAKE_CXX_FLAGS in ways that break feature checks. Since we already know
 # `fmt` is compatible with a superset of the compilers that PyTorch is, it
 # shouldn't be too bad to just disable the checks.
-set_target_properties(fmt-header-only PROPERTIES INTERFACE_COMPILE_FEATURES "")
 
 list(APPEND Caffe2_DEPENDENCY_LIBS fmt::fmt-header-only)
 set(BUILD_SHARED_LIBS ${TEMP_BUILD_SHARED_LIBS} CACHE BOOL "Build shared libs" FORCE)
-- 
2.43.0

