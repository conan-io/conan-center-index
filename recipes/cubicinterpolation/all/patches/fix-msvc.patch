--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -2,6 +2,9 @@ include(GNUInstallDirs)
 
 add_library(CubicInterpolation)
 add_library(CubicInterpolation::CubicInterpolation ALIAS CubicInterpolation)
+if(MSVC)
+    target_compile_definitions(CubicInterpolation PRIVATE _USE_MATH_DEFINES)
+endif()
 
 add_subdirectory(CubicInterpolation)
 add_subdirectory(detail)
--- a/src/CubicInterpolation/InterpolantBuilder.h
+++ b/src/CubicInterpolation/InterpolantBuilder.h
@@ -34,7 +34,7 @@ T2 load(fs::path path, fs::path filename) {
 };
 
 template <typename T> bool save(T const &storage_data, fs::path path, fs::path filename) {
-  if (not fs::exists(path / filename)) {
+  if (!fs::exists(path / filename)) {
     std::ofstream ofs((path / filename).c_str());
     while (ofs.good()) {
       boost::archive::binary_oarchive oa(ofs);
--- a/src/detail/BicubicSplines.cxx
+++ b/src/detail/BicubicSplines.cxx
@@ -58,7 +58,7 @@ template <typename T> struct BicubicSplines<T>::RuntimeData {
     return ::std::vector<T>(m.data(), m.data() + m.rows() * m.cols());
   }
 
-  auto get_dimensions() const { return std::array<long int, 2>{y.rows(), y.cols()}; }
+  auto get_dimensions() const { return std::array<long int, 2>{static_cast<long int>(y.rows()), static_cast<long int>(y.cols())}; }
 
   StorageData to_storage_data() const;
 };
