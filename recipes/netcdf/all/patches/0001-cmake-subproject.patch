--- CMakeLists.txt
+++ CMakeLists.txt
@@ -85,8 +85,8 @@ IF(MSVC)
 ENDIF()
 
 #Add custom CMake Module
-SET(CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules/"
-  CACHE INTERNAL "Location of our custom CMake modules.")
+list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules/")
+
 
 # auto-configure style checks, other CMake modules.
 INCLUDE(CheckLibraryExists)
@@ -393,17 +393,17 @@ IF(NOT MSVC)
     SET(BUILD_FORTRAN ON)
   ENDIF()
   IF(BUILD_FORTRAN)
-    CONFIGURE_FILE("${CMAKE_SOURCE_DIR}/postinstall.sh.in"
-      "${CMAKE_BINARY_DIR}/postinstall.sh"
+    CONFIGURE_FILE("${PROJECT_SOURCE_DIR}/postinstall.sh.in"
+      "${PROJECT_BINARY_DIR}/postinstall.sh"
       @ONLY)
 
     ADD_CUSTOM_TARGET(build-netcdf-fortran
-      COMMAND sh -c "${CMAKE_BINARY_DIR}/postinstall.sh -t cmake -a build"
+      COMMAND sh -c "${PROJECT_BINARY_DIR}/postinstall.sh -t cmake -a build"
       DEPENDS netcdf
       )
 
     ADD_CUSTOM_TARGET(install-netcdf-fortran
-      COMMAND sh -c "${CMAKE_BINARY_DIR}/postinstall.sh -t cmake -a install"
+      COMMAND sh -c "${PROJECT_BINARY_DIR}/postinstall.sh -t cmake -a install"
       DEPENDS build-netcdf-fortran
       )
 
@@ -788,7 +788,7 @@
 ENDIF(USE_HDF5 OR ENABLE_NETCDF_4)
 
 # See if we have libcurl
-FIND_PACKAGE(CURL)
-ADD_DEFINITIONS(-DCURL_STATICLIB=1)
+FIND_PACKAGE(CURL REQUIRED)
+#ADD_DEFINITIONS(-DCURL_STATICLIB=1)
 INCLUDE_DIRECTORIES(${CURL_INCLUDE_DIRS})
 
@@ -854,4 +854,4 @@
 # Option to support byte-range reading of remote datasets
 OPTION(ENABLE_BYTERANGE "Enable byte-range access to remote datasets.." OFF)
 
-IF(NOT CURL_LIBRARY)
+IF(NOT CURL_LIBRARIES)
   IF(ENABLE_BYTERANGE)
     MESSAGE(FATAL_ERROR "Byte-range support specified, CURL libraries are not found.")
   ENDIF()
@@ -1193,8 +1193,8 @@ IF(ENABLE_DOXYGEN)
   ###
   OPTION(ENABLE_DOXYGEN_BUILD_RELEASE_DOCS "Build release documentation.  This is of interest only to the netCDF developers." OFF)
   IF(ENABLE_DOXYGEN_BUILD_RELEASE_DOCS)
-    SET(DOXYGEN_CSS_FILE "${CMAKE_SOURCE_DIR}/docs/release.css" CACHE STRING "")
-    SET(DOXYGEN_HEADER_FILE "${CMAKE_SOURCE_DIR}/docs/release_header.html" CACHE STRING "")
+    SET(DOXYGEN_CSS_FILE "${PROJECT_SOURCE_DIR}/docs/release.css" CACHE STRING "")
+    SET(DOXYGEN_HEADER_FILE "${PROJECT_SOURCE_DIR}/docs/release_header.html" CACHE STRING "")
     SET(DOXYGEN_SEARCHENGINE "NO" CACHE STRING "")
     SET(ENABLE_DOXYGEN_SERVER_BASED_SEARCH NO CACHE STRING "")
   ELSE()
@@ -1499,7 +1499,7 @@ MACRO(add_bin_env_temp_large_test prefix F)
       )
   ENDIF()
 
-  ADD_TEST(${prefix}_${F} bash "-c" "TEMP_LARGE=${CMAKE_SOURCE_DIR} ${CMAKE_CURRENT_BINARY_DIR}/${prefix}_${F}")
+  ADD_TEST(${prefix}_${F} bash "-c" "TEMP_LARGE=${PROJECT_SOURCE_DIR} ${CMAKE_CURRENT_BINARY_DIR}/${prefix}_${F}")
   IF(MSVC)
     SET_PROPERTY(TARGET ${prefix}_${F} PROPERTY FOLDER "tests")
     SET_TARGET_PROPERTIES(${prefix}_${F} PROPERTIES RUNTIME_OUTPUT_DIRECTORY
@@ -1680,7 +1680,7 @@ ENDIF(ENABLE_BASH_SCRIPT_TESTING)
 
 MACRO(add_sh_test prefix F)
   IF(HAVE_BASH)
-    ADD_TEST(${prefix}_${F} bash "-c" "export srcdir=${CMAKE_CURRENT_SOURCE_DIR};export TOPSRCDIR=${CMAKE_SOURCE_DIR};${CMAKE_CURRENT_BINARY_DIR}/${F}.sh")
+    ADD_TEST(${prefix}_${F} bash "-c" "export srcdir=${CMAKE_CURRENT_SOURCE_DIR};export TOPSRCDIR=${PROJECT_SOURCE_DIR};${CMAKE_CURRENT_BINARY_DIR}/${F}.sh")
   ENDIF()
 ENDMACRO()
 
--- cmake/modules/FindMakeDist.cmake
+++ cmake/modules/FindMakeDist.cmake
@@ -153,9 +153,9 @@ macro(enable_makedist)
     get_source_file_property(__makedist_extradist   "${__makedist_source}" EXTRADIST)
 
     if(NOT __makedist_generated)
-      file(RELATIVE_PATH __makedist_cur_path "${CMAKE_SOURCE_DIR}" "${__makedist_full_cur_path}")
+      file(RELATIVE_PATH __makedist_cur_path "${PROJECT_SOURCE_DIR}" "${__makedist_full_cur_path}")
     elseif(__makedist_extradist)
-      file(RELATIVE_PATH __makedist_cur_path "${CMAKE_BINARY_DIR}" "${__makedist_full_cur_path}")
+      file(RELATIVE_PATH __makedist_cur_path "${PROJCT_BINARY_DIR}" "${__makedist_full_cur_path}")
     else(__makedist_extradist)
       set(__makedist_cur_path)
     endif(NOT __makedist_generated)
--- docs/CMakeLists.txt
+++ docs/CMakeLists.txt
@@ -11,12 +11,12 @@
 IF(ENABLE_DOXYGEN)
   # The following is redundant but does not hurt anything.
 
-  FILE(GLOB COPY_FILES ${CMAKE_CURRENT_SOURCE_DIR}/*.html ${CMAKE_CURRENT_SOURCE_DIR}/images ${CMAKE_CURRENT_SOURCE_DIR}/*.doc ${CMAKE_CURRENT_SOURCE_DIR}/*.xml ${CMAKE_CURRENT_SOURCE_DIR}/*.m4 ${CMAKE_CURRENT_SOURCE_DIR}/*.texi ${CMAKE_SOURCE_DIR}/oc2/auth.html.in)
+  FILE(GLOB COPY_FILES ${CMAKE_CURRENT_SOURCE_DIR}/*.html ${CMAKE_CURRENT_SOURCE_DIR}/images ${CMAKE_CURRENT_SOURCE_DIR}/*.doc ${CMAKE_CURRENT_SOURCE_DIR}/*.xml ${CMAKE_CURRENT_SOURCE_DIR}/*.m4 ${CMAKE_CURRENT_SOURCE_DIR}/*.texi ${PROJECT_SOURCE_DIR}/oc2/auth.html.in)
   FILE(COPY ${COPY_FILES} DESTINATION ${CMAKE_CURRENT_BINARY_DIR}/)
 
   # Set abs_top_srcdir to work with the autotools
   # doxyfile template.
-  SET(abs_top_srcdir ${CMAKE_SOURCE_DIR})
+  SET(abs_top_srcdir ${PROJECT_SOURCE_DIR})
   SET(abs_builddir ${CMAKE_CURRENT_BINARY_DIR})
 
   # Create general and guide doxyfiles.
@@ -34,7 +34,7 @@ IF(ENABLE_DOXYGEN)
     # Create auth.html with some sed commands.
   ADD_CUSTOM_TARGET(oc2-auth
 
-    cat ${CMAKE_SOURCE_DIR}/oc2/auth.html.in | sed -e "/<OC>/d" | sed -e "s|^<NC>||" | sed -e "s|zz|netcdf|g" -e "s|ZZ|netCDF|g" | sed -e "/stylesheet/r${CMAKE_SOURCE_DIR}/oc2/oc.css" -e "/stylesheet/d" > ${CMAKE_CURRENT_SOURCE_DIR}/auth.html
+    cat ${PROJECT_SOURCE_DIR}/oc2/auth.html.in | sed -e "/<OC>/d" | sed -e "s|^<NC>||" | sed -e "s|zz|netcdf|g" -e "s|ZZ|netCDF|g" | sed -e "/stylesheet/r${PROJECT_SOURCE_DIR}/oc2/oc.css" -e "/stylesheet/d" > ${CMAKE_CURRENT_SOURCE_DIR}/auth.html
     COMMAND cp ${CMAKE_CURRENT_SOURCE_DIR}/auth.html ${CMAKE_CURRENT_BINARY_DIR}/html
     WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
     VERBATIM
--- nc_test/CMakeLists.txt
+++ nc_test/CMakeLists.txt
@@ -5,15 +5,15 @@
 
 # See netcdf-c/COPYRIGHT file for more info.
 
-message(STATUS "CMAKE_SOURCE_DIR=${CMAKE_SOURCE_DIR}")
-message(STATUS "CMAKE_BINARY_DIR=${CMAKE_BINARY_DIR}")
+message(STATUS "PROJECT_SOURCE_DIR=${PROJECT_SOURCE_DIR}")
+message(STATUS "PROJECT_BINARY_DIR=${PROJECT_BINARY_DIR}")
 message(STATUS "CMAKE_CURRENT_SOURCE_DIR=${CMAKE_CURRENT_SOURCE_DIR}")
 message(STATUS "CMAKE_CURRENT_BINARY_DIR=${CMAKE_CURRENT_BINARY_DIR}")
 
-add_definitions(-D"TOPSRCDIR=${CMAKE_SOURCE_DIR}")
-add_definitions(-D"TOPBINDIR=${CMAKE_BINARY_DIR}")
+add_definitions(-D"TOPSRCDIR=${PROJECT_SOURCE_DIR}")
+add_definitions(-D"TOPBINDIR=${PROJECT_BINARY_DIR}")
 
-INCLUDE_DIRECTORIES(${CMAKE_BINARY_DIR}/include)
+INCLUDE_DIRECTORIES(${PROJECT_BINARY_DIR}/include)
 
 SET (nc_test_m4_SOURCES test_get test_put test_read test_write)
 FOREACH (F ${nc_test_m4_SOURCES})
--- liblib/CMakeLists.txt
+++ liblib/CMakeLists.txt
@@ -88,7 +88,7 @@ IF(USE_HDF5 OR USE_NETCDF4)
 ENDIF()
 
 IF(USE_DAP)
-  SET(TLL_LIBS ${TLL_LIBS} ${CURL_LIBRARY})
+  SET(TLL_LIBS ${TLL_LIBS} ${CURL_LIBRARIES})
 ENDIF()
 
 IF(USE_HDF4)
