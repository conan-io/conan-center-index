diff --git a/cmake/SelectHTTPParser.cmake b/cmake/SelectHTTPParser.cmake
index e547e2d01..106cb6416 100644
--- a/cmake/SelectHTTPParser.cmake
+++ b/cmake/SelectHTTPParser.cmake
@@ -1,10 +1,10 @@
 # Optional external dependency: http-parser
 if(USE_HTTP_PARSER STREQUAL "http-parser" OR USE_HTTP_PARSER STREQUAL "system")
-	find_package(HTTP_Parser)
+	find_package(http_parser)
 
-	if(HTTP_PARSER_FOUND AND HTTP_PARSER_VERSION_MAJOR EQUAL 2)
-		list(APPEND LIBGIT2_SYSTEM_INCLUDES ${HTTP_PARSER_INCLUDE_DIRS})
-		list(APPEND LIBGIT2_SYSTEM_LIBS ${HTTP_PARSER_LIBRARIES})
+	if(http_parser_FOUND)
+		list(APPEND LIBGIT2_SYSTEM_INCLUDES ${http_parser_INCLUDE_DIRS})
+		list(APPEND LIBGIT2_SYSTEM_LIBS ${http_parser_LIBRARIES})
 		list(APPEND LIBGIT2_PC_LIBS "-lhttp_parser")
 		set(GIT_HTTPPARSER_HTTPPARSER 1)
 		add_feature_info(http-parser ON "using http-parser (system)")
diff --git a/cmake/SelectHTTPSBackend.cmake b/cmake/SelectHTTPSBackend.cmake
index 0316b3a1c..8e7532b58 100644
--- a/cmake/SelectHTTPSBackend.cmake
+++ b/cmake/SelectHTTPSBackend.cmake
@@ -15,6 +15,11 @@ endif()
 sanitizebool(USE_HTTPS)
 
 if(USE_HTTPS)
+	if(WIN32)
+		list(APPEND LIBGIT2_SYSTEM_LIBS "secur32")
+		list(APPEND LIBGIT2_PC_LIBS "-lsecur32")
+	endif()
+
 	# Auto-select TLS backend
 	if(USE_HTTPS STREQUAL ON)
 		if(SECURITY_FOUND)
diff --git a/cmake/SelectSSH.cmake b/cmake/SelectSSH.cmake
index b0d747114..7e3ca6b9a 100644
--- a/cmake/SelectSSH.cmake
+++ b/cmake/SelectSSH.cmake
@@ -4,15 +4,14 @@ if(USE_SSH STREQUAL "exec")
 
 	add_feature_info(SSH ON "using OpenSSH exec support")
 elseif(USE_SSH STREQUAL ON OR USE_SSH STREQUAL "libssh2")
-	find_pkglibraries(LIBSSH2 libssh2)
+	FIND_PACKAGE(Libssh2 REQUIRED)
+	SET(LIBSSH2_FOUND ON)
 
-	if(NOT LIBSSH2_FOUND)
-		find_package(LibSSH2)
-		set(LIBSSH2_INCLUDE_DIRS ${LIBSSH2_INCLUDE_DIR})
-		get_filename_component(LIBSSH2_LIBRARY_DIRS "${LIBSSH2_LIBRARY}" DIRECTORY)
-		set(LIBSSH2_LIBRARIES ${LIBSSH2_LIBRARY})
-		set(LIBSSH2_LDFLAGS "-lssh2")
-	endif()
+	message(STATUS "SSH includes!:${Libssh2_INCLUDE_DIRS}")
+
+	SET(LIBSSH2_INCLUDE_DIRS ${Libssh2_INCLUDE_DIRS})
+	SET(LIBSSH2_LIBRARIES ${Libssh2_LIBRARIES})
+	SET(LIBSSH2_LIBRARY_DIRS ${Libssh2_LIB_DIRS})
 
 	if(NOT LIBSSH2_FOUND)
 		message(FATAL_ERROR "LIBSSH2 not found. Set CMAKE_PREFIX_PATH if it is installed outside of the default search path.")
