From ca7513b61249d5698e0d815012f5fd53de14d468 Mon Sep 17 00:00:00 2001
From: synacker <milovidovmikhail@gmail.com>
Date: Sun, 16 Jan 2022 01:23:12 +0300
Subject: [PATCH 1/1] Revert standard to 17 by default

---
 CMakeLists.txt                                |   2 -
 src/CMakeLists.txt                            |   2 +-
 src/Daggy/CMakeLists.txt                      |   1 -
 src/DaggyCore/CMakeLists.txt                  |   2 +-
 src/DaggyCore/Core.cpp                        | 137 ++++++++++--------
 src/DaggyCore/Core.hpp                        |  12 +-
 .../tests/interface/testcpp/CMakeLists.txt    |   5 +-
 src/cmake/compiler.cmake                      |   4 +-
 8 files changed, 95 insertions(+), 70 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index fb296b1..5e47f42 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -13,6 +13,4 @@ include(conan)
 option(CONAN_BUILD "build with conan" ON)
 option(PACKAGE_DEPS "include daggy deps into package" ON)
 
-enable_testing()
-
 add_subdirectory(src)
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index 07367fd..5915705 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -34,7 +34,7 @@ include_directories(${CMAKE_CURRENT_SOURCE_DIR})
 
 include(compiler)
 
-enable_testing()
+include(CTest)
 
 add_subdirectory(DaggyCore)
 if(CONSOLE)
diff --git a/src/Daggy/CMakeLists.txt b/src/Daggy/CMakeLists.txt
index 1056b0b..a2b701a 100644
--- a/src/Daggy/CMakeLists.txt
+++ b/src/Daggy/CMakeLists.txt
@@ -26,7 +26,6 @@ ADD_BINARY_META()
 SET_RPATH()
 
 add_executable(${TARGET} ${SOURCES})
-set_property(TARGET ${TARGET} PROPERTY CXX_STANDARD 20)
 target_link_libraries(${TARGET} PRIVATE DaggyCore)
 target_precompile_headers(${TARGET} PRIVATE Precompiled.hpp)
 
diff --git a/src/DaggyCore/CMakeLists.txt b/src/DaggyCore/CMakeLists.txt
index 88613a7..6f5a09c 100644
--- a/src/DaggyCore/CMakeLists.txt
+++ b/src/DaggyCore/CMakeLists.txt
@@ -50,6 +50,7 @@ set(LINK_LIBRARIES
     Qt6::Core Qt6::Network
 )
 
+include(CTest)
 if (BUILD_TESTING)
     add_subdirectory(tests/local)
     add_subdirectory(tests/pingpong)
@@ -85,7 +86,6 @@ ADD_BINARY_META(LIB)
 SET_RPATH(LIB)
 
 add_library(${TARGET} ${SOURCES} ${HEADERS})
-set_property(TARGET ${TARGET} PROPERTY CXX_STANDARD 20)
 target_link_libraries(${TARGET} ${LINK_LIBRARIES})
 
 include(GenerateExportHeader)
diff --git a/src/DaggyCore/Core.cpp b/src/DaggyCore/Core.cpp
index de648ee..2d03f67 100644
--- a/src/DaggyCore/Core.cpp
+++ b/src/DaggyCore/Core.cpp
@@ -183,7 +183,12 @@ std::error_code Core::prepare()
     return error;
 }
 
-std::error_code Core::prepare(std::span<providers::IFabric*> fabrics)
+std::error_code Core::prepare(QString& error) noexcept
+{
+    return prepare(nullptr, 0, error);
+}
+
+std::error_code Core::prepare(std::vector<providers::IFabric*> fabrics)
 {
     QString message;
     auto error = prepare(std::move(fabrics), message);
@@ -192,12 +197,80 @@ std::error_code Core::prepare(std::span<providers::IFabric*> fabrics)
     return error;
 }
 
-std::error_code Core::prepare(QString& error) noexcept
+std::error_code Core::prepare(std::vector<providers::IFabric*> fabrics, QString& error) noexcept
+{
+    return prepare(fabrics.data(), fabrics.size(), error);
+}
+
+#if __cplusplus > 201703L
+std::error_code Core::prepare(std::span<providers::IFabric*> fabrics)
 {
-    return prepare({}, error);
+    QString message;
+    auto error = prepare(std::move(fabrics), message);
+    if (error)
+        throw std::runtime_error(message.toStdString());
+    return error;
 }
 
 std::error_code Core::prepare(std::span<providers::IFabric*> fabrics, QString& error) noexcept
+{
+    return prepare(fabrics.data(), fabrics.size(), error);
+}
+#endif
+
+void Core::onDataProviderStateChanged(DaggyProviderStates state)
+{
+    const QString& provider_id = sender()->objectName();
+    emit dataProviderStateChanged(provider_id,
+                                  state);
+
+    const auto& source = sources_[provider_id];
+    if (state == DaggyProviderFinished &&
+        source.reconnect &&
+        state_ == DaggyStarted)
+    {
+        auto* provider = getProvider(provider_id);
+        provider->start();
+    }
+
+    if (activeDataProvidersCount() == 0) {
+        setState(DaggyFinished);
+    }
+}
+
+void Core::onDataProviderError(std::error_code error_code)
+{
+    emit dataProviderError(sender()->objectName(),
+                           error_code);
+}
+
+void Core::onCommandStateChanged(QString command_id,
+                                      DaggyCommandStates state,
+                                      int exit_code)
+{
+    emit commandStateChanged(sender()->objectName(),
+                             command_id,
+                             state,
+                             exit_code);
+}
+
+void Core::onCommandStream(QString command_id,
+                                sources::commands::Stream stream)
+{
+    emit commandStream(sender()->objectName(),
+                       command_id,
+                       stream);
+}
+
+void Core::onCommandError(QString command_id,
+                          std::error_code error_code)
+{
+    emit commandError(sender()->objectName(),
+                      command_id,
+                      error_code);
+}
+
+std::error_code Core::prepare(providers::IFabric** fabrics, const size_t size, QString& error) noexcept
 try {
     const auto& providers = getProviders();
     if (!providers.isEmpty())
@@ -211,9 +284,9 @@ try {
     static thread_local providers::CSsh2Fabric ssh2_fabric;
     fabrics_map[providers::CSsh2::provider_type] = &ssh2_fabric;
 #endif
-
-    for (const auto& fabric : fabrics)
-        fabrics_map[fabric->type()] = fabric;
+    if (fabrics)
+        for (size_t index = 0; index < size; index++)
+            fabrics_map[fabrics[index]->type()] = fabrics[index];
 
     auto source = sources_.cbegin();
     while(source != sources_.cend()) {
@@ -261,58 +334,6 @@ catch (const std::system_error& exception)
     return errors::make_error_code(DaggyErrorProviderCannotPrepare);
 }
 
-void Core::onDataProviderStateChanged(DaggyProviderStates state)
-{
-    const QString& provider_id = sender()->objectName();
-    emit dataProviderStateChanged(provider_id,
-                                  state);
-
-    const auto& source = sources_[provider_id];
-    if (state == DaggyProviderFinished &&
-        source.reconnect &&
-        state_ == DaggyStarted)
-    {
-        auto* provider = getProvider(provider_id);
-        provider->start();
-    }
-
-    if (activeDataProvidersCount() == 0) {
-        setState(DaggyFinished);
-    }
-}
-
-void Core::onDataProviderError(std::error_code error_code)
-{
-    emit dataProviderError(sender()->objectName(),
-                           error_code);
-}
-
-void Core::onCommandStateChanged(QString command_id,
-                                      DaggyCommandStates state,
-                                      int exit_code)
-{
-    emit commandStateChanged(sender()->objectName(),
-                             command_id,
-                             state,
-                             exit_code);
-}
-
-void Core::onCommandStream(QString command_id,
-                                sources::commands::Stream stream)
-{
-    emit commandStream(sender()->objectName(),
-                       command_id,
-                       stream);
-}
-
-void Core::onCommandError(QString command_id,
-                          std::error_code error_code)
-{
-    emit commandError(sender()->objectName(),
-                      command_id,
-                      error_code);
-}
-
 QList<providers::IProvider*> Core::getProviders() const
 {
     return findChildren<providers::IProvider*>();
diff --git a/src/DaggyCore/Core.hpp b/src/DaggyCore/Core.hpp
index 205c236..f2c96a3 100644
--- a/src/DaggyCore/Core.hpp
+++ b/src/DaggyCore/Core.hpp
@@ -25,7 +25,9 @@ SOFTWARE.
 
 #include <memory>
 #include <unordered_map>
+#if __cplusplus > 201703L
 #include <span>
+#endif
 #include <system_error>
 
 #include <QMap>
@@ -72,11 +74,16 @@ public:
     DaggyStates state() const noexcept;
 
     std::error_code prepare();
-    std::error_code prepare(std::span<providers::IFabric*> fabrics);
 
     std::error_code prepare(QString& error) noexcept;
-    std::error_code prepare(std::span<providers::IFabric*> fabrics, QString& error) noexcept;
 
+    std::error_code prepare(std::vector<providers::IFabric*> fabrics);
+    std::error_code prepare(std::vector<providers::IFabric*> fabrics, QString& error) noexcept;
+
+#if __cplusplus > 201703L
+    std::error_code prepare(std::span<providers::IFabric*> fabrics);
+    std::error_code prepare(std::span<providers::IFabric*> fabrics, QString& error) noexcept;
+#endif
     std::error_code connectAggregator(aggregators::IAggregator* aggregator) noexcept;
 
 signals:
@@ -111,6 +118,7 @@ private slots:
                         std::error_code error_code);
 
 private:
+    std::error_code prepare(providers::IFabric** fabrics, const size_t size, QString& error) noexcept;
     providers::IFabric* getFabric(const QString& type) const;
 
     QList<providers::IProvider*> getProviders() const;
diff --git a/src/DaggyCore/tests/interface/testcpp/CMakeLists.txt b/src/DaggyCore/tests/interface/testcpp/CMakeLists.txt
index 0338cbc..d1f19af 100644
--- a/src/DaggyCore/tests/interface/testcpp/CMakeLists.txt
+++ b/src/DaggyCore/tests/interface/testcpp/CMakeLists.txt
@@ -1,7 +1,4 @@
 project(testcpp LANGUAGES CXX)
 
-set(CMAKE_CXX_STANDARD 20)
-set(CMAKE_CXX_STANDARD_REQUIRED ON)
-
 add_executable(testcpp test.cpp)
-target_link_libraries(testcpp DaggyCore)
\ No newline at end of file
+target_link_libraries(testcpp DaggyCore)
diff --git a/src/cmake/compiler.cmake b/src/cmake/compiler.cmake
index b60a077..3523450 100644
--- a/src/cmake/compiler.cmake
+++ b/src/cmake/compiler.cmake
@@ -1,6 +1,8 @@
 include(GNUInstallDirs)
 
-set(CMAKE_CXX_STANDARD 20)
+if (NOT CMAKE_CXX_STANDARD)
+    set(CMAKE_CXX_STANDARD 17)
+endif()
 set(CMAKE_CXX_STANDARD_REQUIRED ON)
 
 set(CMAKE_AUTOMOC ON)
-- 
2.33.1

