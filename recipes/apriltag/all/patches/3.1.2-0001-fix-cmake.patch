--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -1,26 +1,31 @@
-cmake_minimum_required(VERSION 3.1)
-project(apriltag)
+cmake_minimum_required(VERSION 3.8)
+project(apriltag LANGUAGES C)
 
-find_package(OpenCV QUIET)
 
 include_directories(.)
 aux_source_directory(common COMMON_SRC)
 set(APRILTAG_SRCS apriltag.c apriltag_pose.c apriltag_quad_thresh.c)
 
-set(CMAKE_BUILD_TYPE Release)
 
 # Library
 file(GLOB TAG_FILES ${CMAKE_SOURCE_DIR}/tag*.c)
 set_source_files_properties(SOURCE ${TAG_FILES} PROPERTIES COMPILE_FLAGS -O0)
-add_library(${PROJECT_NAME} SHARED ${APRILTAG_SRCS} ${COMMON_SRC} ${TAG_FILES})
+add_library(${PROJECT_NAME} ${APRILTAG_SRCS} ${COMMON_SRC} ${TAG_FILES})
+target_compile_features(${PROJECT_NAME} PRIVATE c_std_99)
 if (MSVC)
     # FindThreads will not find pthread.h with MSVC
     # winmm is necessary for __imp_timeGetTime
-    find_library(PTHREAD_LIBRARIES NAMES pthreads)
-    target_link_libraries(${PROJECT_NAME} ${PTHREAD_LIBRARIES} winmm)
+    find_package(pthreads4w REQUIRED CONFIG)
+    target_link_libraries(${PROJECT_NAME} pthreads4w::pthreads4w winmm)
+    target_compile_definitions(${PROJECT_NAME} PRIVATE _CRT_SECURE_NO_WARNINGS)
 else()
     find_package(Threads REQUIRED)
-    target_link_libraries(${PROJECT_NAME} Threads::Threads m)
+    target_link_libraries(${PROJECT_NAME} Threads::Threads)
+    include(CheckFunctionExists)
+    check_function_exists(pow HAVE_MATH_SYSTEM)
+    if(NOT HAVE_MATH_SYSTEM)
+        target_link_libraries(${PROJECT_NAME} m)
+    endif()
 endif()
 
 set_target_properties(${PROJECT_NAME} PROPERTIES SOVERSION 3 VERSION 3.1.0)
@@ -39,6 +43,7 @@ set_target_properties(${PROJECT_NAME} PROPERTIES
 
 # install library
 install(TARGETS ${PROJECT_NAME} EXPORT apriltag
+    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
     LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
     ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
 )
@@ -63,6 +68,7 @@ install(FILES "${PROJECT_BINARY_DIR}/apriltag.pc" DESTINATION "lib/pkgconfig/")
 
 
 # Python wrapper
+if(0)
 SET(Python_ADDITIONAL_VERSIONS 3)
 find_package(PythonLibs)
 execute_process(COMMAND which python3 OUTPUT_QUIET RESULT_VARIABLE Python3_NOT_FOUND)
@@ -95,21 +101,19 @@ execute_process(COMMAND python3 -m site --user-site OUTPUT_VARIABLE PY_DEST)
 string(STRIP ${PY_DEST} PY_DEST)
 install(CODE "execute_process(COMMAND cp ${PROJECT_BINARY_DIR}/apriltag${PY_EXT_SUFFIX} ${PY_DEST})")
 endif (NOT Python3_NOT_FOUND AND NOT Numpy_NOT_FOUND AND PYTHONLIBS_FOUND)
+endif()
 
 
 # Examples
 # apriltag_demo
-add_executable(apriltag_demo example/apriltag_demo.c)
-target_link_libraries(apriltag_demo apriltag)
 
 # opencv_demo
-if(OpenCV_FOUND)
+if(0)
     add_executable(opencv_demo example/opencv_demo.cc)
     target_link_libraries(opencv_demo apriltag ${OpenCV_LIBRARIES})
     set_target_properties(opencv_demo PROPERTIES CXX_STANDARD 11)
     install(TARGETS opencv_demo RUNTIME DESTINATION bin)
-endif(OpenCV_FOUND)
+endif()
 
 # install example programs
-install(TARGETS apriltag_demo RUNTIME DESTINATION bin)
 
