--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -71,7 +71,7 @@ ELSE()
   SET (LIB_TYPE STATIC)
 ENDIF(BUILD_SHARED_LIBS)
 
-IF(NOT MSVC)
+IF(NOT WIN32)
    # Find curl library, for HTTPS support:
    IF(USE_CURL)
       FIND_PACKAGE(CURL)
@@ -82,8 +82,14 @@ IF(NOT MSVC)
 ENDIF(NOT MSVC)
 
 IF(USE_PTHREADS)
-   FIND_PACKAGE(Threads REQUIRED)
-   ADD_DEFINITIONS(-D_REENTRANT)
+    SET(CMAKE_THREAD_PREFER_PTHREAD TRUE)
+    SET(THREADS_PREFER_PTHREAD_FLAG TRUE)
+    FIND_PACKAGE(Threads REQUIRED)
+    IF(CMAKE_USE_PTHREADS_INIT)
+        LIST(APPEND LINK_LIBS "Threads::Threads")
+    ELSE()
+        LIST(APPEND LINK_LIBS "CONAN_PKG::pthreads4w")
+    ENDIF()
 ENDIF(USE_PTHREADS)
 
 IF(CFITSIO_USE_BZIP2)
@@ -99,19 +105,13 @@ ELSE()
 ENDIF()
 
 # Support for remote file drivers is not implemented for native Windows:
-IF (NOT MSVC)
+IF (NOT WIN32)
 
     # Find library needed for gethostbyname:
-    CHECK_FUNCTION_EXISTS("gethostbyname" CMAKE_HAVE_GETHOSTBYNAME)
-    IF (NOT CMAKE_HAVE_GETHOSTBYNAME)
-        CHECK_LIBRARY_EXISTS("nsl" "gethostbyname" "" CMAKE_HAVE_GETHOSTBYNAME)
-    ENDIF ()
+    CHECK_SYMBOL_EXISTS(gethostbyname "netdb.h" CMAKE_HAVE_GETHOSTBYNAME)
 
     # Find library needed for connect:
-    CHECK_FUNCTION_EXISTS("connect" CMAKE_HAVE_CONNECT)
-    IF (NOT CMAKE_HAVE_CONNECT)
-        CHECK_LIBRARY_EXISTS("socket" "connect" "" CMAKE_HAVE_CONNECT)
-    ENDIF ()
+    CHECK_SYMBOL_EXISTS(connect "sys/types.h;sys/socket.h" CMAKE_HAVE_CONNECT)
 
     # Define HAVE_NET_SERVICES if gethostbyname & connect were found:
     IF (CMAKE_HAVE_GETHOSTBYNAME AND CMAKE_HAVE_CONNECT)
@@ -275,7 +275,6 @@ IF (BZIP2_FOUND)
 ENDIF(BZIP2_FOUND)
 
 SET_TARGET_PROPERTIES(${LIB_NAME} PROPERTIES VERSION ${${PROJECT_NAME}_VERSION} SOVERSION ${${PROJECT_NAME}_MAJOR_VERSION})
-install(TARGETS ${LIB_NAME} DESTINATION ${LIB_DESTINATION})
 install(TARGETS ${LIB_NAME}
                             RUNTIME DESTINATION bin
                             LIBRARY DESTINATION lib
