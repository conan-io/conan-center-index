--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -82,8 +82,9 @@ IF(NOT WIN32)
 ENDIF(NOT WIN32)
 
 IF(USE_PTHREADS)
+   SET(CMAKE_THREAD_PREFER_PTHREAD TRUE)
+   SET(THREADS_PREFER_PTHREAD_FLAG TRUE)
    FIND_PACKAGE(Threads REQUIRED)
-   ADD_DEFINITIONS(-D_REENTRANT)
 ENDIF(USE_PTHREADS)
 
 IF(USE_BZIP2)
@@ -99,19 +100,13 @@ ELSE()
 ENDIF()
 
 # Support for remote file drivers is not implemented for native Windows:
-IF (NOT MSVC)
+IF (NOT WIN32)
 
     # Find library needed for gethostbyname:
-    CHECK_FUNCTION_EXISTS("gethostbyname" CMAKE_HAVE_GETHOSTBYNAME)
-    IF (NOT CMAKE_HAVE_GETHOSTBYNAME)
-        CHECK_LIBRARY_EXISTS("nsl" "gethostbyname" "" CMAKE_HAVE_GETHOSTBYNAME)
-    ENDIF ()
+    CHECK_SYMBOL_EXISTS(gethostbyname "netdb.h" CMAKE_HAVE_GETHOSTBYNAME)
 
     # Find library needed for connect:
-    CHECK_FUNCTION_EXISTS("connect" CMAKE_HAVE_CONNECT)
-    IF (NOT CMAKE_HAVE_CONNECT)
-        CHECK_LIBRARY_EXISTS("socket" "connect" "" CMAKE_HAVE_CONNECT)
-    ENDIF ()
+    CHECK_SYMBOL_EXISTS(connect "sys/types.h;sys/socket.h" CMAKE_HAVE_CONNECT)
 
     # Define HAVE_NET_SERVICES if gethostbyname & connect were found:
     IF (CMAKE_HAVE_GETHOSTBYNAME AND CMAKE_HAVE_CONNECT)
@@ -265,28 +260,30 @@ TARGET_INCLUDE_DIRECTORIES(${LIB_NAME} PUBLIC
 TARGET_LINK_LIBRARIES(${LIB_NAME} ${M_LIB})
 # zlib:
 IF (ZLIB_FOUND)
-    TARGET_INCLUDE_DIRECTORIES(${LIB_NAME} PUBLIC ${ZLIB_INCLUDE_DIR})
-    TARGET_LINK_LIBRARIES(${LIB_NAME} ${ZLIB_LIBRARIES})
+    TARGET_LINK_LIBRARIES(${LIB_NAME} ZLIB::ZLIB)
     # For cfitsio.pc.cmake:
     SET (PKG_CONFIG_LIBS "${PKG_CONFIG_LIBS} -lz")
 ENDIF(ZLIB_FOUND)
 # cURL:
-IF (CURL_FOUND)
-    TARGET_INCLUDE_DIRECTORIES(${LIB_NAME} PUBLIC ${CURL_INCLUDE_DIRS})
-    TARGET_LINK_LIBRARIES(${LIB_NAME} ${CURL_LIBRARIES})
+IF (USE_CURL)
+    TARGET_LINK_LIBRARIES(${LIB_NAME} CURL::libcurl)
     # For cfitsio.pc.cmake:
     SET (PKG_CONFIG_LIBS "${PKG_CONFIG_LIBS} -lcurl")
-ENDIF(CURL_FOUND)
+ENDIF()
 # PThreads:
-IF (THREADS_FOUND)
+IF (USE_PTHREADS)
+    IF(CMAKE_USE_PTHREADS_INIT)
     TARGET_LINK_LIBRARIES(${LIB_NAME} Threads::Threads)
-ENDIF(THREADS_FOUND)
+    ELSE()
+        find_package(pthreads4w REQUIRED CONFIG)
+        TARGET_LINK_LIBRARIES(${LIB_NAME} pthreads4w::pthreads4w)
+    ENDIF()
+ENDIF()
 # BZip2:
-IF (BZIP2_FOUND)
-    TARGET_INCLUDE_DIRECTORIES(${LIB_NAME} PUBLIC ${BZIP2_INCLUDE_DIRS})
-    TARGET_LINK_LIBRARIES(${LIB_NAME} ${BZIP2_LIBRARIES})
+IF (USE_BZIP2)
+    TARGET_LINK_LIBRARIES(${LIB_NAME} BZip2::BZip2)
     SET (PKG_CONFIG_LIBS "${PKG_CONFIG_LIBS} -lbz2")
-ENDIF(BZIP2_FOUND)
+ENDIF()
 
 SET_TARGET_PROPERTIES(${LIB_NAME} PROPERTIES VERSION ${${PROJECT_NAME}_VERSION} SOVERSION ${${PROJECT_NAME}_MAJOR})
 
