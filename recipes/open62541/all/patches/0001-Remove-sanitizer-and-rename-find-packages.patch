From 91c460b7c1cea8b1126978eec341da0428fd11b9 Mon Sep 17 00:00:00 2001
From: syoliver <50275847+syoliver@users.noreply.github.com>
Date: Sat, 13 Jun 2020 19:06:57 +0200
Subject: [PATCH] Remove sanitizer and rename find packages

---
 CMakeLists.txt | 35 +++++++++++++----------------------
 1 file changed, 13 insertions(+), 22 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index ee40c19a..9f670281 100755
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -7,7 +7,7 @@ endif()
 
 string(TOLOWER "${CMAKE_BUILD_TYPE}" BUILD_TYPE_LOWER_CASE)
 
-set(CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}/tools/cmake")
+list(APPEND CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}/tools/cmake")
 find_package(PythonInterp REQUIRED)
 find_package(Git)
 include(AssignSourceGroup)
@@ -456,13 +456,13 @@ if(UA_ENABLE_ENCRYPTION)
         # use the OpenSSL encryption library
         # https://cmake.org/cmake/help/v3.0/module/FindOpenSSL.html
         find_package(OpenSSL REQUIRED)
-        list(APPEND open62541_LIBRARIES ${OPENSSL_LIBRARIES})
+        list(APPEND open62541_LIBRARIES ${OpenSSL_LIBRARIES})
     else()
         # The recommended way is to install mbedtls via the OS package manager. If
         # that is not possible, manually compile mbedTLS and set the cmake variables
         # defined in /tools/cmake/FindMbedTLS.cmake.
         find_package(MbedTLS REQUIRED)
-        list(APPEND open62541_LIBRARIES ${MBEDTLS_LIBRARIES})
+        list(APPEND open62541_LIBRARIES ${MbedTLS_LIBRARIES})
     endif()
 endif()
 
@@ -471,7 +471,7 @@ if(UA_ENABLE_WEBSOCKET_SERVER)
     # that is not possible, manually compile libwebsockets and set the cmake variables
     # defined in /tools/cmake/Findlibwebsockets.cmake
     find_package(libwebsockets REQUIRED)
-    list(APPEND open62541_LIBRARIES ${LIBWEBSOCKETS_LIBRARIES})
+    list(APPEND open62541_LIBRARIES ${libwebsockets_LIBRARIES})
 endif()
 
 if(MINGW)
@@ -532,6 +532,8 @@ if(NOT UA_FORCE_CPP AND (CMAKE_COMPILER_IS_GNUCC OR "x${CMAKE_C_COMPILER_ID}" ST
     check_add_cc_flag("-Wundef")
     check_add_cc_flag("-fno-strict-aliasing") # fewer compiler assumptions about pointer types
     check_add_cc_flag("-fexceptions") # recommended for multi-threaded C code, also in combination with C++ code
+    check_add_cc_flag("-Wundef")
+    check_add_cc_flag("-Wno-error=unused-command-line-argument")
 
     if(UA_FORCE_32BIT)
       string(FIND "${CMAKE_C_FLAGS}" "-m32" m32_already_set)
@@ -578,18 +580,6 @@ if(NOT UA_FORCE_CPP AND (CMAKE_COMPILER_IS_GNUCC OR "x${CMAKE_C_COMPILER_ID}" ST
     # Linker
     set(CMAKE_SHARED_LIBRARY_LINK_C_FLAGS "") # cmake sets -rdynamic by default
 
-    # Debug
-    if(BUILD_TYPE_LOWER_CASE STREQUAL "debug" AND UNIX)
-        if("x${CMAKE_C_COMPILER_ID}" STREQUAL "xClang" AND NOT UA_ENABLE_UNIT_TESTS_MEMCHECK)
-            # Add default sanitizer settings when using clang and Debug build.
-            # This allows e.g. CLion to find memory locations for SegFaults
-            message(STATUS "Sanitizer enabled")
-            set(SANITIZER_FLAGS "-g -fno-omit-frame-pointer -gline-tables-only -fsanitize=address -fsanitize-address-use-after-scope -fsanitize-coverage=trace-pc-guard,trace-cmp -fsanitize=leak -fsanitize=undefined")
-            set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${SANITIZER_FLAGS}")
-            set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${SANITIZER_FLAGS}")
-        endif()
-    endif()
-
     if(UA_ENABLE_HARDENING AND ((CMAKE_BUILD_TYPE STREQUAL "Release") OR (CMAKE_BUILD_TYPE STREQUAL "RelWithDebInfo")))
         check_add_cc_flag("-D_FORTIFY_SOURCE=2") # run-time buffer overflow detection (needs at least -O1)
     endif()
@@ -631,8 +621,6 @@ if(APPLE)
 endif()
 
 if(MSVC)
-  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /W3 /WX /w44996") # Compiler warnings, error on warning
-
   if(UA_MSVC_FORCE_STATIC_CRT AND NOT BUILD_SHARED_LIBS)
     set(CompilerFlags CMAKE_CXX_FLAGS CMAKE_CXX_FLAGS_DEBUG CMAKE_CXX_FLAGS_RELEASE CMAKE_C_FLAGS
         CMAKE_C_FLAGS_DEBUG CMAKE_C_FLAGS_RELEASE)
@@ -1128,10 +1116,10 @@ if(UA_ENABLE_AMALGAMATION)
     target_include_directories(open62541-object PRIVATE ${PROJECT_BINARY_DIR})
     target_include_directories(open62541-object PRIVATE "${ua_architecture_directories_to_include}")
     if(UA_ENABLE_ENCRYPTION_MBEDTLS)
-        target_include_directories(open62541-object PRIVATE ${MBEDTLS_INCLUDE_DIRS})
+        target_include_directories(open62541-object PRIVATE ${MbedTLS_INCLUDE_DIRS})
     endif()
     if(UA_ENABLE_ENCRYPTION_OPENSSL)
-        target_include_directories(open62541-object PRIVATE ${OPENSSL_INCLUDE_DIR})
+        target_include_directories(open62541-object PRIVATE ${OpenSSL_INCLUDE_DIR})
     endif()
 
     # make sure the open62541_amalgamation target builds before so that amalgamation is finished and it is not executed again for open62541-object
@@ -1213,10 +1201,13 @@ else()
     include_directories_private("${PROJECT_BINARY_DIR}")
 
     if(UA_ENABLE_ENCRYPTION_MBEDTLS)
-        include_directories_private(${MBEDTLS_INCLUDE_DIRS})
+        include_directories_private(${MbedTLS_INCLUDE_DIRS})
     endif()
     if(UA_ENABLE_ENCRYPTION_OPENSSL)
-        include_directories_private(${OPENSSL_INCLUDE_DIR})
+        include_directories_private(${OpenSSL_INCLUDE_DIR})
+    endif()
+    if(UA_ENABLE_WEBSOCKET_SERVER)
+        include_directories_private(${libwebsockets_INCLUDE_DIR})
     endif()
 
     # Option-specific includes
-- 
2.13.0.windows.1

