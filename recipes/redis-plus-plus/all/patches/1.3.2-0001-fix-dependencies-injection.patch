--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -30,8 +30,7 @@ if(REDIS_PLUS_PLUS_BUILD_ASYNC)
         message(STATUS "redis-plus-plus build async interface with libuv")
 
         # libuv dependency
-        find_path(REDIS_PLUS_PLUS_ASYNC_LIB_HEADER NAMES uv.h)
-        find_library(REDIS_PLUS_PLUS_ASYNC_LIB uv)
+        find_package(libuv REQUIRED CONFIG)
     else()
         message(FATAL_ERROR "invalid REDIS_PLUS_PLUS_BUILD_ASYNC")
     endif()
@@ -111,7 +110,6 @@ if(hiredis_FOUND)
     list(APPEND REDIS_PLUS_PLUS_HIREDIS_LIBS hiredis::hiredis)
 
     if(REDIS_PLUS_PLUS_USE_TLS)
-        find_package(hiredis_ssl REQUIRED)
         list(APPEND REDIS_PLUS_PLUS_HIREDIS_LIBS hiredis::hiredis_ssl)
     endif()
 else()
@@ -150,7 +148,7 @@ if(REDIS_PLUS_PLUS_BUILD_STATIC)
 
     if(REDIS_PLUS_PLUS_BUILD_ASYNC)
         target_include_directories(${STATIC_LIB} PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/${REDIS_PLUS_PLUS_ASYNC_FUTURE_HEADER}>)
-        target_include_directories(${STATIC_LIB} PUBLIC $<BUILD_INTERFACE:${REDIS_PLUS_PLUS_ASYNC_LIB_HEADER}>)
+        target_link_libraries(${STATIC_LIB} PUBLIC $<IF:$<TARGET_EXISTS:uv>,uv,uv_a>)
         if(REDIS_PLUS_PLUS_ASYNC_FUTURE STREQUAL "boost")
             target_include_directories(${STATIC_LIB} SYSTEM PUBLIC $<BUILD_INTERFACE:${Boost_INCLUDE_DIR}>)
         endif()
@@ -202,8 +200,7 @@ if(REDIS_PLUS_PLUS_BUILD_SHARED)
 
     if(REDIS_PLUS_PLUS_BUILD_ASYNC)
         target_include_directories(${SHARED_LIB} PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/${REDIS_PLUS_PLUS_ASYNC_FUTURE_HEADER}>)
-        target_include_directories(${SHARED_LIB} PUBLIC $<BUILD_INTERFACE:${REDIS_PLUS_PLUS_ASYNC_LIB_HEADER}>)
-        target_link_libraries(${SHARED_LIB} PUBLIC ${REDIS_PLUS_PLUS_ASYNC_LIB})
+        target_link_libraries(${SHARED_LIB} PUBLIC $<IF:$<TARGET_EXISTS:uv>,uv,uv_a>)
         if(REDIS_PLUS_PLUS_ASYNC_FUTURE STREQUAL "boost")
             target_include_directories(${SHARED_LIB} SYSTEM PUBLIC $<BUILD_INTERFACE:${Boost_INCLUDE_DIR}>)
         endif()
