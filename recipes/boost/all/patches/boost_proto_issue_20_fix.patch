From c0e9b4de19c465ab4cff52288b87d527b826cd22 Mon Sep 17 00:00:00 2001
From: dodheim <dodheim@gmail.com>
Date: Sun, 23 Aug 2015 20:43:54 -0700
Subject: [PATCH 1/2] This bug was fixed in VC++ 2013, workaround no longer
 applicable.

---
 boost/proto/expr.hpp     | 2 +-
 boost/proto/generate.hpp | 2 +-
 2 files changed, 2 insertions(+), 2 deletions(-)

diff --git a/boost/proto/expr.hpp b/boost/proto/expr.hpp
index 1bd64985..2c355c2b 100644
--- a/boost/proto/expr.hpp
+++ b/boost/proto/expr.hpp
@@ -92,7 +92,7 @@ namespace boost { namespace proto
 
         // Work-around for:
         // https://connect.microsoft.com/VisualStudio/feedback/details/765449/codegen-stack-corruption-using-runtime-checks-when-aggregate-initializing-struct
-    #if BOOST_WORKAROUND(BOOST_MSVC, BOOST_TESTED_AT(1700))
+    #if BOOST_WORKAROUND(BOOST_MSVC, < 1800)
         template<typename T, typename Expr, typename C, typename U>
         BOOST_FORCEINLINE
         Expr make_terminal(T &t, Expr *, proto::term<U C::*> *)
diff --git a/boost/proto/generate.hpp b/boost/proto/generate.hpp
index 47627411..3a600c48 100644
--- a/boost/proto/generate.hpp
+++ b/boost/proto/generate.hpp
@@ -230,7 +230,7 @@ namespace boost { namespace proto
 
         // Work-around for:
         // https://connect.microsoft.com/VisualStudio/feedback/details/765449/codegen-stack-corruption-using-runtime-checks-when-aggregate-initializing-struct
-    #if BOOST_WORKAROUND(BOOST_MSVC, BOOST_TESTED_AT(1700))
+    #if BOOST_WORKAROUND(BOOST_MSVC, < 1800)
         template<typename Class, typename Member>
         BOOST_FORCEINLINE
         Extends<expr<tag::terminal, proto::term<Member Class::*> > > operator ()(expr<tag::terminal, proto::term<Member Class::*> > const &e) const

From 01ffe9ed5f0f74162b36978857345d8e835c581c Mon Sep 17 00:00:00 2001
From: Nikita Kniazev <nok.raven@gmail.com>
Date: Fri, 18 Jan 2019 20:53:57 +0300
Subject: [PATCH 2/2] Suppress C4180 warning from extends operators

The warning is harmless and can be safely suppressed.
---
 boost/proto/extends.hpp   | 4 ++++
 boost/proto/proto_fwd.hpp | 2 ++
 2 files changed, 6 insertions(+)

diff --git a/boost/proto/extends.hpp b/boost/proto/extends.hpp
index 1fb04290..38217261 100644
--- a/boost/proto/extends.hpp
+++ b/boost/proto/extends.hpp
@@ -74,6 +74,7 @@ namespace boost { namespace proto
     ///
     #define BOOST_PROTO_DEFINE_FUN_OP_IMPL_(Z, N, DATA, Const)                                      \
         BOOST_PP_IF(N, BOOST_PROTO_TEMPLATE_YES_, BOOST_PROTO_TEMPLATE_NO_)(Z, N)                   \
+        BOOST_PROTO_DISABLE_MSVC_C4180                                                              \
         BOOST_PROTO_DISABLE_MSVC_C4714 BOOST_FORCEINLINE                                            \
         typename BOOST_PROTO_RESULT_OF<                                                             \
             proto_generator(                                                                        \
@@ -104,6 +105,7 @@ namespace boost { namespace proto
     ///
     #define BOOST_PROTO_DEFINE_FUN_OP_VARIADIC_IMPL_(Const)                                         \
         template<typename... A>                                                                     \
+        BOOST_PROTO_DISABLE_MSVC_C4180                                                              \
         BOOST_PROTO_DISABLE_MSVC_C4714 BOOST_FORCEINLINE                                            \
         typename BOOST_PROTO_RESULT_OF<                                                             \
             proto_generator(                                                                        \
@@ -258,6 +260,7 @@ namespace boost { namespace proto
         ///
     #define BOOST_PROTO_EXTENDS_ASSIGN_IMPL_(ThisConst, ThatConst)                                  \
         template<typename A>                                                                        \
+        BOOST_PROTO_DISABLE_MSVC_C4180                                                              \
         BOOST_PROTO_DISABLE_MSVC_C4714 BOOST_FORCEINLINE                                            \
         typename BOOST_PROTO_RESULT_OF<                                                             \
             proto_generator(                                                                        \
@@ -325,6 +328,7 @@ namespace boost { namespace proto
         ///
     #define BOOST_PROTO_EXTENDS_SUBSCRIPT_IMPL_(ThisConst, ThatConst)                               \
         template<typename A>                                                                        \
+        BOOST_PROTO_DISABLE_MSVC_C4180                                                              \
         BOOST_PROTO_DISABLE_MSVC_C4714 BOOST_FORCEINLINE                                            \
         typename BOOST_PROTO_RESULT_OF<                                                             \
             proto_generator(                                                                        \
diff --git a/boost/proto/proto_fwd.hpp b/boost/proto/proto_fwd.hpp
index 2078dfca..56ae7517 100644
--- a/boost/proto/proto_fwd.hpp
+++ b/boost/proto/proto_fwd.hpp
@@ -124,9 +124,11 @@
 #endif
 
 #if defined(_MSC_VER)
+# define BOOST_PROTO_DISABLE_MSVC_C4180 __pragma(warning(disable : 4180))  // qualifier applied to function type has no meaning; ignored
 # define BOOST_PROTO_DISABLE_MSVC_C4522 __pragma(warning(disable : 4522))  // 'class' : multiple assignment operators specified
 # define BOOST_PROTO_DISABLE_MSVC_C4714 __pragma(warning(disable : 4714))  // function 'xxx' marked as __forceinline not inlined
 #else
+# define BOOST_PROTO_DISABLE_MSVC_C4180
 # define BOOST_PROTO_DISABLE_MSVC_C4522 
 # define BOOST_PROTO_DISABLE_MSVC_C4714
 #endif
