cmake_minimum_required(VERSION 3.1)
project(test_package)

include("${CONAN_INSTALL_FOLDER}/conanbuildinfo.cmake")

conan_basic_setup()

if(NOT HEADER_ONLY)
    set(boost_components)
    if(WITH_COROUTINE)
        list(APPEND boost_components coroutine)
        list(APPEND boost_components thread)
    endif()
    if(WITH_PYTHON)
        find_package(PythonInterp REQUIRED)
        find_package(PythonLibs REQUIRED)
        list(APPEND boost_components "python${PYTHON_COMPONENT_SUFFIX}")

        list(APPEND boost_components "numpy${PYTHON_COMPONENT_SUFFIX}")
    endif()
    if(WITH_RANDOM)
        list(APPEND boost_components random)
    endif()
    if(WITH_REGEX)
        list(APPEND boost_components regex)
    endif()
    if(WITH_CHRONO)
        list(APPEND boost_components chrono)
    endif()

    find_package(Boost COMPONENTS ${boost_components} REQUIRED)

    include_directories(${Boost_INCLUDE_DIRS})

    if(WITH_RANDOM)
        add_executable(random_exe random.cpp)
        target_link_libraries(random_exe Boost::random)
    endif()
    if(WITH_REGEX)
        add_executable(regex_exe regex.cpp)
        target_link_libraries(regex_exe Boost::regex)
    endif()

    if(WITH_TEST)
        add_executable(test_exe test.cpp)
        target_link_libraries(test_exe Boost::unit_test_framework)
    endif()

    if(WITH_COROUTINE)
        add_executable(coroutine_exe coroutine.cpp)
        target_link_libraries(coroutine_exe Boost::coroutine)
    endif()

    if(WITH_CHRONO)
        add_executable(chrono_exe chrono.cpp)
        target_link_libraries(chrono_exe Boost::chrono)
    endif()

    if(WITH_PYTHON)
        add_library(hello_ext MODULE python.cpp)
        set_property(TARGET hello_ext PROPERTY PREFIX "")
        target_include_directories(hello_ext PRIVATE ${PYTHON_INCLUDE_DIRS})
        target_link_libraries(hello_ext Boost::python${PYTHON_COMPONENT_SUFFIX} ${PYTHON_LIBRARIES})
        if(WIN32)
            set_target_properties(hello_ext PROPERTIES SUFFIX ".pyd")
        endif()

        add_executable(numpy_exe numpy.cpp)
        target_include_directories(numpy_exe PRIVATE ${PYTHON_INCLUDE_DIRS})
        target_link_libraries(numpy_exe Boost::numpy${PYTHON_COMPONENT_SUFFIX} ${PYTHON_LIBRARIES})
    endif()
endif()

# Test header-only target
find_package(Boost REQUIRED)
add_executable(lambda_exe lambda.cpp)
target_link_libraries(lambda_exe Boost::boost)
