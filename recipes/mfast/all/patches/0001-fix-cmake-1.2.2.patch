--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -60,9 +60,11 @@ if(BUILD_PACKAGES)
 
 endif(BUILD_PACKAGES)
 
-find_package(Boost 1.56.0 REQUIRED)
-include_directories(${Boost_INCLUDE_DIR})
-include_directories(${CMAKE_CURRENT_SOURCE_DIR}/tinyxml2)
+find_package(Boost REQUIRED)
+find_package(tinyxml2 REQUIRED CONFIG)
+if(BUILD_SQLITE3)
+    find_package(SQLite3 REQUIRED)
+endif()
 include_directories ("${PROJECT_SOURCE_DIR}/src")
 
 add_definitions(-DSIZEOF_VOID_P=${CMAKE_SIZEOF_VOID_P})
@@ -73,7 +75,6 @@ set(MFAST_STATIC_LIBRARIES CACHE INTERNAL "")
 set(MFAST_DYNAMIC_COMPONENTS CACHE INTERNAL "")
 set(MFAST_STATIC_COMPONENTS CACHE INTERNAL "")
 
-set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)
 
 add_subdirectory (src)
 include(FastTypeGenTarget)
--- a/src/fast_type_gen/CMakeLists.txt
+++ b/src/fast_type_gen/CMakeLists.txt
@@ -1,5 +1,5 @@
 
-if (NOT CMAKE_CROSSCOMPILING)
+if (1)
   set(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR}/bin)
   add_executable (fast_type_gen
                   fast_type_gen.cpp
@@ -11,13 +11,14 @@ if (NOT CMAKE_CROSSCOMPILING)
   target_link_libraries (fast_type_gen
                          mfast_xml_parser_static
                          mfast_static
+                         Boost::headers
                          mfast_coder_static)
 
   set_target_properties(fast_type_gen PROPERTIES VERSION "${MFAST_VERSION}")
 
   install(TARGETS fast_type_gen
           EXPORT  mFASTTargets
-          RUNTIME DESTINATION "${INSTALL_BIN_DIR}" COMPONENT bin)
+          DESTINATION "${INSTALL_BIN_DIR}" COMPONENT bin)
   add_custom_target(install.fast_type_gen
                     COMMAND ${CMAKE_COMMAND} -DBUILD_TYPE=${CMAKE_BUILD_TYPE} -P ${CMAKE_CURRENT_BINARY_DIR}/cmake_install.cmake
                     DEPENDS fast_type_gen)
--- a/src/mfast/CMakeLists.txt
+++ b/src/mfast/CMakeLists.txt
@@ -11,6 +11,7 @@ set(mfast_SRCS  ${sources} ${instruction_sources} ${headers} ${instruction_heade
 
 add_library(mfast_static STATIC ${mfast_SRCS})
 target_include_directories(mfast_static PUBLIC $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/src>)
+target_link_libraries(mfast_static Boost::headers)
 
 if (UNIX)
   set_target_properties(mfast_static PROPERTIES OUTPUT_NAME mfast)
@@ -27,6 +28,7 @@ set(MFAST_STATIC_LIBRARIES ${MFAST_STATIC_LIBRARIES} mfast_static CACHE INTERNAL
 
 if (BUILD_SHARED_LIBS)
   add_library(mfast SHARED ${mfast_SRCS})
+  target_link_libraries(mfast Boost::headers)
 
   if (NOT "${CMAKE_VERSION}" VERSION_LESS "2.8.12")
     target_compile_definitions(mfast INTERFACE "-DMFAST_DYN_LINK")
@@ -42,6 +44,7 @@ if (BUILD_SHARED_LIBS)
   install(TARGETS mfast
           EXPORT  mFASTTargets
           RUNTIME DESTINATION "${INSTALL_BIN_DIR}" COMPONENT bin
+          ARCHIVE DESTINATION "${INSTALL_LIB_DIR}" COMPONENT lib
           LIBRARY DESTINATION "${INSTALL_LIB_DIR}" COMPONENT lib)
 
   set(MFAST_SHARED_LIBRARIES ${MFAST_SHARED_LIBRARIES} mfast CACHE INTERNAL "")
--- a/src/mfast/coder/CMakeLists.txt
+++ b/src/mfast/coder/CMakeLists.txt
@@ -18,7 +18,7 @@ SET(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/lib)
 set(mfast_coder_SRCS ${sources} ${headers})
 
 add_library(mfast_coder_static STATIC ${mfast_coder_SRCS})
-target_link_libraries(mfast_coder_static mfast_static)
+target_link_libraries(mfast_coder_static mfast_static Boost::headers)
 
 if (UNIX)
   set_target_properties(mfast_coder_static PROPERTIES OUTPUT_NAME mfast_coder)
@@ -44,7 +44,7 @@ if (BUILD_SHARED_LIBS)
   if (CMAKE_COMPILER_IS_GNUCXX OR ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang"))
     set_target_properties(mfast_coder PROPERTIES COMPILE_FLAGS -fvisibility=hidden)
   endif()
-  target_link_libraries(mfast_coder mfast)
+  target_link_libraries(mfast_coder mfast Boost::headers)
   set_target_properties(mfast_coder PROPERTIES
                         VERSION "${MFAST_VERSION}"
                         SOVERSION "${MFAST_SOVERSION}")
@@ -55,6 +55,7 @@ if (BUILD_SHARED_LIBS)
   install(TARGETS mfast_coder
           EXPORT  mFASTTargets
           RUNTIME DESTINATION "${INSTALL_BIN_DIR}" COMPONENT bin
+          ARCHIVE DESTINATION "${INSTALL_LIB_DIR}" COMPONENT lib
           LIBRARY DESTINATION "${INSTALL_LIB_DIR}" COMPONENT lib)
 
   set(MFAST_SHARED_LIBRARIES ${MFAST_SHARED_LIBRARIES} mfast_coder CACHE INTERNAL "")
--- a/src/mfast/json/CMakeLists.txt
+++ b/src/mfast/json/CMakeLists.txt
@@ -9,7 +9,7 @@ SET(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/lib)
 set(mfast_json_SRCS  ${sources} ${headers})
 
 add_library(mfast_json_static STATIC ${mfast_json_SRCS})
-target_link_libraries(mfast_json_static mfast_static)
+target_link_libraries(mfast_json_static mfast_static Boost::headers)
 
 if (UNIX)
   set_target_properties(mfast_json_static PROPERTIES OUTPUT_NAME mfast_json)
@@ -35,7 +35,7 @@ if (BUILD_SHARED_LIBS)
   if (CMAKE_COMPILER_IS_GNUCXX OR ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang"))
     set_target_properties(mfast_json PROPERTIES COMPILE_FLAGS -fvisibility=hidden)
   endif()
-  target_link_libraries(mfast_json mfast)
+  target_link_libraries(mfast_json mfast Boost::headers)
   set_target_properties(mfast_json PROPERTIES
                         VERSION "${MFAST_VERSION}"
                         SOVERSION "${MFAST_SOVERSION}")
@@ -46,6 +46,7 @@ if (BUILD_SHARED_LIBS)
   install(TARGETS mfast_json
           EXPORT  mFASTTargets
           RUNTIME DESTINATION "${INSTALL_BIN_DIR}" COMPONENT bin
+          ARCHIVE DESTINATION "${INSTALL_LIB_DIR}" COMPONENT lib
           LIBRARY DESTINATION "${INSTALL_LIB_DIR}" COMPONENT lib)
 
   set(MFAST_SHARED_LIBRARIES ${MFAST_SHARED_LIBRARIES} mfast_json CACHE INTERNAL "")
--- a/src/mfast/sqlite3/CMakeLists.txt
+++ b/src/mfast/sqlite3/CMakeLists.txt
@@ -6,7 +6,7 @@ SET(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/lib)
 set(mfast_sqlite3_SRCS  ${sources} ${headers})
 
 add_library(mfast_sqlite3_static STATIC ${mfast_sqlite3_SRCS})
-target_link_libraries(mfast_sqlite3_static mfast_static)
+target_link_libraries(mfast_sqlite3_static mfast_static Boost::headers SQLite::SQLite3)
 
 if (UNIX)
   set_target_properties(mfast_sqlite3_static PROPERTIES OUTPUT_NAME mfast_sqlite3)
@@ -33,7 +33,7 @@ if (BUILD_SHARED_LIBS)
   if (CMAKE_COMPILER_IS_GNUCXX OR ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang"))
     set_target_properties(mfast_sqlite3 PROPERTIES COMPILE_FLAGS -fvisibility=hidden)
   endif()
-  target_link_libraries(mfast_sqlite3 mfast sqlite3)
+  target_link_libraries(mfast_sqlite3 mfast Boost::headers SQLite::SQLite3)
   set_target_properties(mfast_sqlite3 PROPERTIES
                         VERSION "${MFAST_VERSION}"
                         SOVERSION "${MFAST_SOVERSION}")
@@ -44,6 +44,7 @@ if (BUILD_SHARED_LIBS)
   install(TARGETS mfast_sqlite3
           EXPORT  mFASTTargets
           RUNTIME DESTINATION "${INSTALL_BIN_DIR}" COMPONENT bin
+          ARCHIVE DESTINATION "${INSTALL_LIB_DIR}" COMPONENT lib
           LIBRARY DESTINATION "${INSTALL_LIB_DIR}" COMPONENT lib
           OPTIONAL)
 
--- a/src/mfast/xml_parser/CMakeLists.txt
+++ b/src/mfast/xml_parser/CMakeLists.txt
@@ -6,12 +6,11 @@ file (GLOB_RECURSE sources "*.cpp")     ## retrieve all source files in current
 
 set(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/lib)
 
-include_directories("${CMAKE_SOURCE_DIR}/tinyxml2")
 
-set(mfast_xml_parser_SRCS ${CMAKE_CURRENT_SOURCE_DIR}/../../../tinyxml2/tinyxml2.cpp ${sources} ${headers})
+set(mfast_xml_parser_SRCS ${sources} ${headers})
 
 add_library(mfast_xml_parser_static STATIC ${mfast_xml_parser_SRCS})
-target_link_libraries(mfast_xml_parser_static mfast_static)
+target_link_libraries(mfast_xml_parser_static mfast_static Boost::headers tinyxml2::tinyxml2)
 
 if (UNIX)
   set_target_properties(mfast_xml_parser_static PROPERTIES OUTPUT_NAME mfast_xml_parser)
@@ -39,7 +38,7 @@ if (BUILD_SHARED_LIBS)
     set_target_properties(mfast_xml_parser PROPERTIES COMPILE_FLAGS -fvisibility=hidden)
   endif()
 
-  target_link_libraries(mfast_xml_parser mfast)
+  target_link_libraries(mfast_xml_parser mfast Boost::headers tinyxml2::tinyxml2)
   set_target_properties(mfast_xml_parser PROPERTIES
                         LINKER_LANGUAGE CXX
                         VERSION "${MFAST_VERSION}"
@@ -51,6 +50,7 @@ if (BUILD_SHARED_LIBS)
   install(TARGETS mfast_xml_parser
           EXPORT  mFASTTargets
           RUNTIME DESTINATION "${INSTALL_BIN_DIR}" COMPONENT bin
+          ARCHIVE DESTINATION "${INSTALL_LIB_DIR}" COMPONENT lib
           LIBRARY DESTINATION "${INSTALL_LIB_DIR}" COMPONENT lib)
 
   set(MFAST_SHARED_LIBRARIES ${MFAST_SHARED_LIBRARIES} mfast_xml_parser CACHE INTERNAL "")
