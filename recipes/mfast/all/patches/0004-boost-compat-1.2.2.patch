From 2101ef95569bfdde067aa9bfddc2305a48d5e321 Mon Sep 17 00:00:00 2001
From: Sergey Kovalevich <inndie@gmail.com>
Date: Fri, 18 Mar 2022 00:30:57 +0300
Subject: [PATCH] fixed issue #118

---
 src/mfast/decimal_ref.h   | 4 ++--
 src/mfast/field_visitor.h | 8 ++++----
 2 files changed, 6 insertions(+), 6 deletions(-)

diff --git a/src/mfast/decimal_ref.h b/src/mfast/decimal_ref.h
index 68d3971a..80268ed6 100644
--- a/src/mfast/decimal_ref.h
+++ b/src/mfast/decimal_ref.h
@@ -41,7 +41,7 @@ typedef boost::multiprecision::number<decimal_backend> decimal;
 
 inline decimal make_decimal(int64_t mantissa, int16_t exponent) {
   decimal r(mantissa);
-  r *= decimal_backend(1.0, exponent);
+  r *= decimal(decimal_backend(1.0, exponent));
   return r;
 }
 
@@ -119,7 +119,7 @@ class decimal_cref : public field_cref {
 
   decimal value() const {
     decimal r(mantissa());
-    r *= decimal_backend(1.0, exponent());
+    r *= decimal(decimal_backend(1.0, exponent()));
     return r;
   }
 
diff --git a/src/mfast/field_visitor.h b/src/mfast/field_visitor.h
index 3aa8a5de..771e08d2 100644
--- a/src/mfast/field_visitor.h
+++ b/src/mfast/field_visitor.h
@@ -44,7 +44,7 @@ template <> struct result_holder<void> {
 
 template <class FieldAccessor,
           class Result = decltype(
-              static_cast<FieldAccessor *>(nullptr)->visit(int32_cref()))>
+              std::declval<FieldAccessor *>()->visit(int32_cref()))>
 class field_accessor_adaptor : public field_instruction_visitor,
                                private result_holder<Result> {
   FieldAccessor &accssor_;
@@ -157,7 +157,7 @@ class field_accessor_adaptor : public field_instruction_visitor,
 
 template <class FieldMutator,
           class Result = decltype(
-              static_cast<FieldMutator *>(nullptr)->visit(int32_mref()))>
+              std::declval<FieldMutator *>()->visit(int32_mref()))>
 class field_mutator_adaptor : public field_instruction_visitor,
                               private result_holder<Result> {
   allocator *alloc_;
@@ -291,7 +291,7 @@ inline void field_mref::accept_mutator(FieldMutator &mutator) const {
 }
 
 template <typename T>
-inline decltype(static_cast<T *>(nullptr)->visit(int32_cref()))
+inline decltype(std::declval<T *>()->visit(int32_cref()))
 apply_accessor(T &accessor, field_cref v) {
   detail::field_accessor_adaptor<T> adaptor(accessor);
   v.instruction()->accept(adaptor, const_cast<mfast::value_storage *>(
@@ -300,7 +300,7 @@ apply_accessor(T &accessor, field_cref v) {
 }
 
 template <typename T>
-inline decltype(static_cast<T *>(nullptr)->visit(int32_mref()))
+inline decltype(std::declval<T *>()->visit(int32_mref()))
 apply_mutator(T &mutator, field_mref v) {
   detail::field_mutator_adaptor<T> adaptor(mutator, v.allocator());
   v.instruction()->accept(adaptor, field_mref_core_access::storage_of(v));
