--- a/src/SphericalEngine.cpp
+++ b/src/SphericalEngine.cpp
@@ -134,6 +134,8 @@
 #include <GeographicLib/CircularEngine.hpp>
 #include <GeographicLib/Utility.hpp>
 
+#include <ios>
+
 #if defined(_MSC_VER)
 // Squelch warnings about constant conditional expressions and potentially
 // uninitialized local variables
@@ -409,22 +411,22 @@ namespace GeographicLib {
                 SphericalEngine::coeff::Csize(N0, M )) * sizeof(double);
     if (N == N0) {
       Utility::readarray<double, real, false>(stream, C);
-      if (skip) stream.seekg(std::ios::streamoff(skip), ios::cur);
+      if (skip) stream.seekg(streamoff(skip), ios::cur);
       Utility::readarray<double, real, false>(stream, S);
-      if (skip) stream.seekg(std::ios::streamoff(skip), ios::cur);
+      if (skip) stream.seekg(streamoff(skip), ios::cur);
     } else {
       for (int m = 0, k = 0; m <= M; ++m) {
         Utility::readarray<double, real, false>(stream, &C[k], N + 1 - m);
         stream.seekg((N0 - N) * sizeof(double), ios::cur);
         k += N + 1 - m;
       }
-      if (skip) stream.seekg(std::ios::streamoff(skip), ios::cur);
+      if (skip) stream.seekg(streamoff(skip), ios::cur);
       for (int m = 1, k = 0; m <= M; ++m) {
         Utility::readarray<double, real, false>(stream, &S[k], N + 1 - m);
         stream.seekg((N0 - N) * sizeof(double), ios::cur);
         k += N + 1 - m;
       }
-      if (skip) stream.seekg(std::ios::streamoff(skip), ios::cur);
+      if (skip) stream.seekg(streamoff(skip), ios::cur);
     }
     return;
   }
