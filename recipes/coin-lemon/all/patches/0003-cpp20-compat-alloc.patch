--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -1,4 +1,4 @@
-CMAKE_MINIMUM_REQUIRED(VERSION 2.8)
+CMAKE_MINIMUM_REQUIRED(VERSION 3.8)
 
 CMAKE_POLICY(SET CMP0048 OLD)
 
--- a/lemon/CMakeLists.txt
+++ b/lemon/CMakeLists.txt
@@ -55,6 +55,7 @@ IF(LEMON_HAVE_SOPLEX)
 ENDIF()
 
 ADD_LIBRARY(lemon ${LEMON_SOURCES})
+target_compile_features(lemon PUBLIC cxx_std_11)
 
 TARGET_LINK_LIBRARIES(lemon
   ${GLPK_LIBRARIES} ${COIN_LIBRARIES} ${ILOG_LIBRARIES} ${SOPLEX_LIBRARIES}
--- a/lemon/bits/array_map.h
+++ b/lemon/bits/array_map.h
@@ -88,7 +88,7 @@ namespace lemon {
       Item it;
       for (nf->first(it); it != INVALID; nf->next(it)) {
         int id = nf->id(it);;
-        allocator.construct(&(values[id]), Value());
+        std::allocator_traits<Allocator>::construct(allocator, &(values[id]), Value());
       }
     }
 
@@ -102,7 +102,7 @@ namespace lemon {
       Item it;
       for (nf->first(it); it != INVALID; nf->next(it)) {
         int id = nf->id(it);;
-        allocator.construct(&(values[id]), value);
+        std::allocator_traits<Allocator>::construct(allocator, &(values[id]), value);
       }
     }
 
@@ -121,7 +121,7 @@ namespace lemon {
       Item it;
       for (nf->first(it); it != INVALID; nf->next(it)) {
         int id = nf->id(it);;
-        allocator.construct(&(values[id]), copy.values[id]);
+        std::allocator_traits<Allocator>::construct(allocator, &(values[id]), copy.values[id]);
       }
     }
 
@@ -218,15 +218,15 @@ namespace lemon {
         for (nf->first(it); it != INVALID; nf->next(it)) {
           int jd = nf->id(it);;
           if (id != jd) {
-            allocator.construct(&(new_values[jd]), values[jd]);
-            allocator.destroy(&(values[jd]));
+            std::allocator_traits<Allocator>::construct(allocator, &(new_values[jd]), values[jd]);
+            std::allocator_traits<Allocator>::destroy(allocator, &(values[jd]));
           }
         }
         if (capacity != 0) allocator.deallocate(values, capacity);
         values = new_values;
         capacity = new_capacity;
       }
-      allocator.construct(&(values[id]), Value());
+      std::allocator_traits<Allocator>::construct(allocator, &(values[id]), Value());
     }
 
     // \brief Adds more new keys to the map.
@@ -260,8 +260,8 @@ namespace lemon {
             }
           }
           if (found) continue;
-          allocator.construct(&(new_values[id]), values[id]);
-          allocator.destroy(&(values[id]));
+          std::allocator_traits<Allocator>::construct(allocator, &(new_values[id]), values[id]);
+          std::allocator_traits<Allocator>::destroy(allocator, &(values[id]));
         }
         if (capacity != 0) allocator.deallocate(values, capacity);
         values = new_values;
@@ -269,7 +269,7 @@ namespace lemon {
       }
       for (int i = 0; i < int(keys.size()); ++i) {
         int id = nf->id(keys[i]);
-        allocator.construct(&(values[id]), Value());
+        std::allocator_traits<Allocator>::construct(allocator, &(values[id]), Value());
       }
     }
 
@@ -279,7 +279,7 @@ namespace lemon {
     // and it overrides the erase() member function of the observer base.
     virtual void erase(const Key& key) {
       int id = Parent::notifier()->id(key);
-      allocator.destroy(&(values[id]));
+      std::allocator_traits<Allocator>::destroy(allocator, &(values[id]));
     }
 
     // \brief Erase more keys from the map.
@@ -289,7 +289,7 @@ namespace lemon {
     virtual void erase(const std::vector<Key>& keys) {
       for (int i = 0; i < int(keys.size()); ++i) {
         int id = Parent::notifier()->id(keys[i]);
-        allocator.destroy(&(values[id]));
+        std::allocator_traits<Allocator>::destroy(allocator, &(values[id]));
       }
     }
 
@@ -303,7 +303,7 @@ namespace lemon {
       Item it;
       for (nf->first(it); it != INVALID; nf->next(it)) {
         int id = nf->id(it);;
-        allocator.construct(&(values[id]), Value());
+        std::allocator_traits<Allocator>::construct(allocator, &(values[id]), Value());
       }
     }
 
@@ -317,7 +317,7 @@ namespace lemon {
         Item it;
         for (nf->first(it); it != INVALID; nf->next(it)) {
           int id = nf->id(it);
-          allocator.destroy(&(values[id]));
+          std::allocator_traits<Allocator>::destroy(allocator, &(values[id]));
         }
         allocator.deallocate(values, capacity);
         capacity = 0;
--- a/lemon/path.h
+++ b/lemon/path.h
@@ -582,7 +582,7 @@ namespace lemon {
     void clear() {
       while (first != 0) {
         last = first->next;
-        alloc.destroy(first);
+        std::allocator_traits<std::allocator<Node>>::destroy(alloc, first);
         alloc.deallocate(first, 1);
         first = last;
       }
@@ -596,7 +596,7 @@ namespace lemon {
     /// \brief Add a new arc before the current path
     void addFront(const Arc& arc) {
       Node *node = alloc.allocate(1);
-      alloc.construct(node, Node());
+      std::allocator_traits<std::allocator<Node>>::construct(alloc, node, Node());
       node->prev = 0;
       node->next = first;
       node->arc = arc;
@@ -617,7 +617,7 @@ namespace lemon {
       } else {
         last = 0;
       }
-      alloc.destroy(node);
+      std::allocator_traits<std::allocator<Node>>::destroy(alloc, node);
       alloc.deallocate(node, 1);
     }
 
@@ -629,7 +629,7 @@ namespace lemon {
     /// \brief Add a new arc behind the current path.
     void addBack(const Arc& arc) {
       Node *node = alloc.allocate(1);
-      alloc.construct(node, Node());
+      std::allocator_traits<std::allocator<Node>>::construct(alloc, node, Node());
       node->next = 0;
       node->prev = last;
       node->arc = arc;
@@ -650,7 +650,7 @@ namespace lemon {
       } else {
         first = 0;
       }
-      alloc.destroy(node);
+      std::allocator_traits<std::allocator<Node>>::destroy(alloc, node);
       alloc.deallocate(node, 1);
     }
 
