--- a/cmake/PocoMacros.cmake
+++ b/cmake/PocoMacros.cmake
@@ -265,7 +265,7 @@
 
 if (MSVC)
 # install the targets pdb
-  POCO_INSTALL_PDB(${target_name})
+  # POCO_INSTALL_PDB(${target_name})
 endif()
   
 endmacro()
--- a/Crypto/CMakeLists.txt
+++ b/Crypto/CMakeLists.txt
@@ -20,7 +20,7 @@
     DEFINE_SYMBOL Crypto_EXPORTS
     )
 
-target_link_libraries( "${LIBNAME}" Foundation ${OPENSSL_LIBRARIES} )
+target_link_libraries( "${LIBNAME}" Foundation OpenSSL::SSL OpenSSL::Crypto)
 target_include_directories( "${LIBNAME}"
     PUBLIC
         $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
--- a/Data/SQLite/CMakeLists.txt
+++ b/Data/SQLite/CMakeLists.txt
@@ -10,9 +10,9 @@
 POCO_HEADERS_AUTO( SQLITE_SRCS ${HDRS_G})
 
 if (POCO_UNBUNDLED)
-    find_package(SQLite3)
-    set(DATASQLITELIBS ${SQLITE3_LIBRARIES})
-    include_directories("${SQLITE3_INCLUDE_DIRS}")
+    find_package(SQLite3 REQUIRED)
+    set(DATASQLITELIBS SQLite::SQLite3)
+    #include_directories(${SQLite3_INCLUDE_DIRS})
 else()
     # sqlite3
     POCO_SOURCES( SQLITE_SRCS sqlite3
--- a/Foundation/CMakeLists.txt
+++ b/Foundation/CMakeLists.txt
@@ -32,9 +32,8 @@ POCO_MESSAGES( SRCS Logging src/pocomsg.mc)
 # If POCO_UNBUNDLED is enabled we try to find the required packages
 # The configuration will fail if the packages are not found
 if (POCO_UNBUNDLED)
-	find_package(PCRE REQUIRED)
-	set(SYSLIBS ${SYSLIBS} ${PCRE_LIBRARIES})
-	include_directories(${PCRE_INCLUDE_DIRS})
+	find_package(pcre REQUIRED CONFIG)
+	set(SYSLIBS ${SYSLIBS} pcre::libpcre)
 
 	#HACK: Unicode.cpp requires functions from these files. The can't be taken from the library
 	POCO_SOURCES( SRCS RegExp
@@ -106,7 +105,6 @@ if(ANDROID)
 endif(ANDROID)
 
 # TODO: Why is this here?
-add_definitions( -DPCRE_STATIC)
 
 # For SetAffinity
 if(UNIX AND NOT APPLE)
--- a/NetSSL_Win/CMakeLists.txt
+++ b/NetSSL_Win/CMakeLists.txt
@@ -18,7 +18,7 @@
     DEFINE_SYMBOL NetSSL_Win_EXPORTS
     )
 
-target_link_libraries( "${LIBNAME}" Net Util Foundation Crypt32.lib )
+target_link_libraries( "${LIBNAME}" Net Util Foundation Crypt32.lib ws2_32  )
 target_include_directories( "${LIBNAME}"
     PUBLIC
         $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
