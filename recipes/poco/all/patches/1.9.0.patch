--- cmake/PocoMacros.cmake
+++ cmake/PocoMacros.cmake
@@ -265,7 +265,7 @@
 
 if (MSVC)
 # install the targets pdb
-  POCO_INSTALL_PDB(${target_name})
+  # POCO_INSTALL_PDB(${target_name})
 endif()
 
 endmacro()
--- CMakeLists.txt
+++ CMakeLists.txt
@@ -211,7 +211,7 @@
 
 find_package(OpenSSL)
 if(OPENSSL_FOUND)
-    include_directories("${OPENSSL_INCLUDE_DIR}")
+    include_directories("${OpenSSL_INCLUDE_DIR}")
     if(EXISTS ${PROJECT_SOURCE_DIR}/NetSSL_OpenSSL AND ENABLE_NETSSL)
     add_subdirectory(NetSSL_OpenSSL)
     list(APPEND Poco_COMPONENTS "NetSSL_OpenSSL")
--- Crypto/CMakeLists.txt
+++ Crypto/CMakeLists.txt
@@ -20,7 +20,7 @@
     DEFINE_SYMBOL Crypto_EXPORTS
     )
 
-target_link_libraries( "${LIBNAME}" Foundation ${OPENSSL_LIBRARIES} )
+target_link_libraries( "${LIBNAME}" Foundation OpenSSL::OpenSSL )
 target_include_directories( "${LIBNAME}"
     PUBLIC
         $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
--- Data/SQLite/CMakeLists.txt
+++ Data/SQLite/CMakeLists.txt
@@ -10,9 +10,9 @@
 POCO_HEADERS_AUTO( SQLITE_SRCS ${HDRS_G})
 
 if (POCO_UNBUNDLED)
-    find_package(SQLite3)
-    set(DATASQLITELIBS ${SQLITE3_LIBRARIES})
-    include_directories("${SQLITE3_INCLUDE_DIRS}")
+    find_package(sqlite3 REQUIRED)
+    set(DATASQLITELIBS sqlite3::sqlite3)
+    include_directories("${sqlite3_INCLUDE_DIRS}")
 else()
     # sqlite3
     POCO_SOURCES( SQLITE_SRCS sqlite3
--- Foundation/CMakeLists.txt
+++ Foundation/CMakeLists.txt
@@ -32,8 +32,8 @@
 # If POCO_UNBUNDLED is enabled we try to find the required packages
 # The configuration will fail if the packages are not found
 if (POCO_UNBUNDLED)
-	find_package(PCRE REQUIRED)
-	set(SYSLIBS ${SYSLIBS} ${PCRE_LIBRARIES})
+	find_package(pcre REQUIRED)
+	set(SYSLIBS ${SYSLIBS} pcre::pcre)
 	include_directories(${PCRE_INCLUDE_DIRS})
 
 	#HACK: Unicode.cpp requires functions from these files. The can't be taken from the library
--- NetSSL_Win/CMakeLists.txt
+++ NetSSL_Win/CMakeLists.txt
@@ -18,7 +18,7 @@
     DEFINE_SYMBOL NetSSL_Win_EXPORTS
     )
 
-target_link_libraries( "${LIBNAME}" Net Util Foundation Crypt32.lib )
+target_link_libraries( "${LIBNAME}" Net Util Foundation Crypt32.lib ws2_32  )
 target_include_directories( "${LIBNAME}"
     PUBLIC
         $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
