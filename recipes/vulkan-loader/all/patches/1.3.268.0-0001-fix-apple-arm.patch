diff --git a/CMakeLists.txt b/CMakeLists.txt
index 273c09f31..b06b7e73a 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -99,7 +99,13 @@ if(WIN32)
 elseif(ANDROID)
     message(FATAL_ERROR "Android build not supported!")
 elseif(APPLE)
-    target_compile_definitions(platform_wsi INTERFACE VK_USE_PLATFORM_MACOS_MVK VK_USE_PLATFORM_METAL_EXT)
+    target_compile_definitions(platform_wsi INTERFACE VK_USE_PLATFORM_METAL_EXT)
+    if (IOS)
+        target_compile_definitions(platform_wsi INTERFACE VK_USE_PLATFORM_IOS_MVK)
+    endif()
+    if (CMAKE_SYSTEM_NAME STREQUAL "Darwin")
+        target_compile_definitions(platform_wsi INTERFACE VK_USE_PLATFORM_MACOS_MVK)
+    endif()
 elseif(UNIX AND NOT APPLE) # i.e.: Linux
     option(BUILD_WSI_XCB_SUPPORT "Build XCB WSI support" ON)
     option(BUILD_WSI_XLIB_SUPPORT "Build Xlib WSI support" ON)
@@ -149,12 +155,6 @@ set(LOADER_STANDARD_CXX_PROPERTIES CXX_STANDARD 17 CXX_STANDARD_REQUIRED YES CXX
 
 set(TESTS_STANDARD_CXX_PROPERTIES ${LOADER_STANDARD_CXX_PROPERTIES} MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>DLL")
 
-# Build for iOS and tvOS
-option(APPLE_EMBEDDED "Apple non desktop devices" OFF)
-if (APPLE_EMBEDDED)
-    add_definitions(-D__APPLE_EMBEDDED__)
-endif()
-
 # Force the use of the multithreaded, static version of the C runtime.
 set(CMAKE_MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
 
diff --git a/loader/CMakeLists.txt b/loader/CMakeLists.txt
index c6366eef5..c1e8c3477 100644
--- a/loader/CMakeLists.txt
+++ b/loader/CMakeLists.txt
@@ -201,6 +201,21 @@ end
         message(WARNING "Could not find working MASM assembler\n${ASM_FAILURE_MSG}")
     endif()
 elseif(UNIX) # i.e.: Linux & Apple
+
+    # This is hacky but works for now to get iOS/tvOS working.
+    # The problem is CMAKE_SYSTEM_PROCESSOR is empty when compiling for these platforms.
+    # This is likely due to the fact that CMAKE_OSX_ARCHITECTURES lets you compile for
+    # multiple archs at the same time.
+    #
+    # EX:
+    #  -D CMAKE_OSX_ARCHITECTURES="x86_64;arm64"
+    if (APPLE AND CMAKE_CROSSCOMPILING)
+        set(CMAKE_SYSTEM_PROCESSOR "${CMAKE_OSX_ARCHITECTURES}")
+    endif()
+    if ("${CMAKE_OSX_ARCHITECTURES}" MATCHES ";")
+        message(FATAL_ERROR "Cannot handle multiple archs ( ${CMAKE_OSX_ARCHITECTURES} ) at the same time!")
+    endif()
+
     option(USE_GAS "Use GAS" ON)
     if(USE_GAS)
         enable_language(ASM)
@@ -208,12 +223,12 @@ elseif(UNIX) # i.e.: Linux & Apple
         set(CMAKE_ASM_FLAGS "${CMAKE_C_FLAGS}")
         set(CMAKE_TRY_COMPILE_TARGET_TYPE STATIC_LIBRARY)
 
-        if (${CMAKE_SYSTEM_PROCESSOR} STREQUAL "aarch64" OR ${CMAKE_SYSTEM_PROCESSOR} STREQUAL "arm64")
+        if (${CMAKE_SYSTEM_PROCESSOR} MATCHES "aarch64|arm64")
             try_compile(ASSEMBLER_WORKS ${CMAKE_CURRENT_BINARY_DIR} ${CMAKE_CURRENT_SOURCE_DIR}/asm_test_aarch64.S)
             if(ASSEMBLER_WORKS)
                 set(OPT_LOADER_SRCS ${OPT_LOADER_SRCS} unknown_ext_chain_gas_aarch64.S)
             endif()
-        elseif(${CMAKE_SYSTEM_PROCESSOR} STREQUAL "x86_64" OR ${CMAKE_SYSTEM_PROCESSOR} STREQUAL "amd64" OR ${CMAKE_SYSTEM_PROCESSOR} STREQUAL "x86" OR ${CMAKE_SYSTEM_PROCESSOR} MATCHES "^i.86$")
+        elseif(${CMAKE_SYSTEM_PROCESSOR} MATCHES "x86_64|amd64|x86|^i.86$")
             check_include_file("cet.h" HAVE_CET_H)
             if(HAVE_CET_H)
                 target_compile_definitions(loader_specific_options INTERFACE HAVE_CET_H)
diff --git a/loader/vk_loader_platform.h b/loader/vk_loader_platform.h
index 3a8cafb7e..08e2d301b 100644
--- a/loader/vk_loader_platform.h
+++ b/loader/vk_loader_platform.h
@@ -275,13 +275,16 @@ static inline char *loader_platform_executable_path(char *buffer, size_t size) {
     return buffer;
 }
 #elif defined(__APPLE__)
-#if defined(__APPLE_EMBEDDED__)
+#include <TargetConditionals.h>
+// TARGET_OS_IPHONE isn't just iOS it's also iOS/tvOS/watchOS. See TargetConditionals.h documentation.
+#if TARGET_OS_IPHONE
 static inline char *loader_platform_executable_path(char *buffer, size_t size) {
     (void)size;
     buffer[0] = '\0';
     return buffer;
 }
-#else
+#endif
+#if TARGET_OS_OSX
 #include <libproc.h>
 static inline char *loader_platform_executable_path(char *buffer, size_t size) {
     pid_t pid = getpid();
diff --git a/loader/wsi.c b/loader/wsi.c
index 8c86733c5..bd9604a02 100644
--- a/loader/wsi.c
+++ b/loader/wsi.c
@@ -1308,6 +1308,33 @@ out:
     return vkRes;
 }
 
+// Ensure we are properly setting VK_USE_PLATFORM_METAL_EXT, VK_USE_PLATFORM_IOS_MVK, and VK_USE_PLATFORM_MACOS_MVK.
+#if __APPLE__
+
+#ifndef VK_USE_PLATFORM_METAL_EXT
+#error "VK_USE_PLATFORM_METAL_EXT not defined!"
+#endif
+
+#include <TargetConditionals.h>
+
+#if TARGET_OS_IOS
+
+#ifndef VK_USE_PLATFORM_IOS_MVK
+#error "VK_USE_PLATFORM_IOS_MVK not defined!"
+#endif
+
+#endif  //  TARGET_OS_IOS
+
+#if TARGET_OS_OSX
+
+#ifndef VK_USE_PLATFORM_MACOS_MVK
+#error "VK_USE_PLATFORM_MACOS_MVK not defined!"
+#endif
+
+#endif  // TARGET_OS_OSX
+
+#endif  // __APPLE__
+
 #if defined(VK_USE_PLATFORM_MACOS_MVK)
 
 // Functions for the VK_MVK_macos_surface extension:
diff --git a/scripts/parse_asm_values.py b/scripts/parse_asm_values.py
index e6ae90f5f..87d669326 100644
--- a/scripts/parse_asm_values.py
+++ b/scripts/parse_asm_values.py
@@ -72,7 +72,7 @@ with open(destination_file, "w", encoding="utf-8") as dest:
         # let the assembler know which platform to use
         if arch == "x86_64":
             dest.write(".set X86_64, 1\n")
-        elif arch == "aarch64":
+        elif arch == "aarch64" or arch == "arm64":
             dest.write(".set AARCH_64, 1\n")
         # Nothing to write in the x86 case
 
