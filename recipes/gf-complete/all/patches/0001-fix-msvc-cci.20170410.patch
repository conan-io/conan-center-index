--- a/src/Makefile.am
+++ b/src/Makefile.am
@@ -11,13 +11,13 @@ AM_CPPFLAGS = -I$(top_builddir)/include -I$(top_srcdir)/include
 # with SIMD_FLAGS, this static library will get linked into gf_complete.so
 noinst_LTLIBRARIES = libgf_util.la
 libgf_util_la_SOURCES = gf_method.c
-libgf_util_la_CFLAGS = -O3 -fPIC -Wsign-compare
+libgf_util_la_CFLAGS = -O3 -fPIC
 
 # we narrowly use SIMD_FLAGS for code that needs it
 lib_LTLIBRARIES = libgf_complete.la
 libgf_complete_la_SOURCES = gf.c gf_wgen.c gf_w4.c gf_w8.c gf_w16.c gf_w32.c \
           gf_w64.c gf_w128.c gf_rand.c gf_general.c gf_cpu.c
-libgf_complete_la_CFLAGS = -O3 $(SIMD_FLAGS) -fPIC -Wsign-compare
+libgf_complete_la_CFLAGS = -O3 $(SIMD_FLAGS) -fPIC
 libgf_complete_la_LIBADD = libgf_util.la
 
 if HAVE_NEON
--- a/src/gf.c
+++ b/src/gf.c
@@ -13,6 +13,10 @@
 #include <stdlib.h>
 #include <assert.h>
 #include "gf_cpu.h"
+#ifdef _MSC_VER
+#include <string.h>
+#define bzero(s, n) {memset(s, 0, n);}
+#endif
 
 int _gf_errno = GF_E_DEFAULT;
 
--- a/src/gf_w16.c
+++ b/src/gf_w16.c
@@ -13,6 +13,10 @@
 #include <stdlib.h>
 #include "gf_w16.h"
 #include "gf_cpu.h"
+#ifdef _MSC_VER
+#include <string.h>
+#define bzero(s, n) {memset(s, 0, n);}
+#endif
 
 #define AB2(ip, am1 ,am2, b, t1, t2) {\
   t1 = (b << 1) & am1;\
--- a/src/gf_w4.c
+++ b/src/gf_w4.c
@@ -13,6 +13,10 @@
 #include <stdlib.h>
 #include "gf_w4.h"
 #include "gf_cpu.h"
+#ifdef _MSC_VER
+#include <string.h>
+#define bzero(s, n) {memset(s, 0, n);}
+#endif
 
 #define AB2(ip, am1 ,am2, b, t1, t2) {\
   t1 = (b << 1) & am1;\
--- a/src/gf_w8.c
+++ b/src/gf_w8.c
@@ -14,6 +14,10 @@
 #include <stdlib.h>
 #include <assert.h>
 #include "gf_cpu.h"
+#ifdef _MSC_VER
+#include <string.h>
+#define bzero(s, n) {memset(s, 0, n);}
+#endif
 
 #define AB2(ip, am1 ,am2, b, t1, t2) {\
   t1 = (b << 1) & am1;\
