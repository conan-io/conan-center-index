--- a/cmake-library/VCI/VCICommon.cmake
+++ b/cmake-library/VCI/VCICommon.cmake
@@ -1,8 +1,8 @@
 include (MSVCMacros)
 include (VCIPaths)
 
-if (EXISTS ${CMAKE_SOURCE_DIR}/${CMAKE_PROJECT_NAME}.cmake)
-  include (${CMAKE_SOURCE_DIR}/${CMAKE_PROJECT_NAME}.cmake)
+if (EXISTS ${CMAKE_SOURCE_DIR}/${PROJECT_NAME}.cmake)
+  include (${CMAKE_SOURCE_DIR}/${PROJECT_NAME}.cmake)
 endif ()
 
 # prevent build in source directory
@@ -41,19 +41,19 @@
 if (CMAKE_HOST_SYSTEM_NAME MATCHES Windows)
   set (VCI_PROJECT_DATADIR ".")
   set (VCI_PROJECT_LIBDIR "lib")
-  set (VCI_PROJECT_BINDIR ".")
+  set (VCI_PROJECT_BINDIR "bin")
   set (VCI_PROJECT_PLUGINDIR "Plugins")
   if (NOT EXISTS ${CMAKE_BINARY_DIR}/Build/${VCI_PROJECT_LIBDIR})
     file (MAKE_DIRECTORY ${CMAKE_BINARY_DIR}/Build/${VCI_PROJECT_LIBDIR})
   endif ()
 elseif (APPLE)
-  set (VCI_PROJECT_DATADIR "share/${CMAKE_PROJECT_NAME}")
+  set (VCI_PROJECT_DATADIR "share/${PROJECT_NAME}")
   set (VCI_PROJECT_LIBDIR "lib${LIB_SUFFIX}")
   set (CMAKE_LIBRARY_OUTPUT_DIR "${CMAKE_BINARY_DIR}/Build/${VCI_PROJECT_LIBDIR}")
   set (VCI_PROJECT_PLUGINDIR "${VCI_PROJECT_LIBDIR}/plugins")
   set (VCI_PROJECT_BINDIR "bin")
 else ()
-  set (VCI_PROJECT_DATADIR "share/${CMAKE_PROJECT_NAME}")
+  set (VCI_PROJECT_DATADIR "share/${PROJECT_NAME}")
   set (VCI_PROJECT_LIBDIR "lib${LIB_SUFFIX}")
   set (VCI_PROJECT_PLUGINDIR "${VCI_PROJECT_LIBDIR}/plugins")
   set (VCI_PROJECT_BINDIR "bin")
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -44,7 +44,7 @@
 include (VCICommon)
 
 # Disable package building when built as an external library
-if(${CMAKE_PROJECT_NAME} MATCHES "OpenMesh")
+if(${PROJECT_NAME} MATCHES "OpenMesh")
     include(OpenMeshPackage)
 endif()
 
@@ -85,7 +85,7 @@
 endif()
 
 # Only call fixbundle, when we are building OpenMesh standalone
-if( (${CMAKE_PROJECT_NAME} MATCHES "OpenMesh") AND BUILD_APPS )
+if( (${PROJECT_NAME} MATCHES "OpenMesh") AND BUILD_APPS )
 
   if (WIN32)
     if ( NOT "${CMAKE_GENERATOR}" MATCHES "MinGW Makefiles" AND BUILD_APPS )
@@ -117,7 +117,7 @@
 endif()
 
 # Do not build unit tests when build as external library
-if(${CMAKE_PROJECT_NAME} MATCHES "OpenMesh")
+if(${PROJECT_NAME} MATCHES "OpenMesh")
     add_subdirectory (src/Unittests)
 else()
 	# If built as a dependent project simulate effects of
@@ -149,7 +149,7 @@
 # ========================================================================
 
 # Only call fixbundle, when we are building OpenMesh standalone
-if(${CMAKE_PROJECT_NAME} MATCHES "OpenMesh")
+if(${PROJECT_NAME} MATCHES "OpenMesh")
 
   if (WIN32 AND  BUILD_APPS)
     # prepare bundle generation cmake file and add a build target for it
--- a/src/OpenMesh/Apps/CMakeLists.txt
+++ b/src/OpenMesh/Apps/CMakeLists.txt
@@ -7,7 +7,7 @@
 if ( BUILD_APPS )
 
   # Only build and fixbundle apps, when we are building OpenMesh standalone
-  if(${CMAKE_PROJECT_NAME} MATCHES "OpenMesh")
+  if(${PROJECT_NAME} MATCHES "OpenMesh")
 
     if ( WIN32 AND OPENMESH_BUILD_SHARED )
 	  add_definitions(-DOPENMESHDLL )
--- a/src/OpenMesh/Core/CMakeLists.txt
+++ b/src/OpenMesh/Core/CMakeLists.txt
@@ -25,7 +25,7 @@
 vci_append_files (sources "*.cc" ${directories})
 
 # Disable Library installation when not building OpenMesh on its own but as part of another project!
-if ( NOT ${CMAKE_PROJECT_NAME} MATCHES "OpenMesh")
+if ( NOT ${PROJECT_NAME} MATCHES "OpenMesh")
   set(VCI_NO_LIBRARY_INSTALL true)
 endif()
 
@@ -51,7 +51,7 @@
 endif ()
 
 # Add core as dependency before fixbundle 
-if ( (${CMAKE_PROJECT_NAME} MATCHES "OpenMesh") AND BUILD_APPS )
+if ( (${PROJECT_NAME} MATCHES "OpenMesh") AND BUILD_APPS )
 
   if ( WIN32 )
     if ( NOT "${CMAKE_GENERATOR}" MATCHES "MinGW Makefiles" )
@@ -68,7 +68,7 @@
 endif()
 
 # if we build debug and release in the same dir, we want to install both!
-if ( ${CMAKE_PROJECT_NAME} MATCHES "OpenMesh")
+if ( ${PROJECT_NAME} MATCHES "OpenMesh")
   if ( WIN32 )
     FILE(GLOB files_install_libs "${CMAKE_BINARY_DIR}/Build/lib/*.lib" )
     FILE(GLOB files_install_dlls "${CMAKE_BINARY_DIR}/Build/*.dll" )
@@ -104,7 +104,7 @@
 
 
 # Only install if the project name matches OpenMesh.
-if (${CMAKE_PROJECT_NAME} MATCHES "OpenMesh")
+if (${PROJECT_NAME} MATCHES "OpenMesh")
   set (OPENMESH_NO_INSTALL_HEADERS FALSE CACHE BOOL "Should OpenMesh skip installing headers?")
 else()
   set (OPENMESH_NO_INSTALL_HEADERS TRUE CACHE BOOL "Should OpenMesh skip installing headers?")
--- a/src/OpenMesh/Tools/CMakeLists.txt
+++ b/src/OpenMesh/Tools/CMakeLists.txt
@@ -27,7 +27,7 @@
 ENDIF(WIN32 AND NOT MINGW)
 
 # Disable Library installation when not building OpenMesh on its own but as part of another project!
-if ( NOT ${CMAKE_PROJECT_NAME} MATCHES "OpenMesh")
+if ( NOT ${PROJECT_NAME} MATCHES "OpenMesh")
   set(VCI_NO_LIBRARY_INSTALL true)
 endif()
 
@@ -54,7 +54,7 @@
   target_link_libraries (OpenMeshToolsStatic OpenMeshCoreStatic)
 ENDIF(NOT WIN32)
 
-if ( (${CMAKE_PROJECT_NAME} MATCHES "OpenMesh") AND BUILD_APPS )
+if ( (${PROJECT_NAME} MATCHES "OpenMesh") AND BUILD_APPS )
 
   if ( WIN32 )
     if ( NOT "${CMAKE_GENERATOR}" MATCHES "MinGW Makefiles" )
@@ -97,7 +97,7 @@
 
 
 # Only install if the project name matches OpenMesh.
-if (${CMAKE_PROJECT_NAME} MATCHES "OpenMesh")
+if (${PROJECT_NAME} MATCHES "OpenMesh")
   set (OPENMESH_NO_INSTALL_HEADERS FALSE CACHE BOOL "Should OpenMesh skip installing headers?")
 else()
   set (OPENMESH_NO_INSTALL_HEADERS TRUE CACHE BOOL "Should OpenMesh skip installing headers?")

