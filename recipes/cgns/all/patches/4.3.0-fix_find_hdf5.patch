The CGNS build uses the FindHDF5 module that locates the HDF5 libs by invoking the HDF5 compiler.
In order to link to the correct libraries provided by conan, the whole logic is removed from the cmake script.

diff -r -u a/CMakeLists.txt b/CMakeLists.txt
--- a/CMakeLists.txt	2022-05-31 16:13:29.851723515 +0800
+++ b/CMakeLists.txt	2022-05-31 16:13:58.578894724 +0800
@@ -237,8 +237,11 @@
 ########
 
 option(CGNS_ENABLE_HDF5 "Enable or disable HDF5 interface" "ON")
-if (CGNS_ENABLE_HDF5)
-
+set(HDF5_LIBRARY hdf5::hdf5)
+find_package(HDF5)
+# All this logic is useless for conan
+# (but don't forget to handle HDF5_NEED_MPI cache variable when we could use openmpi in hdf5)
+if(0)
   if (CGNS_BUILD_SHARED)
     set (CG_HDF5_LINK_TYPE "shared")
     set (CG_HDF5_LINK_TYPE_UPPER "SHARED")
diff -r -u a/src/CMakeLists.txt b/src/CMakeLists.txt
--- a/src/CMakeLists.txt	2022-05-31 16:13:29.855723400 +0800
+++ b/src/CMakeLists.txt	2022-05-31 16:40:39.332447379 +0800
@@ -576,7 +576,7 @@
 add_library(CGNS::cgns-static ALIAS cgns_static)
 # Needed to work around a CMake > 3.8 bug on Windows with MSVS and Intel Fortran
 set_property(TARGET cgns_static PROPERTY LINKER_LANGUAGE C)
-target_link_libraries(cgns_static PRIVATE $<$<BOOL:${CGNS_ENABLE_HDF5}>:hdf5::hdf5-${CG_HDF5_LINK_TYPE}>)
+target_link_libraries(cgns_static PRIVATE $<$<BOOL:${CGNS_ENABLE_HDF5}>:hdf5::hdf5>)
 
 # Build a shared version of the library
 if(CGNS_BUILD_SHARED)
@@ -593,7 +593,7 @@
     target_compile_definitions(cgns_shared INTERFACE -DUSE_DLL)
   endif ()
   if (CGNS_ENABLE_HDF5 AND HDF5_LIBRARY)
-    target_link_libraries(cgns_shared PUBLIC hdf5::hdf5-${CG_HDF5_LINK_TYPE} $<$<NOT:$<PLATFORM_ID:Windows>>:${CMAKE_DL_LIBS}>)
+    target_link_libraries(cgns_shared PUBLIC hdf5::hdf5 $<$<NOT:$<PLATFORM_ID:Windows>>:${CMAKE_DL_LIBS}>)
     if(HDF5_NEED_ZLIB AND ZLIB_LIBRARY)
       target_link_libraries(cgns_shared PUBLIC ${ZLIB_LIBRARY})
     endif()
