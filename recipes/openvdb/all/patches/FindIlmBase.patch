---
--- cmake/FindIlmBase.cmake
+++ cmake/FindIlmBase.cmake
@@ -42,12 +42,23 @@ This will define the following variables:
   The version of the IlmBase library which was found.
 ``IlmBase_INCLUDE_DIRS``
   Include directories needed to use IlmBase.
+``IlmBase_RELEASE_LIBRARIES``
+  Libraries needed to link to the release version of IlmBase.
+``IlmBase_RELEASE_LIBRARY_DIRS``
+  IlmBase release library directories.
+``IlmBase_DEBUG_LIBRARIES``
+  Libraries needed to link to the debug version of IlmBase.
+``IlmBase_DEBUG_LIBRARY_DIRS``
+  IlmBase debug library directories.
+``IlmBase_{COMPONENT}_FOUND``
+  True if the system has the named IlmBase component.
+
+Deprecated - use [RELEASE|DEBUG] variants:
+
 ``IlmBase_LIBRARIES``
   Libraries needed to link to IlmBase.
 ``IlmBase_LIBRARY_DIRS``
   IlmBase library directories.
-``IlmBase_{COMPONENT}_FOUND``
-  True if the system has the named IlmBase component.
 
 Cache Variables
 ^^^^^^^^^^^^^^^
@@ -57,7 +68,11 @@ The following cache variables may also be set:
 ``IlmBase_INCLUDE_DIR``
   The directory containing ``IlmBase/config-auto.h``.
 ``IlmBase_{COMPONENT}_LIBRARY``
-  Individual component libraries for IlmBase
+  Individual component libraries for IlmBase. may include target_link_libraries() debug/optimized keywords.
+``IlmBase_{COMPONENT}_LIBRARY_RELEASE``
+  Individual component libraries for IlmBase release
+``IlmBase_{COMPONENT}_LIBRARY_DEBUG``
+  Individual component libraries for IlmBase debug
 
 Hints
 ^^^^^
@@ -71,6 +86,8 @@ may be provided to tell this module where to look.
   Preferred include directory e.g. <prefix>/include
 ``ILMBASE_LIBRARYDIR``
   Preferred library directory e.g. <prefix>/lib
+``ILMBASE_DEBUG_SUFFIX``
+  Suffix of the debug version of ilmbase libs. Defaults to "_d".
 ``SYSTEM_LIBRARY_PATHS``
   Global list of library paths intended to be searched by and find_xxx call
 ``ILMBASE_USE_STATIC_LIBS``
@@ -80,7 +97,7 @@ may be provided to tell this module where to look.
 
 #]=======================================================================]
 
-cmake_minimum_required(VERSION 3.12)
+cmake_minimum_required(VERSION 3.15)
 include(GNUInstallDirs)
 
 
@@ -142,7 +159,9 @@ if(USE_PKGCONFIG)
   if(NOT DEFINED PKG_CONFIG_FOUND)
     find_package(PkgConfig)
   endif()
-  pkg_check_modules(PC_IlmBase QUIET IlmBase)
+  if(PKG_CONFIG_FOUND)
+    pkg_check_modules(PC_IlmBase QUIET ilmbase)
+  endif()
 endif()
 
 # ------------------------------------------------------------------------
@@ -192,6 +211,10 @@ endif()
 #  Search for ILMBASE lib DIR
 # ------------------------------------------------------------------------
 
+if(NOT DEFINED ILMBASE_DEBUG_SUFFIX)
+  set(ILMBASE_DEBUG_SUFFIX _d)
+endif()
+
 set(_ILMBASE_LIBRARYDIR_SEARCH_DIRS "")
 
 # Append to _ILMBASE_LIBRARYDIR_SEARCH_DIRS in priority order
@@ -203,40 +226,91 @@ list(APPEND _ILMBASE_LIBRARYDIR_SEARCH_DIRS
   ${SYSTEM_LIBRARY_PATHS}
 )
 
-# Library suffix handling
+set(IlmBase_LIB_COMPONENTS "")
+list(APPEND ILM_BUILD_TYPES RELEASE DEBUG)
 
-set(_ILMBASE_ORIG_CMAKE_FIND_LIBRARY_SUFFIXES ${CMAKE_FIND_LIBRARY_SUFFIXES})
-set(_IlmBase_Version_Suffix "-${IlmBase_VERSION_MAJOR}_${IlmBase_VERSION_MINOR}")
+foreach(COMPONENT ${IlmBase_FIND_COMPONENTS})
+  foreach(BUILD_TYPE ${ILM_BUILD_TYPES})
 
-if(WIN32)
-  if(ILMBASE_USE_STATIC_LIBS)
-    set(CMAKE_FIND_LIBRARY_SUFFIXES ".lib")
-  endif()
-  list(APPEND CMAKE_FIND_LIBRARY_SUFFIXES "${_IlmBase_Version_Suffix}.lib")
-else()
-  if(ILMBASE_USE_STATIC_LIBS)
-    set(CMAKE_FIND_LIBRARY_SUFFIXES ".a")
-  else()
-    if(APPLE)
-      list(APPEND CMAKE_FIND_LIBRARY_SUFFIXES "${_IlmBase_Version_Suffix}.dylib")
+    set(_TMP_SUFFIX "")
+    if(BUILD_TYPE STREQUAL DEBUG)
+      set(_TMP_SUFFIX ${ILMBASE_DEBUG_SUFFIX})
+    endif()
+
+    set(_IlmBase_Version_Suffix "-${IlmBase_VERSION_MAJOR}_${IlmBase_VERSION_MINOR}")
+    set(_ILMBASE_ORIG_CMAKE_FIND_LIBRARY_SUFFIXES ${CMAKE_FIND_LIBRARY_SUFFIXES})
+
+    if(WIN32)
+      if(ILMBASE_USE_STATIC_LIBS)
+        set(CMAKE_FIND_LIBRARY_SUFFIXES "${_TMP_SUFFIX}.lib")
+      endif()
+      list(APPEND CMAKE_FIND_LIBRARY_SUFFIXES "${_IlmBase_Version_Suffix}${_TMP_SUFFIX}.lib")
     else()
-      list(APPEND CMAKE_FIND_LIBRARY_SUFFIXES "${_IlmBase_Version_Suffix}.so")
+      if(ILMBASE_USE_STATIC_LIBS)
+        set(CMAKE_FIND_LIBRARY_SUFFIXES "${_TMP_SUFFIX}.a")
+      else()
+        if(APPLE)
+          list(APPEND CMAKE_FIND_LIBRARY_SUFFIXES "${_IlmBase_Version_Suffix}${_TMP_SUFFIX}.dylib")
+        else()
+          list(APPEND CMAKE_FIND_LIBRARY_SUFFIXES "${_IlmBase_Version_Suffix}${_TMP_SUFFIX}.so")
+        endif()
+      endif()
+      list(APPEND CMAKE_FIND_LIBRARY_SUFFIXES "${_IlmBase_Version_Suffix}${_TMP_SUFFIX}.a")
     endif()
+
+    # Find the lib
+    find_library(IlmBase_${COMPONENT}_LIBRARY_${BUILD_TYPE} ${COMPONENT}
+      ${_FIND_ILMBASE_ADDITIONAL_OPTIONS}
+      PATHS ${_ILMBASE_LIBRARYDIR_SEARCH_DIRS}
+      PATH_SUFFIXES ${CMAKE_INSTALL_LIBDIR} lib64 lib
+    )
+
+    if(EXISTS ${IlmBase_${COMPONENT}_LIBRARY_${BUILD_TYPE}})
+      list(APPEND IlmBase_LIB_COMPONENTS ${IlmBase_${COMPONENT}_LIBRARY_${BUILD_TYPE}})
+      list(APPEND IlmBase_LIB_COMPONENTS_${BUILD_TYPE} ${IlmBase_${COMPONENT}_LIBRARY_${BUILD_TYPE}})
+    endif()
+
+    # Reset library suffix
+    set(CMAKE_FIND_LIBRARY_SUFFIXES ${_ILMBASE_ORIG_CMAKE_FIND_LIBRARY_SUFFIXES})
+    unset(_ILMBASE_ORIG_CMAKE_FIND_LIBRARY_SUFFIXES)
+    unset(_IlmBase_Version_Suffix)
+    unset(_TMP_SUFFIX)
+  endforeach()
+
+  if(IlmBase_${COMPONENT}_LIBRARY_DEBUG AND IlmBase_${COMPONENT}_LIBRARY_RELEASE)
+    # if the generator is multi-config or if CMAKE_BUILD_TYPE is set for
+    # single-config generators, set optimized and debug libraries
+    get_property(_isMultiConfig GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)
+    if(_isMultiConfig OR CMAKE_BUILD_TYPE)
+      set(IlmBase_${COMPONENT}_LIBRARY optimized ${IlmBase_${COMPONENT}_LIBRARY_RELEASE} debug ${IlmBase_${COMPONENT}_LIBRARY_DEBUG})
+    else()
+      # For single-config generators where CMAKE_BUILD_TYPE has no value,
+      # just use the release libraries
+      set(IlmBase_${COMPONENT}_LIBRARY ${IlmBase_${COMPONENT}_LIBRARY_RELEASE})
+    endif()
+    # FIXME: This probably should be set for both cases
+    set(IlmBase_${COMPONENT}_LIBRARIES optimized ${IlmBase_${COMPONENT}_LIBRARY_RELEASE} debug ${IlmBase_${COMPONENT}_LIBRARY_DEBUG})
   endif()
-  list(APPEND CMAKE_FIND_LIBRARY_SUFFIXES "${_IlmBase_Version_Suffix}.a")
-endif()
 
-unset(_IlmBase_Version_Suffix)
+  # if only the release version was found, set the debug variable also to the release version
+  if(IlmBase_${COMPONENT}_LIBRARY_RELEASE AND NOT IlmBase_${COMPONENT}_LIBRARY_DEBUG)
+    set(IlmBase_${COMPONENT}_LIBRARY_DEBUG ${IlmBase_${COMPONENT}_LIBRARY_RELEASE})
+    set(IlmBase_${COMPONENT}_LIBRARY       ${IlmBase_${COMPONENT}_LIBRARY_RELEASE})
+    set(IlmBase_${COMPONENT}_LIBRARIES     ${IlmBase_${COMPONENT}_LIBRARY_RELEASE})
+  endif()
 
-set(IlmBase_LIB_COMPONENTS "")
+  # if only the debug version was found, set the release variable also to the debug version
+  if(IlmBase_${COMPONENT}_LIBRARY_DEBUG AND NOT IlmBase_${COMPONENT}_LIBRARY_RELEASE)
+    set(IlmBase_${COMPONENT}_LIBRARY_RELEASE ${IlmBase_${COMPONENT}_LIBRARY_DEBUG})
+    set(IlmBase_${COMPONENT}_LIBRARY         ${IlmBase_${COMPONENT}_LIBRARY_DEBUG})
+    set(IlmBase_${COMPONENT}_LIBRARIES       ${IlmBase_${COMPONENT}_LIBRARY_DEBUG})
+  endif()
 
-foreach(COMPONENT ${IlmBase_FIND_COMPONENTS})
-  find_library(IlmBase_${COMPONENT}_LIBRARY ${COMPONENT}
-    ${_FIND_ILMBASE_ADDITIONAL_OPTIONS}
-    PATHS ${_ILMBASE_LIBRARYDIR_SEARCH_DIRS}
-    PATH_SUFFIXES ${CMAKE_INSTALL_LIBDIR} lib64 lib
-  )
-  list(APPEND IlmBase_LIB_COMPONENTS ${IlmBase_${COMPONENT}_LIBRARY})
+  # If the debug & release library ends up being the same, omit the keywords
+  if("${IlmBase_${COMPONENT}_LIBRARY_RELEASE}" STREQUAL "${IlmBase_${COMPONENT}_LIBRARY_DEBUG}")
+    set(IlmBase_${COMPONENT}_LIBRARY   ${IlmBase_${COMPONENT}_LIBRARY_RELEASE} )
+    set(IlmBase_${COMPONENT}_LIBRARIES ${IlmBase_${COMPONENT}_LIBRARY_RELEASE} )
+  endif()
 
   if(IlmBase_${COMPONENT}_LIBRARY)
     set(IlmBase_${COMPONENT}_FOUND TRUE)
@@ -245,11 +319,6 @@ foreach(COMPONENT ${IlmBase_FIND_COMPONENTS})
   endif()
 endforeach()
 
-# Reset library suffix
-
-set(CMAKE_FIND_LIBRARY_SUFFIXES ${_ILMBASE_ORIG_CMAKE_FIND_LIBRARY_SUFFIXES})
-unset(_ILMBASE_ORIG_CMAKE_FIND_LIBRARY_SUFFIXES)
-
 # ------------------------------------------------------------------------
 #  Cache and set ILMBASE_FOUND
 # ------------------------------------------------------------------------
@@ -264,77 +333,115 @@ find_package_handle_standard_args(IlmBase
   HANDLE_COMPONENTS
 )
 
-if(IlmBase_FOUND)
-  set(IlmBase_LIBRARIES ${IlmBase_LIB_COMPONENTS})
-
-  # We have to add both include and include/OpenEXR to the include
-  # path in case OpenEXR and IlmBase are installed separately.
-  #
-  # Make sure we get the absolute path to avoid issues where
-  # /usr/include/OpenEXR/../ is picked up and passed to gcc from cmake
-  # which won't correctly compute /usr/include as an implicit system
-  # dir if the path is relative:
-  #
-  # https://github.com/AcademySoftwareFoundation/openvdb/issues/632
-  # https://gcc.gnu.org/bugzilla/show_bug.cgi?id=70129
-
-  set(_IlmBase_Parent_Dir "")
-  get_filename_component(_IlmBase_Parent_Dir
-    ${IlmBase_INCLUDE_DIR}/../ ABSOLUTE)
-
-  set(IlmBase_INCLUDE_DIRS)
-  list(APPEND IlmBase_INCLUDE_DIRS
-    ${_IlmBase_Parent_Dir}
-    ${IlmBase_INCLUDE_DIR}
-  )
-  unset(_IlmBase_Parent_Dir)
+if(NOT IlmBase_FOUND)
+  if(IlmBase_FIND_REQUIRED)
+    message(FATAL_ERROR "Unable to find IlmBase")
+  endif()
+  return()
+endif()
 
-  set(IlmBase_LIBRARY_DIRS "")
-  foreach(LIB ${IlmBase_LIB_COMPONENTS})
-    get_filename_component(_ILMBASE_LIBDIR ${LIB} DIRECTORY)
-    list(APPEND IlmBase_LIBRARY_DIRS ${_ILMBASE_LIBDIR})
-  endforeach()
-  list(REMOVE_DUPLICATES IlmBase_LIBRARY_DIRS)
+# Partition release/debug lib vars
 
-  # Configure imported targets
+set(IlmBase_RELEASE_LIBRARIES "")
+set(IlmBase_RELEASE_LIBRARY_DIRS "")
+set(IlmBase_DEBUG_LIBRARIES "")
+set(IlmBase_DEBUG_LIBRARY_DIRS "")
+foreach(LIB ${IlmBase_LIB_COMPONENTS_RELEASE})
+  get_filename_component(_ILM_LIBDIR ${LIB} DIRECTORY)
+  list(APPEND IlmBase_RELEASE_LIBRARIES ${LIB})
+  list(APPEND IlmBase_RELEASE_LIBRARY_DIRS ${_ILM_LIBDIR})
+endforeach()
 
-  foreach(COMPONENT ${IlmBase_FIND_COMPONENTS})
-    # Configure lib type. If XXX_USE_STATIC_LIBS, we always assume a static
-    # lib is in use. If win32, we can't mark the import .libs as shared, so
-    # these are always marked as UNKNOWN. Otherwise, infer from extension.
-    set(ILMBASE_${COMPONENT}_LIB_TYPE UNKNOWN)
-    if(ILMBASE_USE_STATIC_LIBS)
+foreach(LIB ${IlmBase_LIB_COMPONENTS_DEBUG})
+  get_filename_component(_ILM_LIBDIR ${LIB} DIRECTORY)
+  list(APPEND IlmBase_DEBUG_LIBRARIES ${LIB})
+  list(APPEND IlmBase_DEBUG_LIBRARY_DIRS ${_ILM_LIBDIR})
+endforeach()
+
+list(REMOVE_DUPLICATES IlmBase_RELEASE_LIBRARY_DIRS)
+list(REMOVE_DUPLICATES IlmBase_DEBUG_LIBRARY_DIRS)
+
+set(IlmBase_LIBRARIES ${IlmBase_RELEASE_LIBRARIES})
+set(IlmBase_LIBRARY_DIRS ${IlmBase_RELEASE_LIBRARY_DIRS})
+
+# We have to add both include and include/OpenEXR to the include
+# path in case OpenEXR and IlmBase are installed separately.
+#
+# Make sure we get the absolute path to avoid issues where
+# /usr/include/OpenEXR/../ is picked up and passed to gcc from cmake
+# which won't correctly compute /usr/include as an implicit system
+# dir if the path is relative:
+#
+# https://github.com/AcademySoftwareFoundation/openvdb/issues/632
+# https://gcc.gnu.org/bugzilla/show_bug.cgi?id=70129
+
+set(_IlmBase_Parent_Dir "")
+get_filename_component(_IlmBase_Parent_Dir
+  ${IlmBase_INCLUDE_DIR}/../ ABSOLUTE)
+
+set(IlmBase_INCLUDE_DIRS)
+list(APPEND IlmBase_INCLUDE_DIRS
+  ${_IlmBase_Parent_Dir}
+  ${IlmBase_INCLUDE_DIR}
+)
+unset(_IlmBase_Parent_Dir)
+
+# Configure imported targets
+
+foreach(COMPONENT ${IlmBase_FIND_COMPONENTS})
+  # Configure lib type. If XXX_USE_STATIC_LIBS, we always assume a static
+  # lib is in use. If win32, we can't mark the import .libs as shared, so
+  # these are always marked as UNKNOWN. Otherwise, infer from extension.
+  set(ILMBASE_${COMPONENT}_LIB_TYPE UNKNOWN)
+  if(ILMBASE_USE_STATIC_LIBS)
+    set(ILMBASE_${COMPONENT}_LIB_TYPE STATIC)
+  elseif(UNIX)
+    get_filename_component(_ILMBASE_${COMPONENT}_EXT ${IlmBase_${COMPONENT}_LIBRARY_RELEASE} EXT)
+    if(${_ILMBASE_${COMPONENT}_EXT} STREQUAL ".a")
       set(ILMBASE_${COMPONENT}_LIB_TYPE STATIC)
-    elseif(UNIX)
-      get_filename_component(_ILMBASE_${COMPONENT}_EXT ${IlmBase_${COMPONENT}_LIBRARY} EXT)
-      if(${_ILMBASE_${COMPONENT}_EXT} STREQUAL ".a")
-        set(ILMBASE_${COMPONENT}_LIB_TYPE STATIC)
-      elseif(${_ILMBASE_${COMPONENT}_EXT} STREQUAL ".so" OR
-             ${_ILMBASE_${COMPONENT}_EXT} STREQUAL ".dylib")
-        set(ILMBASE_${COMPONENT}_LIB_TYPE SHARED)
-      endif()
+    elseif(${_ILMBASE_${COMPONENT}_EXT} STREQUAL ".so" OR
+           ${_ILMBASE_${COMPONENT}_EXT} STREQUAL ".dylib")
+      set(ILMBASE_${COMPONENT}_LIB_TYPE SHARED)
     endif()
+  endif()
 
-    set(IlmBase_${COMPONENT}_DEFINITIONS)
+  set(IlmBase_${COMPONENT}_DEFINITIONS)
 
-    # Add the OPENEXR_DLL define if the library is not static on WIN32
-    if(WIN32)
-      if(NOT ILMBASE_${COMPONENT}_LIB_TYPE STREQUAL STATIC)
-        list(APPEND IlmBase_${COMPONENT}_DEFINITIONS OPENEXR_DLL)
-      endif()
+  # Add the OPENEXR_DLL define if the library is not static on WIN32
+  if(WIN32)
+    if(NOT ILMBASE_${COMPONENT}_LIB_TYPE STREQUAL STATIC)
+      list(APPEND IlmBase_${COMPONENT}_DEFINITIONS OPENEXR_DLL)
     endif()
+  endif()
 
-    if(NOT TARGET IlmBase::${COMPONENT})
-      add_library(IlmBase::${COMPONENT} ${ILMBASE_${COMPONENT}_LIB_TYPE} IMPORTED)
+  if(NOT TARGET IlmBase::${COMPONENT})
+    add_library(IlmBase::${COMPONENT} ${ILMBASE_${COMPONENT}_LIB_TYPE} IMPORTED)
+    set_target_properties(IlmBase::${COMPONENT} PROPERTIES
+      INTERFACE_COMPILE_OPTIONS "${PC_IlmBase_CFLAGS_OTHER}"
+      INTERFACE_COMPILE_DEFINITIONS "${IlmBase_${COMPONENT}_DEFINITIONS}"
+      INTERFACE_INCLUDE_DIRECTORIES "${IlmBase_INCLUDE_DIRS}")
+
+    # Standard location
+    set_target_properties(IlmBase::${COMPONENT} PROPERTIES
+      IMPORTED_LINK_INTERFACE_LANGUAGES "CXX"
+      IMPORTED_LOCATION "${IlmBase_${COMPONENT}_LIBRARY}")
+
+    # Release location
+    if(EXISTS "${IlmBase_${COMPONENT}_LIBRARY_RELEASE}")
+      set_property(TARGET IlmBase::${COMPONENT} APPEND PROPERTY
+        IMPORTED_CONFIGURATIONS RELEASE)
       set_target_properties(IlmBase::${COMPONENT} PROPERTIES
-        IMPORTED_LOCATION "${IlmBase_${COMPONENT}_LIBRARY}"
-        INTERFACE_COMPILE_OPTIONS "${PC_IlmBase_CFLAGS_OTHER}"
-        INTERFACE_COMPILE_DEFINITIONS "${IlmBase_${COMPONENT}_DEFINITIONS}"
-        INTERFACE_INCLUDE_DIRECTORIES "${IlmBase_INCLUDE_DIRS}"
-      )
+        IMPORTED_LINK_INTERFACE_LANGUAGES_RELEASE "CXX"
+        IMPORTED_LOCATION_RELEASE "${IlmBase_${COMPONENT}_LIBRARY_RELEASE}")
     endif()
-  endforeach()
 
-elseif(IlmBase_FIND_REQUIRED)
-  message(FATAL_ERROR "Unable to find IlmBase")
-endif()
+    # Debug location
+    if(EXISTS "${IlmBase_${COMPONENT}_LIBRARY_DEBUG}")
+      set_property(TARGET IlmBase::${COMPONENT} APPEND PROPERTY
+        IMPORTED_CONFIGURATIONS DEBUG)
+      set_target_properties(IlmBase::${COMPONENT} PROPERTIES
+        IMPORTED_LINK_INTERFACE_LANGUAGES_DEBUG "CXX"
+        IMPORTED_LOCATION_DEBUG "${IlmBase_${COMPONENT}_LIBRARY_DEBUG}")
+    endif()
+  endif()
+endforeach()
