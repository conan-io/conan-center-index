diff -urN ./a/cmake/helpers/CheckDependentLibraries.cmake ./b/cmake/helpers/CheckDependentLibraries.cmake
--- ./a/cmake/helpers/CheckDependentLibraries.cmake
+++ ./b/cmake/helpers/CheckDependentLibraries.cmake
@@ -11,7 +11,7 @@
 include(CheckFunctionExists)
 include(CMakeDependentOption)
 include(FeatureSummary)
-include(DefineFindPackage2)
+include(ConanFindPackage)
 include(CheckSymbolExists)
 
 option(
@@ -109,9 +109,8 @@
   string(TOUPPER ${name} key)
   set(_find_dependency "")
   set(_find_dependency_args "")
-  if(FIND_PACKAGE2_${name}_ENABLED)
-    find_package2(${name} QUIET OUT_DEPENDENCY _find_dependency)
-  else()
+  find_package2(${name} QUIET)
+  if (FALSE)
     set(_find_package_args)
     if (_GCP_VERSION)
       list(APPEND _find_package_args ${_GCP_VERSION})
@@ -368,7 +367,7 @@
 endif ()
 
 # First check with CMake config files (starting at version 8, due to issues with earlier ones), and then fallback to the FindPROJ module.
-find_package(PROJ 9 CONFIG QUIET)
+find_package2(PROJ 9 CONFIG REQUIRED)
 if (NOT PROJ_FOUND)
   find_package(PROJ 8 CONFIG QUIET)
 endif()
@@ -457,8 +456,8 @@
   NAMES json-c
   TARGETS json-c::json-c JSONC::JSONC
 )
-gdal_internal_library(JSONC REQUIRED)
-if(TARGET json-c::json-c)
+find_package2(JSONC REQUIRED)
+if(FALSE)
   get_target_property(include_dirs json-c::json-c INTERFACE_INCLUDE_DIRECTORIES)
   find_path(GDAL_JSON_INCLUDE_DIR NAMES json.h PATHS ${include_dirs} PATH_SUFFIXES json-c NO_DEFAULT_PATH)
   list(APPEND include_dirs "${GDAL_JSON_INCLUDE_DIR}")
@@ -566,9 +565,9 @@
 gdal_check_package(SPATIALITE "Enable spatialite support for sqlite3" VERSION 4.1.2 CAN_DISABLE)
 gdal_check_package(RASTERLITE2 "Enable RasterLite2 support for sqlite3" VERSION 1.1.0 CAN_DISABLE)
 
-find_package(LibKML COMPONENTS DOM ENGINE)
+find_package2(LibKML COMPONENTS DOM ENGINE)
 if (GDAL_USE_LIBKML)
   if (NOT LibKML_FOUND)
     message(FATAL_ERROR "Configured to use GDAL_USE_LIBKML, but not found")
   endif ()
 endif ()
@@ -733,7 +732,7 @@
 gdal_check_package(HEIF "HEIF >= 1.1" CAN_DISABLE)
 
 # OpenJPEG's cmake-CONFIG is broken, so call module explicitly
-find_package(OpenJPEG MODULE)
+find_package2(OpenJPEG MODULE)
 if (GDAL_USE_OPENJPEG)
   if (NOT OPENJPEG_FOUND)
     message(FATAL_ERROR "Configured to use GDAL_USE_OPENJPEG, but not found")
