diff -urN ./a/cmake/helpers/CheckDependentLibraries.cmake ./b/cmake/helpers/CheckDependentLibraries.cmake
--- ./a/cmake/helpers/CheckDependentLibraries.cmake	2023-06-07 09:33:06.599777700 -0500
+++ ./b/cmake/helpers/CheckDependentLibraries.cmake	2023-06-07 13:38:51.722872200 -0500
@@ -11,7 +11,7 @@
 include(CheckFunctionExists)
 include(CMakeDependentOption)
 include(FeatureSummary)
-include(DefineFindPackage2)
+include(ConanFindPackage)
 include(CheckSymbolExists)
 
 option(
@@ -109,51 +109,8 @@
   string(TOUPPER ${name} key)
   set(_find_dependency "")
   set(_find_dependency_args "")
-  if(FIND_PACKAGE2_${name}_ENABLED)
-    find_package2(${name} QUIET OUT_DEPENDENCY _find_dependency)
-  else()
-    set(_find_package_args)
-    if (_GCP_VERSION)
-      list(APPEND _find_package_args ${_GCP_VERSION})
-    endif ()
-    if (_GCP_CONFIG)
-      list(APPEND _find_package_args CONFIG)
-    endif ()
-    if (_GCP_COMPONENTS)
-      list(APPEND _find_package_args COMPONENTS ${_GCP_COMPONENTS})
-    endif ()
-    if (_GCP_PATHS)
-      list(APPEND _find_package_args PATHS ${_GCP_PATHS})
-    endif ()
-    if (_GCP_NAMES)
-      set(GDAL_CHECK_PACKAGE_${name}_NAMES "${_GCP_NAMES}" CACHE STRING "Config file name for ${name}")
-      mark_as_advanced(GDAL_CHECK_PACKAGE_${name}_NAMES)
-    endif ()
-    if (_GCP_TARGETS)
-      set(GDAL_CHECK_PACKAGE_${name}_TARGETS "${_GCP_TARGETS}" CACHE STRING "Target name candidates for ${name}")
-      mark_as_advanced(GDAL_CHECK_PACKAGE_${name}_TARGETS)
-    endif ()
-    if (GDAL_CHECK_PACKAGE_${name}_NAMES)
-      find_package(${name} NAMES ${GDAL_CHECK_PACKAGE_${name}_NAMES} ${_find_package_args})
-      gdal_check_package_target(${name} ${GDAL_CHECK_PACKAGE_${name}_TARGETS} REQUIRED)
-      if (${name}_FOUND)
-        get_filename_component(_find_dependency_args "${${name}_CONFIG}" NAME)
-        string(REPLACE ";" " " _find_dependency_args "${name} NAMES ${GDAL_CHECK_PACKAGE_${name}_NAMES} CONFIGS ${_find_dependency_args} ${_find_package_args}")
-      endif ()
-    endif ()
-    if (NOT ${name}_FOUND)
-      find_package(${name} ${_find_package_args})
-      if (${name}_FOUND)
-        gdal_check_package_target(${name} ${GDAL_CHECK_PACKAGE_${name}_TARGETS})
-      elseif (${key}_FOUND) # Some find modules do not set <Pkg>_FOUND
-        gdal_check_package_target(${key} ${GDAL_CHECK_PACKAGE_${name}_TARGETS})
-        set(${name}_FOUND "${key}_FOUND")
-      endif ()
-      if (${name}_FOUND)
-        string(REPLACE ";" " " _find_dependency_args "${name} ${_find_package_args}")
-      endif()
-    endif ()
-  endif ()
+
+  find_package2(${name} QUIET)
   if (${key}_FOUND OR ${name}_FOUND)
     if(_GCP_MINIMUM_VERSION)
 
@@ -368,10 +325,7 @@
 endif ()
 
 # First check with CMake config files (starting at version 8, due to issues with earlier ones), and then fallback to the FindPROJ module.
-find_package(PROJ 9 CONFIG QUIET)
-if (NOT PROJ_FOUND)
-  find_package(PROJ 8 CONFIG QUIET)
-endif()
+find_package2(PROJ CONFIG REQUIRED)
 if (PROJ_FOUND)
   string(APPEND GDAL_IMPORT_DEPENDENCIES "find_dependency(PROJ ${PROJ_VERSION_MAJOR} CONFIG)\n")
 else()
@@ -457,16 +411,7 @@
   NAMES json-c
   TARGETS json-c::json-c JSONC::JSONC
 )
-gdal_internal_library(JSONC REQUIRED)
-if(TARGET json-c::json-c)
-  get_target_property(include_dirs json-c::json-c INTERFACE_INCLUDE_DIRECTORIES)
-  find_path(GDAL_JSON_INCLUDE_DIR NAMES json.h PATHS ${include_dirs} PATH_SUFFIXES json-c NO_DEFAULT_PATH)
-  list(APPEND include_dirs "${GDAL_JSON_INCLUDE_DIR}")
-  list(REMOVE_DUPLICATES include_dirs)
-  set_target_properties(json-c::json-c PROPERTIES
-    INTERFACE_INCLUDE_DIRECTORIES "${GDAL_JSON_INCLUDE_DIR}"
-  )
-endif()
+find_package2(JSONC REQUIRED)
 
 gdal_check_package(OpenCAD "libopencad (external, used by OpenCAD driver)" CAN_DISABLE)
 gdal_internal_library(OPENCAD)
@@ -527,6 +472,24 @@
 gdal_check_package(SQLite3 "Enable SQLite3 support (used by SQLite/Spatialite, GPKG, Rasterlite, MBTiles, etc.)"
                    CAN_DISABLE RECOMMENDED)
 if (SQLite3_FOUND)
+  set(CMAKE_REQUIRED_INCLUDES ${SQLite3_INCLUDE_DIRS})
+  check_symbol_exists(sqlite3_mutex_alloc sqlite3ext.h SQLite3_HAS_MUTEX_ALLOC)
+  check_symbol_exists(sqlite3_column_table_name sqlite3ext.h SQLite3_HAS_COLUMN_METADATA)
+  check_symbol_exists(sqlite3_rtree_query_callback sqlite3.h SQLite3_HAS_RTREE)
+  check_symbol_exists(sqlite3_load_extension sqlite3ext.h SQLite3_HAS_LOAD_EXTENSION)
+  # https://www.sqlite.org/compile.html recommends to build with -DSQLITE_OMIT_PROGRESS_CALLBACK
+  # "for applications that are able to use them"... This is sometimes wrongly
+  # understood as recommended in all situations.
+  check_symbol_exists(sqlite3_progress_handler sqlite3.h SQLite3_HAS_PROGRESS_HANDLER)
+
+  #if(NOT TARGET SQLite::SQLite3)
+  #  add_library(SQLite::SQLite3 UNKNOWN IMPORTED)
+  #  set_target_properties(SQLite::SQLite3 PROPERTIES
+  #                        INTERFACE_INCLUDE_DIRECTORIES "${SQLite3_INCLUDE_DIRS}"
+  #                        IMPORTED_LINK_INTERFACE_LANGUAGES "C"
+  #                        IMPORTED_LOCATION "${SQLite3_LIBRARY}")
+  #endif()
+
   if (NOT DEFINED SQLite3_HAS_COLUMN_METADATA)
     message(FATAL_ERROR "missing SQLite3_HAS_COLUMN_METADATA")
   endif ()
@@ -566,7 +529,7 @@
 gdal_check_package(SPATIALITE "Enable spatialite support for sqlite3" VERSION 4.1.2 CAN_DISABLE)
 gdal_check_package(RASTERLITE2 "Enable RasterLite2 support for sqlite3" VERSION 1.1.0 CAN_DISABLE)
 
-find_package(LibKML COMPONENTS DOM ENGINE)
+find_package2(LibKML COMPONENTS kmlengine kmldom kmlbase)
 if (GDAL_USE_LIBKML)
-  if (NOT LibKML_FOUND)
+  if (FALSE)
     message(FATAL_ERROR "Configured to use GDAL_USE_LIBKML, but not found")
@@ -729,7 +692,7 @@
 gdal_check_package(HEIF "HEIF >= 1.1" CAN_DISABLE)
 
 # OpenJPEG's cmake-CONFIG is broken, so call module explicitly
-find_package(OpenJPEG MODULE)
+find_package2(OpenJPEG MODULE)
 if (GDAL_USE_OPENJPEG)
   if (NOT OPENJPEG_FOUND)
     message(FATAL_ERROR "Configured to use GDAL_USE_OPENJPEG, but not found")
diff -urN ./a/gdal.cmake ./b/gdal.cmake
--- ./a/gdal.cmake	2023-05-02 08:47:12.000000000 -0500
+++ ./b/gdal.cmake	2023-06-06 16:55:34.252830900 -0500
@@ -859,25 +859,6 @@
                  ${CMAKE_CURRENT_BINARY_DIR}/GDALConfig.cmake @ONLY)
   install(FILES ${CMAKE_CURRENT_BINARY_DIR}/GDALConfig.cmake DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/gdal/)
 
-  # Generate gdal-config utility command and pkg-config module gdal.pc
-  include(GdalGenerateConfig)
-  gdal_generate_config(
-    TARGET
-    "${GDAL_LIB_TARGET_NAME}"
-    GLOBAL_PROPERTY
-    "gdal_private_link_libraries"
-    GDAL_CONFIG
-    "${PROJECT_BINARY_DIR}/apps/gdal-config"
-    PKG_CONFIG
-    "${CMAKE_CURRENT_BINARY_DIR}/gdal.pc")
-  install(
-    PROGRAMS ${PROJECT_BINARY_DIR}/apps/gdal-config
-    DESTINATION ${CMAKE_INSTALL_BINDIR}
-    COMPONENT applications)
-  install(
-    FILES ${CMAKE_CURRENT_BINARY_DIR}/gdal.pc
-    DESTINATION ${CMAKE_INSTALL_LIBDIR}/pkgconfig
-    COMPONENT libraries)
 endif ()
 
 configure_file(${GDAL_CMAKE_TEMPLATE_PATH}/uninstall.cmake.in ${PROJECT_BINARY_DIR}/cmake_uninstall.cmake @ONLY)
