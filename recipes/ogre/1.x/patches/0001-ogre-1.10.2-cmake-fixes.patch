diff --git a/CMake/CMakeLists.txt b/CMake/CMakeLists.txt
index 2198fb576..20ac0bdcb 100755
--- a/CMake/CMakeLists.txt
+++ b/CMake/CMakeLists.txt
@@ -31,23 +31,23 @@ set(INST_FILES
   Utils/OgreFindFrameworks.cmake
 ) 
 
-if (OGRE_CONFIG_THREAD_PROVIDER STREQUAL "poco")
-  set(INST_FILES ${INST_FILES} Packages/FindPOCO.cmake)
-endif ()
+#if (OGRE_CONFIG_THREAD_PROVIDER STREQUAL "poco")
+#  set(INST_FILES ${INST_FILES} Packages/FindPOCO.cmake)
+#endif ()
 
-if (OGRE_CONFIG_THREAD_PROVIDER STREQUAL "tbb")
-  set(INST_FILES ${INST_FILES} Packages/FindTBB.cmake)
-endif ()
+#if (OGRE_CONFIG_THREAD_PROVIDER STREQUAL "tbb")
+#  set(INST_FILES ${INST_FILES} Packages/FindTBB.cmake)
+#endif ()
 
 set(STATIC_INST_FILES
   Packages/FindCg.cmake
   Packages/FindDirectX.cmake
   Packages/FindDirectX11.cmake
-  Packages/FindFreeImage.cmake
-  Packages/FindFreetype.cmake
+  #Packages/FindFreeImage.cmake
+  #Packages/FindFreetype.cmake
   Packages/FindOpenGLES.cmake
   Packages/FindOpenGLES2.cmake
-  Packages/FindZZip.cmake
+  #Packages/FindZZip.cmake
   Packages/FindSoftimage.cmake
   Packages/FindGLSLOptimizer.cmake
   Packages/FindHLSL2GLSL.cmake
diff --git a/CMake/ConfigureBuild.cmake b/CMake/ConfigureBuild.cmake
index 0a30ca92a..eeafbcd90 100644
--- a/CMake/ConfigureBuild.cmake
+++ b/CMake/ConfigureBuild.cmake
@@ -55,8 +55,8 @@ if (OGRE_CONFIG_THREADS)
 
 	if (OGRE_CONFIG_THREAD_PROVIDER STREQUAL "poco")
 		set(OGRE_THREAD_PROVIDER 2)
-		include_directories(${POCO_INCLUDE_DIRS})
-		set(OGRE_THREAD_LIBRARIES ${POCO_LIBRARIES})
+		include_directories(${Poco_INCLUDE_DIRS})
+		set(OGRE_THREAD_LIBRARIES ${Poco_LIBRARIES})
 	endif ()
 
 	if (OGRE_CONFIG_THREAD_PROVIDER STREQUAL "tbb")
diff --git a/CMake/Dependencies.cmake b/CMake/Dependencies.cmake
index 91ceb98e6..e350e86a2 100755
--- a/CMake/Dependencies.cmake
+++ b/CMake/Dependencies.cmake
@@ -13,11 +13,11 @@
 
 # OGRE_DEPENDENCIES_DIR can be used to specify a single base
 # folder where the required dependencies may be found.
-set(OGRE_DEPENDENCIES_DIR "" CACHE PATH "Path to prebuilt OGRE dependencies")
-option(OGRE_BUILD_DEPENDENCIES "automaitcally build Ogre Dependencies (freetype, zzip)" TRUE)
+#set(OGRE_DEPENDENCIES_DIR "" CACHE PATH "Path to prebuilt OGRE dependencies")
+#option(OGRE_BUILD_DEPENDENCIES "automaitcally build Ogre Dependencies (freetype, zzip)" TRUE)
 
 include(FindPkgMacros)
-getenv_path(OGRE_DEPENDENCIES_DIR)
+#getenv_path(OGRE_DEPENDENCIES_DIR)
 if(OGRE_BUILD_PLATFORM_EMSCRIPTEN)
   set(OGRE_DEP_SEARCH_PATH
     ${OGRE_DEPENDENCIES_DIR}
@@ -27,6 +27,7 @@ if(OGRE_BUILD_PLATFORM_EMSCRIPTEN)
     "${OGRE_SOURCE_DIR}/EmscriptenDependencies"
     "${OGRE_BINARY_DIR}/../EmscriptenDependencies"
     "${OGRE_SOURCE_DIR}/../EmscriptenDependencies"
+    "${OGRE_BINARY_DIR}"
   )
   set(CMAKE_FIND_ROOT_PATH ${CMAKE_FIND_ROOT_PATH} ${OGRE_DEP_SEARCH_PATH})
 elseif(APPLE_IOS)
@@ -37,6 +38,7 @@ elseif(APPLE_IOS)
     "${OGRE_SOURCE_DIR}/iOSDependencies"
     "${OGRE_BINARY_DIR}/../iOSDependencies"
     "${OGRE_SOURCE_DIR}/../iOSDependencies"
+    "${OGRE_BINARY_DIR}"
   )
 elseif(OGRE_BUILD_PLATFORM_ANDROID)
   set(OGRE_DEP_SEARCH_PATH 
@@ -46,19 +48,21 @@ elseif(OGRE_BUILD_PLATFORM_ANDROID)
     "${OGRE_SOURCE_DIR}/AndroidDependencies"
     "${OGRE_BINARY_DIR}/../AndroidDependencies"
     "${OGRE_SOURCE_DIR}/../AndroidDependencies"
+    "${OGRE_BINARY_DIR}"
   )
 else()
   set(OGRE_DEP_SEARCH_PATH 
     ${OGRE_DEPENDENCIES_DIR}
     ${ENV_OGRE_DEPENDENCIES_DIR}
-    "${OGRE_BINARY_DIR}/Dependencies"
-    "${OGRE_SOURCE_DIR}/Dependencies"
-    "${OGRE_BINARY_DIR}/../Dependencies"
-    "${OGRE_SOURCE_DIR}/../Dependencies"
+    #"${OGRE_BINARY_DIR}/Dependencies"
+    #"${OGRE_SOURCE_DIR}/Dependencies"
+    #"${OGRE_BINARY_DIR}/../Dependencies"
+    #"${OGRE_SOURCE_DIR}/../Dependencies"
+    "${OGRE_BINARY_DIR}"
   )
 endif()
 
-message(STATUS "Search path: ${OGRE_DEP_SEARCH_PATH}")
+message(STATUS "OGRE Deps Search path: ${OGRE_DEP_SEARCH_PATH}")
 list(GET OGRE_DEP_SEARCH_PATH 0 OGREDEPS_PATH)
 
 if(CMAKE_CROSSCOMPILING)
@@ -76,81 +80,90 @@ if(CMAKE_CROSSCOMPILING)
             -DIOS_PLATFORM=${IOS_PLATFORM})
     endif()
 endif()
-
+#######################################################################################
+#### conan patch begin:  rely on the paths and build info generated by conan
+###  ------------------------------------------------------------------
 # Set hardcoded path guesses for various platforms
-if (UNIX AND NOT EMSCRIPTEN)
-  set(OGRE_DEP_SEARCH_PATH ${OGRE_DEP_SEARCH_PATH} /usr/local)
-  # Ubuntu 11.10 has an inconvenient path to OpenGL libraries
-  set(OGRE_DEP_SEARCH_PATH ${OGRE_DEP_SEARCH_PATH} /usr/lib/${CMAKE_SYSTEM_PROCESSOR}-linux-gnu)
-endif ()
+#if (UNIX AND NOT EMSCRIPTEN)
+#  set(OGRE_DEP_SEARCH_PATH ${OGRE_DEP_SEARCH_PATH} /usr/local)
+#  # Ubuntu 11.10 has an inconvenient path to OpenGL libraries
+#  set(OGRE_DEP_SEARCH_PATH ${OGRE_DEP_SEARCH_PATH} /usr/lib/${CMAKE_SYSTEM_PROCESSOR}-linux-gnu)
+#endif ()
 
 # give guesses as hints to the find_package calls
-set(CMAKE_PREFIX_PATH ${OGRE_DEP_SEARCH_PATH} ${CMAKE_PREFIX_PATH})
-set(CMAKE_FRAMEWORK_PATH ${OGRE_DEP_SEARCH_PATH} ${CMAKE_FRAMEWORK_PATH})
-
-if(OGRE_BUILD_DEPENDENCIES AND NOT EXISTS ${OGREDEPS_PATH})
-    set(OGREDEPS_SHARED TRUE)
-    if(OGRE_STATIC OR MSVC)
-        # freetype does not like shared build on MSVC and it generally eases distribution there
-        set(OGREDEPS_SHARED FALSE)
-    endif()
-
-    if(MSVC OR EMSCRIPTEN) # other platforms ship zlib
-        message(STATUS "Building zlib")
-        file(DOWNLOAD 
-            http://zlib.net/zlib-1.2.11.tar.gz
-            ./zlib-1.2.11.tar.gz 
-            EXPECTED_MD5 1c9f62f0778697a09d36121ead88e08e)
-        execute_process(COMMAND cmake -E tar xf zlib-1.2.11.tar.gz)
-        execute_process(COMMAND cmake
-            -DCMAKE_INSTALL_PREFIX=${OGREDEPS_PATH}
-            -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
-            -DBUILD_SHARED_LIBS=${OGREDEPS_SHARED}
-            -G ${CMAKE_GENERATOR}
-            ${CROSS}
-            .
-            WORKING_DIRECTORY zlib-1.2.11)
-        execute_process(COMMAND cmake --build zlib-1.2.11 --target install)
-    endif()
-
-    message(STATUS "Building ZZIPlib")
-    file(DOWNLOAD
-        https://github.com/paroj/ZZIPlib/archive/master.tar.gz
-        ./ZZIPlib-master.tar.gz)
-    execute_process(COMMAND cmake -E tar xf ZZIPlib-master.tar.gz)
-    execute_process(COMMAND cmake
-        -DCMAKE_INSTALL_PREFIX=${OGREDEPS_PATH}
-        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
-        -DZLIB_ROOT=${OGREDEPS_PATH}
-        -DBUILD_SHARED_LIBS=${OGREDEPS_SHARED}
-        -G ${CMAKE_GENERATOR}
-        ${CROSS}
-        .
-        WORKING_DIRECTORY ZZIPlib-master)
-    execute_process(COMMAND cmake --build ZZIPlib-master --target install)
-    
-    message(STATUS "Building freetype")
-    file(DOWNLOAD
-        http://download.savannah.gnu.org/releases/freetype/freetype-2.6.5.tar.gz
-        ./freetype-2.6.5.tar.gz)
-    execute_process(COMMAND cmake -E tar xf freetype-2.6.5.tar.gz)
-    # patch toolchain for iOS
-    execute_process(COMMAND cmake -E copy
-        ${CMAKE_SOURCE_DIR}/CMake/toolchain/ios.toolchain.xcode.cmake
-        freetype-2.6.5/builds/cmake/iOS.cmake)
-    execute_process(COMMAND cmake
-        -DCMAKE_INSTALL_PREFIX=${OGREDEPS_PATH}
-        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
-        -DBUILD_SHARED_LIBS=${OGREDEPS_SHARED}
-        -DWITH_BZip2=OFF # tries to use it on iOS otherwise
-        # workaround for broken iOS toolchain in freetype
-        -DPROJECT_SOURCE_DIR=${CMAKE_BINARY_DIR}/freetype-2.6.5
-        ${CROSS}
-        -G ${CMAKE_GENERATOR}
-        ..
-        WORKING_DIRECTORY freetype-2.6.5/objs)
-    execute_process(COMMAND cmake --build freetype-2.6.5/objs --target install)
-endif()
+#set(CMAKE_PREFIX_PATH ${OGRE_DEP_SEARCH_PATH} ${CMAKE_PREFIX_PATH})
+#set(CMAKE_FRAMEWORK_PATH ${OGRE_DEP_SEARCH_PATH} ${CMAKE_FRAMEWORK_PATH})
+#### conan patch end
+#######################################################################################
+
+##########################################################################################
+### conan patch begin: conan already provides the built in binaries, no need to install and build them
+### --------------------------------------------------------------------------------
+#if(OGRE_BUILD_DEPENDENCIES AND NOT EXISTS ${OGREDEPS_PATH})
+#    set(OGREDEPS_SHARED TRUE)
+#    if(OGRE_STATIC OR MSVC)
+#        # freetype does not like shared build on MSVC and it generally eases distribution there
+#        set(OGREDEPS_SHARED FALSE)
+#    endif()
+#
+#    if(MSVC OR EMSCRIPTEN) # other platforms ship zlib
+#        message(STATUS "Building zlib")
+#        file(DOWNLOAD 
+#            http://zlib.net/zlib-1.2.11.tar.gz
+#            ./zlib-1.2.11.tar.gz 
+#            EXPECTED_MD5 1c9f62f0778697a09d36121ead88e08e)
+#        execute_process(COMMAND cmake -E tar xf zlib-1.2.11.tar.gz)
+#        execute_process(COMMAND cmake
+#            -DCMAKE_INSTALL_PREFIX=${OGREDEPS_PATH}
+#            -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
+#            -DBUILD_SHARED_LIBS=${OGREDEPS_SHARED}
+#            -G ${CMAKE_GENERATOR}
+#            ${CROSS}
+#            .
+#            WORKING_DIRECTORY zlib-1.2.11)
+#        execute_process(COMMAND cmake --build zlib-1.2.11 --target install)
+#    endif()
+#
+#    message(STATUS "Building ZZIPlib")
+#    file(DOWNLOAD
+#        https://github.com/paroj/ZZIPlib/archive/master.tar.gz
+#        ./ZZIPlib-master.tar.gz)
+#    execute_process(COMMAND cmake -E tar xf ZZIPlib-master.tar.gz)
+#    execute_process(COMMAND cmake
+#        -DCMAKE_INSTALL_PREFIX=${OGREDEPS_PATH}
+#        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
+#        -DZLIB_ROOT=${OGREDEPS_PATH}
+#        -DBUILD_SHARED_LIBS=${OGREDEPS_SHARED}
+#        -G ${CMAKE_GENERATOR}
+#        ${CROSS}
+#        .
+#        WORKING_DIRECTORY ZZIPlib-master)
+#    execute_process(COMMAND cmake --build ZZIPlib-master --target install)
+#    
+#    message(STATUS "Building freetype")
+#    file(DOWNLOAD
+#        http://download.savannah.gnu.org/releases/freetype/freetype-2.6.5.tar.gz
+#        ./freetype-2.6.5.tar.gz)
+#    execute_process(COMMAND cmake -E tar xf freetype-2.6.5.tar.gz)
+#    # patch toolchain for iOS
+#    execute_process(COMMAND cmake -E copy
+#        ${CMAKE_SOURCE_DIR}/CMake/toolchain/ios.toolchain.xcode.cmake
+#        freetype-2.6.5/builds/cmake/iOS.cmake)
+#    execute_process(COMMAND cmake
+#        -DCMAKE_INSTALL_PREFIX=${OGREDEPS_PATH}
+#        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
+#        -DBUILD_SHARED_LIBS=${OGREDEPS_SHARED}
+#        -DWITH_BZip2=OFF # tries to use it on iOS otherwise
+#        # workaround for broken iOS toolchain in freetype
+#        -DPROJECT_SOURCE_DIR=${CMAKE_BINARY_DIR}/freetype-2.6.5
+#        ${CROSS}
+#        -G ${CMAKE_GENERATOR}
+#        ..
+#        WORKING_DIRECTORY freetype-2.6.5/objs)
+#    execute_process(COMMAND cmake --build freetype-2.6.5/objs --target install)
+#endif()
+#### conan patch end
+##########################################################################################
 
 #######################################################################
 # Core dependencies
@@ -162,13 +175,23 @@ macro_log_feature(ZLIB_FOUND "zlib" "Simple data compression library" "http://ww
 
 if (ZLIB_FOUND)
   # Find zziplib
-  find_package(ZZip)
+  find_package(zziplib)
+  ##########################################################################################
+### coann patch begin: make ${ZZip_<VARIABLE>} cmake variables refer to conan ${zziplib_<VARIABLE>}
+set(ZZip_FOUND ${zziplib_FOUND})
+set(ZZip_LIBRARIES ${zziplib_LIBRARIES})
+### coann patch end
+##########################################################################################
   macro_log_feature(ZZip_FOUND "zziplib" "Extract data from zip archives" "http://zziplib.sourceforge.net" FALSE "" "")
 endif ()
 
-# Find FreeImage
-find_package(FreeImage)
-macro_log_feature(FreeImage_FOUND "freeimage" "Support for commonly used graphics image formats" "http://freeimage.sourceforge.net" FALSE "" "")
+# Find freeimage
+find_package(freeimage)
+#if(NOT ${FreeImage_INCLUDE_DIRS} STREQUAL "" AND NOT ${FreeImage_LIBRARIES} STREQUAL "")
+#  set(freeimage_FOUND 1)
+#endif()
+#message(FATAL_ERROR "freeimage_FOUND: ${freeimage_FOUND}")
+macro_log_feature(freeimage_FOUND "freeimage" "Support for commonly used graphics image formats" "http://freeimage.sourceforge.net" FALSE "" "")
 
 # Find FreeType
 find_package(Freetype)
@@ -284,6 +307,15 @@ if(Boost_FOUND AND NOT WIN32)
   list(REMOVE_DUPLICATES Boost_LIBRARIES)
 endif()
 
+###################################################################################
+### conan patch begin: conan recipe for boost doesn't provide the variables Boost_<Component>_FOUND
+## see https://cmake.org/cmake/help/latest/module/FindBoost.html#result-variables
+## and https://github.com/conan-io/conan-center-index/issues/11085
+set(Boost_DATE_TIME_FOUND True)
+set(Boost_THREAD_FOUND True)
+### conan patch end
+###################################################################################
+
 # Optional Boost libs (Boost_${COMPONENT}_FOUND
 macro_log_feature(Boost_FOUND "boost" "Boost (general)" "http://boost.org" FALSE "" "")
 if(NOT Boost_DATE_TIME_FOUND)
@@ -297,9 +329,9 @@ if(Boost_VERSION GREATER 105300 AND NOT Boost_ATOMIC_FOUND)
 endif()
 macro_log_feature(Boost_THREAD_FOUND "boost-thread" "Used for threading support" "http://boost.org" FALSE "" "")
 
-# POCO
-find_package(POCO)
-macro_log_feature(POCO_FOUND "POCO" "POCO framework" "http://pocoproject.org/" FALSE "" "")
+# Poco
+find_package(Poco)
+macro_log_feature(Poco_FOUND "Poco" "Poco framework" "http://pocoproject.org/" FALSE "" "")
 
 # ThreadingBuildingBlocks
 find_package(TBB)
@@ -315,7 +347,7 @@ macro_log_feature(HLSL2GLSL_FOUND "HLSL2GLSL" "HLSL2GLSL" "http://hlsl2glslfork.
 
 # OpenEXR
 find_package(OpenEXR)
-macro_log_feature(OPENEXR_FOUND "OpenEXR" "Load High dynamic range images" "http://www.openexr.com/" FALSE "" "")
+macro_log_feature(OpenEXR_FOUND "OpenEXR" "Load High dynamic range images" "http://www.openexr.com/" FALSE "" "")
 
 # Python
 find_package(PythonLibs)
@@ -330,6 +362,7 @@ macro_log_feature(PYTHONLIBS_FOUND "Python" "Language bindings to use OGRE from
 if(NOT ANDROID)
 # find script does not work in cross compilation environment
 find_package(SDL2)
+set(SDL2_LIBRARY ${SDL2_LIBRARIES})
 macro_log_feature(SDL2_FOUND "SDL2" "Simple DirectMedia Library needed for input handling in samples" "https://www.libsdl.org/" FALSE "" "")
 endif()

@@ -366,7 +398,7 @@ MACRO_DISPLAY_FEATURE_LOG()
 # Add library and include paths from the dependencies
 include_directories(
   ${ZLIB_INCLUDE_DIRS}
-  ${ZZip_INCLUDE_DIRS}
+  ${zziplib_INCLUDE_DIRS}
   ${FreeImage_INCLUDE_DIRS}
   ${FREETYPE_INCLUDE_DIRS}
   ${OPENGL_INCLUDE_DIRS}
diff --git a/CMake/Packages/FindOGRE.cmake b/CMake/Packages/FindOGRE.cmake
index f7c1727f9..d719d853e 100644
--- a/CMake/Packages/FindOGRE.cmake
+++ b/CMake/Packages/FindOGRE.cmake
@@ -265,13 +265,13 @@ if (OGRE_STATIC)
   find_package(Cg QUIET)
   find_package(DirectX QUIET)
   find_package(DirectX11 QUIET)
-  find_package(FreeImage QUIET)
+  find_package(freeimage QUIET)
   find_package(Freetype QUIET)
   find_package(OpenGL QUIET)
   find_package(OpenGLES QUIET)
   find_package(OpenGLES2 QUIET)
   find_package(ZLIB QUIET)
-  find_package(ZZip QUIET)
+  find_package(zziplib QUIET)
   find_package(SDL2 QUIET)
   if (UNIX AND NOT APPLE AND NOT ANDROID)
     find_package(X11 QUIET)
@@ -290,7 +290,7 @@ if (OGRE_STATIC)
   if (NOT ZLIB_FOUND OR NOT ZZip_FOUND)
     set(OGRE_DEPS_FOUND FALSE)
   endif ()
-  if (NOT FreeImage_FOUND AND NOT OGRE_CONFIG_FREEIMAGE)
+  if (NOT freeimage_FOUND AND NOT OGRE_CONFIG_FREEIMAGE)
     set(OGRE_DEPS_FOUND FALSE)
   endif ()
   if (NOT FREETYPE_FOUND)
diff --git a/CMake/PrepareThreadingOptions.cmake b/CMake/PrepareThreadingOptions.cmake
index bdaef8884..74b937a38 100644
--- a/CMake/PrepareThreadingOptions.cmake
+++ b/CMake/PrepareThreadingOptions.cmake
@@ -25,7 +25,7 @@ if (Boost_THREADING AND NOT OGRE_THREAD_SUPPORT_AVAILABLE)
 	set(OGRE_THREAD_TYPE "2")
 endif ()
 
-if (POCO_FOUND AND NOT OGRE_THREAD_SUPPORT_AVAILABLE)
+if (Poco_FOUND AND NOT OGRE_THREAD_SUPPORT_AVAILABLE)
 	set(OGRE_THREAD_SUPPORT_AVAILABLE TRUE)
 	set(OGRE_THREAD_DEFAULT_PROVIDER "poco")
 	set(OGRE_THREAD_TYPE "2")
diff --git a/CMakeLists.txt b/CMakeLists.txt
index 18f295f53..c624ea101 100755
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -52,6 +52,8 @@ set(CMAKE_MODULE_PATH
   "${OGRE_SOURCE_DIR}/CMake"
   "${OGRE_SOURCE_DIR}/CMake/Utils"
   "${OGRE_SOURCE_DIR}/CMake/Packages"
+  "${OGRE_BINARY_DIR}"
+  "${CMAKE_BINARY_DIR}"
 )
 
 if(CMAKE_CROSSCOMPILING)
@@ -212,6 +214,7 @@ endif()
 
 # Add OgreMain include path
 include_directories("${OGRE_SOURCE_DIR}/OgreMain/include")
+set(OGRE_BINARY_DIR ${CMAKE_BINARY_DIR})
 include_directories("${OGRE_BINARY_DIR}/include")
 if (APPLE)
   if (APPLE_IOS)
@@ -363,7 +366,7 @@ cmake_dependent_option(OGRE_BUILD_RENDERSYSTEM_GL "Build OpenGL RenderSystem" TR
 cmake_dependent_option(OGRE_BUILD_RENDERSYSTEM_GLES "Build OpenGL ES 1.x RenderSystem" FALSE "OPENGLES_FOUND;NOT WINDOWS_STORE;NOT WINDOWS_PHONE" FALSE)
 cmake_dependent_option(OGRE_BUILD_RENDERSYSTEM_GLES2 "Build OpenGL ES 2.x RenderSystem" FALSE "OPENGLES2_FOUND;NOT WINDOWS_STORE;NOT WINDOWS_PHONE" FALSE)
 option(OGRE_BUILD_PLUGIN_BSP "Build BSP SceneManager plugin" TRUE)
-cmake_dependent_option(OGRE_BUILD_PLUGIN_EXRCODEC "Build EXR Codec plugin" TRUE "OPENEXR_FOUND" FALSE)
+cmake_dependent_option(OGRE_BUILD_PLUGIN_EXRCODEC "Build EXR Codec plugin" TRUE "OpenEXR_FOUND" FALSE)
 option(OGRE_BUILD_PLUGIN_OCTREE "Build Octree SceneManager plugin" TRUE)
 option(OGRE_BUILD_PLUGIN_PFX "Build ParticleFX plugin" TRUE)
 cmake_dependent_option(OGRE_BUILD_PLUGIN_PCZ "Build PCZ SceneManager plugin" TRUE "" FALSE)
@@ -407,7 +410,7 @@ option(OGRE_CONFIG_MEMTRACK_DEBUG "Enable Ogre's memory tracker in debug mode" F
 option(OGRE_CONFIG_MEMTRACK_RELEASE "Enable Ogre's memory tracker in release mode" FALSE)
 # determine threading options
 include(PrepareThreadingOptions)
-cmake_dependent_option(OGRE_CONFIG_ENABLE_FREEIMAGE "Build FreeImage codec." TRUE "FreeImage_FOUND" FALSE)
+cmake_dependent_option(OGRE_CONFIG_ENABLE_FREEIMAGE "Build FreeImage codec." TRUE "freeimage_FOUND" FALSE)
 cmake_dependent_option(OGRE_CONFIG_ENABLE_STBI "Enable STBI image codec." TRUE "NOT OGRE_CONFIG_ENABLE_FREEIMAGE" FALSE)
 option(OGRE_CONFIG_ENABLE_MESHLOD "Enable Mesh Lod." TRUE)
 option(OGRE_CONFIG_ENABLE_DDS "Build DDS codec." TRUE)
diff --git a/Components/HLMS/CMakeLists.txt b/Components/HLMS/CMakeLists.txt
index c10a77a5e..f8b962a9e 100644
--- a/Components/HLMS/CMakeLists.txt
+++ b/Components/HLMS/CMakeLists.txt
@@ -14,7 +14,7 @@
 PROJECT(OgreHLMS)
 
 # define header and source files for the library
-file(GLOB HEADER_FILES "${CMAKE_CURRENT_SOURCE_DIR}/include/*.h" ${CMAKE_BINARY_DIR}/include/OgreHlmsPrerequisites.h)
+file(GLOB HEADER_FILES "${CMAKE_CURRENT_SOURCE_DIR}/include/*.h")
 file(GLOB SOURCE_FILES "${CMAKE_CURRENT_SOURCE_DIR}/src/*.cpp")
 
 # Add needed definitions 
@@ -43,3 +43,7 @@ ogre_config_component(OgreHLMS)
 install(FILES ${HEADER_FILES}
   DESTINATION include/OGRE/HLMS
 )
+
+install(FILES ${CMAKE_BINARY_DIR}/include/OgreHlmsPrerequisites.h
+  DESTINATION include/OGRE/HLMS
+)
\ No newline at end of file
diff --git a/Components/Overlay/CMakeLists.txt b/Components/Overlay/CMakeLists.txt
index 0ee9f3d8c..d973798e6 100644
--- a/Components/Overlay/CMakeLists.txt
+++ b/Components/Overlay/CMakeLists.txt
@@ -40,3 +40,7 @@ ogre_config_component(OgreOverlay)
 install(FILES ${HEADER_FILES}
   DESTINATION include/OGRE/Overlay
 )
+
+install(FILES ${CMAKE_BINARY_DIR}/include/OgreOverlayPrerequisites.h
+  DESTINATION include/OGRE/Overlay
+)
\ No newline at end of file
diff --git a/Components/Property/CMakeLists.txt b/Components/Property/CMakeLists.txt
index 97d481748..1b2f2640a 100644
--- a/Components/Property/CMakeLists.txt
+++ b/Components/Property/CMakeLists.txt
@@ -16,7 +16,6 @@ PROJECT(OgreProperty)
 # define header and source files for the library
 set (HEADER_FILES
 	include/OgreProperty.h
-	${CMAKE_BINARY_DIR}/include/OgrePropertyPrerequisites.h
 )
 
 set (SOURCE_FILES
@@ -47,3 +46,7 @@ ogre_config_component(OgreProperty)
 install(FILES ${HEADER_FILES}
   DESTINATION include/OGRE/Property
 )
+
+install(FILES ${CMAKE_BINARY_DIR}/include/OgrePropertyPrerequisites.h
+  DESTINATION include/OGRE/Property
+)
diff --git a/Components/Volume/CMakeLists.txt b/Components/Volume/CMakeLists.txt
index 998f9702f..7d4c239eb 100644
--- a/Components/Volume/CMakeLists.txt
+++ b/Components/Volume/CMakeLists.txt
@@ -14,7 +14,7 @@
 PROJECT(OgreVolume)
 
 # define header and source files for the library
-file(GLOB HEADER_FILES "${CMAKE_CURRENT_SOURCE_DIR}/include/*.h" ${CMAKE_BINARY_DIR}/include/OgreVolumePrerequisites.h)
+file(GLOB HEADER_FILES "${CMAKE_CURRENT_SOURCE_DIR}/include/*.h")
 file(GLOB SOURCE_FILES "${CMAKE_CURRENT_SOURCE_DIR}/src/*.cpp")
 
 # include headers
@@ -40,3 +40,7 @@ ogre_config_component(OgreVolume)
 install(FILES ${HEADER_FILES}
   DESTINATION include/OGRE/Volume
 )
+
+install(FILES ${CMAKE_BINARY_DIR}/include/OgreVolumePrerequisites.h
+  DESTINATION include/OGRE/Volume
+)
\ No newline at end of file
diff --git a/PlugIns/EXRCodec/CMakeLists.txt b/PlugIns/EXRCodec/CMakeLists.txt
index ed4bc7df9..0a7a1a250 100644
--- a/PlugIns/EXRCodec/CMakeLists.txt
+++ b/PlugIns/EXRCodec/CMakeLists.txt
@@ -11,7 +11,8 @@ file(GLOB HEADER_FILES "${CMAKE_CURRENT_SOURCE_DIR}/include/*.h" ${CMAKE_BINARY_
 file(GLOB SOURCE_FILES "${CMAKE_CURRENT_SOURCE_DIR}/src/*.cpp")
 
 include_directories(${CMAKE_CURRENT_SOURCE_DIR}/include)
-include_directories(SYSTEM ${OPENEXR_INCLUDE_DIR}/OpenEXR)
+### include the conan OpenEXR_INCLUDE_DIR instead of system OpenEXR_INCLUDE_DIR
+include_directories(SYSTEM ${OpenEXR_INCLUDE_DIR}/OpenEXR)
 
 ogre_add_library_to_folder(Plugins Plugin_EXRCodec ${OGRE_LIB_TYPE} ${HEADER_FILES} ${SOURCE_FILES})
 target_link_libraries(Plugin_EXRCodec OgreMain ${OPENEXR_LIBRARIES})
