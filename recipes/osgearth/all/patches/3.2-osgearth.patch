diff --git a/CMakeLists.txt b/CMakeLists.txt
index 8be494611..6ca8d4366 100755
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -128,28 +128,18 @@ ELSE ()
 ENDIF (OSGEARTH_USE_GLES)
 
 # required
-find_package(OSG REQUIRED)
 find_package(CURL REQUIRED)
 find_package(GDAL REQUIRED)
 
 # optional
-find_package(GEOS)
-find_package(Sqlite3)
-find_package(Draco)
-find_package(BASISU)
 find_package(GLEW)
 find_package(Protobuf)
-find_package(WEBP)
 find_package(Blend2D)
 
 if(OSGEARTH_ENABLE_PROFILING)
     find_package(Tracy)
 endif()
 
-if(OSGEARTH_BUILD_ZIP_PLUGIN)
-    find_package(LIBZIP)
-endif()
-
 if(OSGEARTH_BUILD_TRITON_NODEKIT)
     find_package(Triton QUIET)
 endif()
@@ -216,7 +206,8 @@ SET(CMAKE_MINSIZEREL_POSTFIX "s" CACHE STRING "add a MinSizeRel postfix, usually
 INCLUDE(OsgEarthMacroUtils)
 
 # OpenSceneGraph is the 3D rendering toolkit
-DETECT_OSG_VERSION()
+set(OPENSCENEGRAPH_VERSION "3.6.5")
+set(OSG_PLUGINS "osgPlugins-${OPENSCENEGRAPH_VERSION}"  CACHE STRING "" FORCE)
 
 IF (NOT OPENSCENEGRAPH_VERSION)
 	SET(OPENSCENEGRAPH_VERSION ${OPENSCENEGRAPH_MAJOR_VERSION}.${OPENSCENEGRAPH_MINOR_VERSION}.${OPENSCENEGRAPH_PATCH_VERSION})
diff --git a/CMakeModules/OsgEarthMacroUtils.cmake b/CMakeModules/OsgEarthMacroUtils.cmake
index 036e8537a..3874cd030 100644
--- a/CMakeModules/OsgEarthMacroUtils.cmake
+++ b/CMakeModules/OsgEarthMacroUtils.cmake
@@ -505,7 +505,7 @@ macro(configure_shaders templateFile autoGenCppFile)
 
 	# generate the build-time script that will create out cpp file with inline shaders:
 	configure_file(
-		"${CMAKE_SOURCE_DIR}/CMakeModules/ConfigureShaders.cmake.in"
+		"${CMAKE_SOURCE_DIR}/source_subfolder/CMakeModules/ConfigureShaders.cmake.in"
 		"${CMAKE_CURRENT_BINARY_DIR}/ConfigureShaders.cmake"
 		@ONLY)
 
@@ -518,7 +518,7 @@ macro(configure_shaders templateFile autoGenCppFile)
 		DEPENDS
 			${GLSL_FILES}
 			"${TEMPLATE_FILE}"
-			"${CMAKE_SOURCE_DIR}/CMakeModules/ConfigureShaders.cmake.in" )
+			"${CMAKE_SOURCE_DIR}/source_subfolder/CMakeModules/ConfigureShaders.cmake.in" )
 
 endmacro(configure_shaders)
 
diff --git a/src/osgEarth/CMakeLists.txt b/src/osgEarth/CMakeLists.txt
index cd55c1164..75d17c8ba 100644
--- a/src/osgEarth/CMakeLists.txt
+++ b/src/osgEarth/CMakeLists.txt
@@ -494,7 +494,7 @@ ENDIF (NOT TINYXML_FOUND)
 
 
 SET(VERSION_GIT_SOURCE "")
-find_package(git)
+find_package(Git)
 if (GIT_FOUND)
     option(OSGEARTH_EMBED_GIT_SHA "Encode the SHA in the Version header code" OFF)
     if(OSGEARTH_EMBED_GIT_SHA)
diff --git a/src/osgEarth/Units b/src/osgEarth/Units
index dd19afe84..bfe826abb 100644
--- a/src/osgEarth/Units
+++ b/src/osgEarth/Units
@@ -196,17 +196,17 @@ namespace osgEarth
     class qualified_double
     {
     public:
-        qualified_double<T>( double value, const Units& units ) : _value(value), _units(units) { }
+        qualified_double( double value, const Units& units ) : _value(value), _units(units) { }
 
-        qualified_double<T>( const T& rhs ) : _value(rhs._value), _units(rhs._units) { }
+        qualified_double( const T& rhs ) : _value(rhs._value), _units(rhs._units) { }
 
         // parses the qualified number from a parseable string (e.g., "123km")
-        qualified_double<T>(const std::string& parseable, const Units& defaultUnits) : _value(0.0), _units(defaultUnits) {
+        qualified_double(const std::string& parseable, const Units& defaultUnits) : _value(0.0), _units(defaultUnits) {
             Units::parse( parseable, _value, _units, defaultUnits );
         }
 
         // loads the qualified number from an old-school config (e.g., { value="123" units="km" } )
-        qualified_double<T>( const Config& conf, const Units& defaultUnits ) : _value(0.0) {
+        qualified_double( const Config& conf, const Units& defaultUnits ) : _value(0.0) {
             if ( conf.hasValue("value") ) {
                 _value = conf.value<double>("value", 0.0);
                 if ( !Units::parse( conf.value("units"), _units ) )
diff --git a/src/osgEarthDrivers/cache_leveldb/CMakeLists.txt b/src/osgEarthDrivers/cache_leveldb/CMakeLists.txt
index 5502de8c3..ec5869f12 100644
--- a/src/osgEarthDrivers/cache_leveldb/CMakeLists.txt
+++ b/src/osgEarthDrivers/cache_leveldb/CMakeLists.txt
@@ -1,5 +1,3 @@
-FIND_PACKAGE(LevelDB)
-
 IF(LEVELDB_FOUND)
 
     INCLUDE_DIRECTORIES( ${LEVELDB_INCLUDE_DIR} )
diff --git a/src/osgEarthProcedural/CMakeLists.txt b/src/osgEarthProcedural/CMakeLists.txt
index 8f9a10c49..69109e169 100644
--- a/src/osgEarthProcedural/CMakeLists.txt
+++ b/src/osgEarthProcedural/CMakeLists.txt
@@ -102,4 +102,5 @@ LINK_CORELIB_DEFAULT(
 # Add this project to the NodeKits solution folder
 set_property( TARGET ${LIB_NAME} PROPERTY FOLDER "NodeKits" )
 
-INCLUDE(ModuleInstall OPTIONAL)
\ No newline at end of file
+INCLUDE(ModuleInstall OPTIONAL)
+INCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR}/source_subfolder/src/osgEarth)
\ No newline at end of file
diff --git a/src/osgEarthProcedural/GroundCoverLayer.cpp b/src/osgEarthProcedural/GroundCoverLayer.cpp
index d22373194..2049b8dfe 100644
--- a/src/osgEarthProcedural/GroundCoverLayer.cpp
+++ b/src/osgEarthProcedural/GroundCoverLayer.cpp
@@ -1329,7 +1329,8 @@ GroundCoverLayer::Renderer::CameraStateRGLO::operator()(
 void
 GroundCoverLayer::Renderer::releaseGLObjects(osg::State* state) const
 {
-    _cameraState.forEach(CameraStateRGLO(state));
+    CameraStateRGLO state_rglo(state);
+    _cameraState.forEach(state_rglo);
 
     if (_texArena.valid())
     {
diff --git a/src/osgEarthProcedural/LifeMapLayer.cpp b/src/osgEarthProcedural/LifeMapLayer.cpp
index bfc541dd5..e150eea51 100644
--- a/src/osgEarthProcedural/LifeMapLayer.cpp
+++ b/src/osgEarthProcedural/LifeMapLayer.cpp
@@ -206,7 +206,7 @@ namespace
             std::vector<osg::ref_ptr<Feature>> hits;
 
             if (_index.Search(a_min, a_max, &hits, ~0) == 0)
-                return false;
+                return nullptr;
 
             const LifeMapValue* result = nullptr;
 
@@ -223,7 +223,7 @@ namespace
                         return result;
                 }
             }
-            return false;
+            return nullptr;
         }
     };
 }
