--- a/fuzz/mosaic_fuzzer.cc
+++ b/fuzz/mosaic_fuzzer.cc
@@ -1,13 +1,21 @@
 #include <cstring>
 #include <vips/vips.h>
 
-struct mosaic_opt {
+#ifdef __GNUC__
+#define PACK( ... ) __VA_ARGS__ __attribute__((__packed__))
+#elif defined(_MSC_VER)
+#define PACK( ... ) __pragma( pack(push, 1) ) __VA_ARGS__ __pragma( pack(pop) )
+#else
+#define PACK( ... ) __VA_ARGS__
+#endif
+
+PACK(struct mosaic_opt {
 	guint8 dir : 1;
 	guint16 xref;
 	guint16 yref;
 	guint16 xsec;
 	guint16 ysec;
-} __attribute__ ((packed));
+});
 
 extern "C" int
 LLVMFuzzerInitialize( int *argc, char ***argv )
--- a/libvips/conversion/composite.cpp
+++ b/libvips/conversion/composite.cpp
@@ -480,7 +480,7 @@ vips_composite_base_select( VipsCompositeSequence *seq, VipsRect *r )
 template <typename T>
 static void
 vips_composite_base_blend( VipsCompositeBase *composite, 
-	VipsBlendMode mode, double * restrict B, T * restrict p )
+	VipsBlendMode mode, double * __restrict B, T * __restrict p )
 {
 	const int bands = composite->bands;
 
@@ -728,7 +728,7 @@ vips_composite_base_blend( VipsCompositeBase *composite,
 template <typename T>
 static void
 vips_composite_base_blend3( VipsCompositeSequence *seq,
-	VipsBlendMode mode, v4f &B, T * restrict p )
+	VipsBlendMode mode, v4f &B, T * __restrict p )
 {
 	VipsCompositeBase *composite = seq->composite;
 
@@ -963,8 +963,8 @@ vips_combine_pixels( VipsCompositeSequence *seq, VipsPel *q )
 	int n_mode = composite->mode->area.n;
 	int n = seq->n;
 	int bands = composite->bands;
-	T * restrict tq = (T * restrict) q;
-	T ** restrict tp = (T ** restrict) seq->p;
+	T * __restrict tq = (T * __restrict) q;
+	T ** __restrict tp = (T ** __restrict) seq->p;
 
 	double B[MAX_BANDS + 1];
 	double aB;
@@ -1027,8 +1027,8 @@ vips_combine_pixels3( VipsCompositeSequence *seq, VipsPel *q )
 	VipsBlendMode *mode = (VipsBlendMode *) composite->mode->area.data;
 	int n_mode = composite->mode->area.n;
 	int n = seq->n;
-	T * restrict tq = (T * restrict) q;
-	T ** restrict tp = (T ** restrict) seq->p;
+	T * __restrict tq = (T * __restrict) q;
+	T ** __restrict tp = (T ** __restrict) seq->p;
 
 	v4f B;
 	float aB;
--- a/libvips/conversion/meson.build
+++ b/libvips/conversion/meson.build
@@ -53,7 +53,6 @@ conversion_lib = static_library('conversion',
     conversion_sources,
     conversion_headers,
     dependencies: libvips_deps,
-    c_args: [ '-Wno-unknown-pragmas' ],
     gnu_symbol_visibility: 'hidden',
 )
 
--- a/libvips/foreign/magick.c
+++ b/libvips/foreign/magick.c
@@ -150,7 +150,7 @@ magick_set_image_size( Image *image, const size_t width, const size_t height,
 }
 
 int
-magick_import_pixels( Image *image, const ssize_t x, const ssize_t y,
+magick_import_pixels( Image *image, const gssize x, const gssize y,
 	const size_t width, const size_t height, const char *map,
 	const StorageType type,const void *pixels, ExceptionInfo *exception )
 {
@@ -358,7 +358,7 @@ magick_set_image_size( Image *image, const size_t width, const size_t height,
 }
 
 int
-magick_import_pixels( Image *image, const ssize_t x, const ssize_t y,
+magick_import_pixels( Image *image, const gssize x, const gssize y,
 	const size_t width, const size_t height, const char *map,
 	const StorageType type, const void *pixels, ExceptionInfo *exception )
 {
--- a/libvips/foreign/magick.h
+++ b/libvips/foreign/magick.h
@@ -48,7 +48,7 @@ void magick_acquire_next_image( const ImageInfo *image_info,
 	Image *image, ExceptionInfo *exception );
 int magick_set_image_size( Image *image, 
 	const size_t width, const size_t height, ExceptionInfo *exception );
-int magick_import_pixels( Image *image, const ssize_t x, const ssize_t y,
+int magick_import_pixels( Image *image, const gssize x, const gssize y,
 	const size_t width, const size_t height, const char *map,
 	const StorageType type,const void *pixels, ExceptionInfo *exception );
 void *magick_images_to_blob( const ImageInfo *image_info, Image *images, 
--- a/libvips/foreign/niftiload.c
+++ b/libvips/foreign/niftiload.c
@@ -373,7 +373,7 @@ vips_foreign_load_nifti_set( const char *name, GValue *value, glong offset,
 
 	char vips_name[256];
 
-	vips_gvalue_read( value, (gpointer) nim + offset );
+	vips_gvalue_read( value, (char *) nim + offset );
 	vips_snprintf( vips_name, 256, "nifti-%s", name );
 	vips_image_set( out, vips_name, value );
 
--- a/libvips/foreign/niftisave.c
+++ b/libvips/foreign/niftisave.c
@@ -221,7 +221,7 @@ vips_foreign_save_nifti_set_fields( const char *name,
 		vips_snprintf( vips_name, 256, "nifti-%s", name );
 		if( vips_image_get( info->image, vips_name, &value_copy ) )
 			return( info );
-		vips_gvalue_write( &value_copy, (gpointer) info->nim + offset );
+		vips_gvalue_write( &value_copy, (char *) info->nim + offset );
 		g_value_unset( &value_copy );
 	}
 
--- a/libvips/include/vips/internal.h
+++ b/libvips/include/vips/internal.h
@@ -326,10 +326,10 @@ char *vips__xml_properties( VipsImage *image );
 /* TODO(kleisauke): VIPS_API is required by the poppler module.
  */
 VIPS_API
-void vips__premultiplied_bgra2rgba( guint32 * restrict p, int n );
+void vips__premultiplied_bgra2rgba( guint32 *p, int n );
 VIPS_API
-void vips__rgba2bgra_premultiplied( guint32 * restrict p, int n );
-void vips__bgra2rgba( guint32 * restrict p, int n );
+void vips__rgba2bgra_premultiplied( guint32 *p, int n );
+void vips__bgra2rgba( guint32 *p, int n );
 void vips__Lab2LabQ_vec( VipsPel *out, float *in, int width );
 void vips__LabQ2Lab_vec( float *out, VipsPel *in, int width );
 
--- a/libvips/iofuncs/mapfile.c
+++ b/libvips/iofuncs/mapfile.c
@@ -89,6 +89,10 @@
 #include <io.h>
 #endif /*G_OS_WIN32*/
 
+#ifdef _MSC_VER
+#define mode_t guint16
+#endif
+
 /* Does this fd support mmap. Pipes won't, for example.
  * FIXME unused internal function
  */
--- a/libvips/iofuncs/vips.c
+++ b/libvips/iofuncs/vips.c
@@ -480,7 +480,7 @@ read_chunk( int fd, gint64 offset, size_t length )
 		return( NULL );
 	if( !(buf = vips_malloc( NULL, length + 1 )) )
 		return( NULL );
-	if( read( fd, buf, length ) != (ssize_t) length ) {
+	if( read( fd, buf, length ) != (gssize) length ) {
 		g_free( buf );
 		vips_error( "VipsImage", "%s", _( "unable to read history" ) );
 		return( NULL );
--- a/libvips/resample/bicubic.cpp
+++ b/libvips/resample/bicubic.cpp
@@ -109,8 +109,8 @@ bicubic_unsigned_int_tab( void *pout, const VipsPel *pin,
 	const int bands, const int lskip,
 	const int *cx, const int *cy )
 {
-	T* restrict out = (T *) pout;
-	const T* restrict in = (T *) pin;
+	T* __restrict out = (T *) pout;
+	const T* __restrict in = (T *) pin;
 
 	const int b1 = bands;
 	const int b2 = b1 + b1;
@@ -172,8 +172,8 @@ bicubic_signed_int_tab( void *pout, const VipsPel *pin,
 	const int bands, const int lskip,
 	const int *cx, const int *cy )
 {
-	T* restrict out = (T *) pout;
-	const T* restrict in = (T *) pin;
+	T* __restrict out = (T *) pout;
+	const T* __restrict in = (T *) pin;
 
 	const int b1 = bands;
 	const int b2 = b1 + b1;
@@ -237,8 +237,8 @@ bicubic_float_tab( void *pout, const VipsPel *pin,
 	const int bands, const int lskip,
 	const double *cx, const double *cy )
 {
-	T* restrict out = (T *) pout;
-	const T* restrict in = (T *) pin;
+	T* __restrict out = (T *) pout;
+	const T* __restrict in = (T *) pin;
 
 	const int b1 = bands;
 	const int b2 = b1 + b1;
@@ -301,8 +301,8 @@ bicubic_unsigned_int32_tab( void *pout, const VipsPel *pin,
 	const int bands, const int lskip,
 	const double *cx, const double *cy )
 {
-	T* restrict out = (T *) pout;
-	const T* restrict in = (T *) pin;
+	T* __restrict out = (T *) pout;
+	const T* __restrict in = (T *) pin;
 
 	const int b1 = bands;
 	const int b2 = b1 + b1;
@@ -364,8 +364,8 @@ bicubic_signed_int32_tab( void *pout, const VipsPel *pin,
 	const int bands, const int lskip,
 	const double *cx, const double *cy )
 {
-	T* restrict out = (T *) pout;
-	const T* restrict in = (T *) pin;
+	T* __restrict out = (T *) pout;
+	const T* __restrict in = (T *) pin;
 
 	const int b1 = bands;
 	const int b2 = b1 + b1;
@@ -429,8 +429,8 @@ bicubic_notab( void *pout, const VipsPel *pin,
 	const int bands, const int lskip,
 	double x, double y )
 {
-	T* restrict out = (T *) pout;
-	const T* restrict in = (T *) pin;
+	T* __restrict out = (T *) pout;
+	const T* __restrict in = (T *) pin;
 
 	const int b1 = bands;
 	const int b2 = b1 + b1;
--- a/libvips/resample/lbb.cpp
+++ b/libvips/resample/lbb.cpp
@@ -581,16 +581,16 @@ lbbicubic( const double c00,
  */
 #define LBB_CONVERSION( conversion )                     \
   template <typename T> static void inline               \
-  lbb_ ## conversion(       void*      restrict pout,    \
-                      const VipsPel*   restrict pin,     \
+  lbb_ ## conversion(       void*      __restrict pout,    \
+                      const VipsPel*   __restrict pin,     \
                       const int             bands,       \
                       const int             lskip,       \
                       const double          relative_x,  \
                       const double          relative_y ) \
   { \
-    T* restrict out = (T *) pout; \
+    T* __restrict out = (T *) pout; \
     \
-    const T* restrict in = (T *) pin; \
+    const T* __restrict in = (T *) pin; \
     \
     const int one_shift     =  -bands; \
     const int thr_shift     =   bands; \
@@ -762,9 +762,9 @@ G_DEFINE_TYPE( VipsInterpolateLbb, vips_interpolate_lbb,
 }
 
 static void
-vips_interpolate_lbb_interpolate( VipsInterpolate* restrict interpolate,
-                                  void*            restrict out,
-                                  VipsRegion*      restrict in,
+vips_interpolate_lbb_interpolate( VipsInterpolate* __restrict interpolate,
+                                  void*            __restrict out,
+                                  VipsRegion*      __restrict in,
                                   double                    absolute_x,
                                   double                    absolute_y )
 {
@@ -781,7 +781,7 @@ vips_interpolate_lbb_interpolate( VipsInterpolate* restrict interpolate,
    * 2x2 group of pixel centers which contains the sampling location
    * in its convex hull:
    */
-  const VipsPel* restrict p = VIPS_REGION_ADDR( in, ix, iy );
+  const VipsPel* __restrict p = VIPS_REGION_ADDR( in, ix, iy );
 
   const double relative_x = absolute_x - ix;
   const double relative_y = absolute_y - iy;
--- a/libvips/resample/nohalo.cpp
+++ b/libvips/resample/nohalo.cpp
@@ -345,22 +345,22 @@ nohalo_subdivision (const double           uno_two,
                     const double           cin_two,
                     const double           cin_thr,
                     const double           cin_fou,
-                          double* restrict uno_one_1,
-                          double* restrict uno_two_1,
-                          double* restrict uno_thr_1,
-                          double* restrict uno_fou_1,
-                          double* restrict dos_one_1,
-                          double* restrict dos_two_1,
-                          double* restrict dos_thr_1,
-                          double* restrict dos_fou_1,
-                          double* restrict tre_one_1,
-                          double* restrict tre_two_1,
-                          double* restrict tre_thr_1,
-                          double* restrict tre_fou_1,
-                          double* restrict qua_one_1,
-                          double* restrict qua_two_1,
-                          double* restrict qua_thr_1,
-                          double* restrict qua_fou_1)
+                          double* __restrict uno_one_1,
+                          double* __restrict uno_two_1,
+                          double* __restrict uno_thr_1,
+                          double* __restrict uno_fou_1,
+                          double* __restrict dos_one_1,
+                          double* __restrict dos_two_1,
+                          double* __restrict dos_thr_1,
+                          double* __restrict dos_fou_1,
+                          double* __restrict tre_one_1,
+                          double* __restrict tre_two_1,
+                          double* __restrict tre_thr_1,
+                          double* __restrict tre_fou_1,
+                          double* __restrict qua_one_1,
+                          double* __restrict qua_two_1,
+                          double* __restrict qua_thr_1,
+                          double* __restrict qua_fou_1)
 {
   /*
    * nohalo_subdivision calculates the missing twelve double density
@@ -1228,16 +1228,16 @@ lbbicubic( const double c00,
  */
 #define NOHALO_CONVERSION( conversion )               \
   template <typename T> static void inline            \
-  nohalo_ ## conversion(       void*  restrict pout,  \
-                         const void*  restrict pin,   \
+  nohalo_ ## conversion(       void*  __restrict pout,  \
+                         const void*  __restrict pin,   \
                          const int             bands, \
                          const int             lskip, \
                          const double          x_0,   \
                          const double          y_0 )  \
   { \
-    T* restrict out = (T *) pout; \
+    T* __restrict out = (T *) pout; \
     \
-    const T* restrict in = (T *) pin; \
+    const T* __restrict in = (T *) pin; \
     \
     \
     const int sign_of_x_0 = 2 * ( x_0 >= 0. ) - 1; \
@@ -1482,9 +1482,9 @@ G_DEFINE_TYPE( VipsInterpolateNohalo, vips_interpolate_nohalo,
 
 
 static void
-vips_interpolate_nohalo_interpolate( VipsInterpolate* restrict interpolate,
-                                     void*            restrict out,
-                                     VipsRegion*      restrict in,
+vips_interpolate_nohalo_interpolate( VipsInterpolate* __restrict interpolate,
+                                     void*            __restrict out,
+                                     VipsRegion*      __restrict in,
                                      double                    absolute_x,
                                      double                    absolute_y )
 {
@@ -1501,7 +1501,7 @@ vips_interpolate_nohalo_interpolate( VipsInterpolate* restrict interpolate,
    * 2x2 group of pixel centers which contains the sampling location
    * in its convex hull:
    */
-  const VipsPel* restrict p = VIPS_REGION_ADDR( in, ix, iy );
+  const VipsPel* __restrict p = VIPS_REGION_ADDR( in, ix, iy );
 
   const double relative_x = absolute_x - ix;
   const double relative_y = absolute_y - iy;
--- a/libvips/resample/reduceh.cpp
+++ b/libvips/resample/reduceh.cpp
@@ -174,10 +174,10 @@ template <typename T, int max_value>
 static void inline
 reduceh_unsigned_int_tab( VipsReduceh *reduceh,
 	VipsPel *pout, const VipsPel *pin,
-	const int bands, const int * restrict cx )
+	const int bands, const int * __restrict cx )
 {
-	T* restrict out = (T *) pout;
-	const T* restrict in = (T *) pin;
+	T* __restrict out = (T *) pout;
+	const T* __restrict in = (T *) pin;
 	const int n = reduceh->n_point;
 
 	for( int z = 0; z < bands; z++ ) {
@@ -195,10 +195,10 @@ template <typename T, int min_value, int max_value>
 static void inline
 reduceh_signed_int_tab( VipsReduceh *reduceh,
 	VipsPel *pout, const VipsPel *pin,
-	const int bands, const int * restrict cx )
+	const int bands, const int * __restrict cx )
 {
-	T* restrict out = (T *) pout;
-	const T* restrict in = (T *) pin;
+	T* __restrict out = (T *) pout;
+	const T* __restrict in = (T *) pin;
 	const int n = reduceh->n_point;
 
 	for( int z = 0; z < bands; z++ ) {
@@ -220,8 +220,8 @@ reduceh_float_tab( VipsReduceh *reduceh,
 	VipsPel *pout, const VipsPel *pin,
 	const int bands, const double *cx )
 {
-	T* restrict out = (T *) pout;
-	const T* restrict in = (T *) pin;
+	T* __restrict out = (T *) pout;
+	const T* __restrict in = (T *) pin;
 	const int n = reduceh->n_point;
 
 	for( int z = 0; z < bands; z++ )
@@ -235,10 +235,10 @@ template <typename T, int max_value>
 static void inline
 reduceh_unsigned_int32_tab( VipsReduceh *reduceh,
 	VipsPel *pout, const VipsPel *pin,
-	const int bands, const double * restrict cx )
+	const int bands, const double * __restrict cx )
 {
-	T* restrict out = (T *) pout;
-	const T* restrict in = (T *) pin;
+	T* __restrict out = (T *) pout;
+	const T* __restrict in = (T *) pin;
 	const int n = reduceh->n_point;
 
 	for( int z = 0; z < bands; z++ ) {
@@ -253,10 +253,10 @@ template <typename T, int min_value, int max_value>
 static void inline
 reduceh_signed_int32_tab( VipsReduceh *reduceh,
 	VipsPel *pout, const VipsPel *pin,
-	const int bands, const double * restrict cx )
+	const int bands, const double * __restrict cx )
 {
-	T* restrict out = (T *) pout;
-	const T* restrict in = (T *) pin;
+	T* __restrict out = (T *) pout;
+	const T* __restrict in = (T *) pin;
 	const int n = reduceh->n_point;
 
 	for( int z = 0; z < bands; z++ ) {
@@ -276,8 +276,8 @@ reduceh_notab( VipsReduceh *reduceh,
 	VipsPel *pout, const VipsPel *pin,
 	const int bands, double x )
 {
-	T* restrict out = (T *) pout;
-	const T* restrict in = (T *) pin;
+	T* __restrict out = (T *) pout;
+	const T* __restrict in = (T *) pin;
 	const int n = reduceh->n_point;
 
 	double cx[MAX_POINT];
--- a/libvips/resample/reducev.cpp
+++ b/libvips/resample/reducev.cpp
@@ -386,10 +386,10 @@ template <typename T, int max_value>
 static void inline
 reducev_unsigned_int_tab( VipsReducev *reducev,
 	VipsPel *pout, const VipsPel *pin,
-	const int ne, const int lskip, const int * restrict cy )
+	const int ne, const int lskip, const int * __restrict cy )
 {
-	T* restrict out = (T *) pout;
-	const T* restrict in = (T *) pin;
+	T* __restrict out = (T *) pout;
+	const T* __restrict in = (T *) pin;
 	const int n = reducev->n_point;
 	const int l1 = lskip / sizeof( T );
 
@@ -408,10 +408,10 @@ template <typename T, int min_value, int max_value>
 static void inline
 reducev_signed_int_tab( VipsReducev *reducev,
 	VipsPel *pout, const VipsPel *pin,
-	const int ne, const int lskip, const int * restrict cy )
+	const int ne, const int lskip, const int * __restrict cy )
 {
-	T* restrict out = (T *) pout;
-	const T* restrict in = (T *) pin;
+	T* __restrict out = (T *) pout;
+	const T* __restrict in = (T *) pin;
 	const int n = reducev->n_point;
 	const int l1 = lskip / sizeof( T );
 
@@ -432,10 +432,10 @@ template <typename T>
 static void inline
 reducev_float_tab( VipsReducev *reducev,
 	VipsPel *pout, const VipsPel *pin,
-	const int ne, const int lskip, const double * restrict cy )
+	const int ne, const int lskip, const double * __restrict cy )
 {
-	T* restrict out = (T *) pout;
-	const T* restrict in = (T *) pin;
+	T* __restrict out = (T *) pout;
+	const T* __restrict in = (T *) pin;
 	const int n = reducev->n_point;
 	const int l1 = lskip / sizeof( T );
 
@@ -450,10 +450,10 @@ template <typename T, int max_value>
 static void inline
 reducev_unsigned_int32_tab( VipsReducev *reducev,
 	VipsPel *pout, const VipsPel *pin,
-	const int ne, const int lskip, const double * restrict cy )
+	const int ne, const int lskip, const double * __restrict cy )
 {
-	T* restrict out = (T *) pout;
-	const T* restrict in = (T *) pin;
+	T* __restrict out = (T *) pout;
+	const T* __restrict in = (T *) pin;
 	const int n = reducev->n_point;
 	const int l1 = lskip / sizeof( T );
 
@@ -469,10 +469,10 @@ template <typename T, int min_value, int max_value>
 static void inline
 reducev_signed_int32_tab( VipsReducev *reducev,
 	VipsPel *pout, const VipsPel *pin,
-	const int ne, const int lskip, const double * restrict cy )
+	const int ne, const int lskip, const double * __restrict cy )
 {
-	T* restrict out = (T *) pout;
-	const T* restrict in = (T *) pin;
+	T* __restrict out = (T *) pout;
+	const T* __restrict in = (T *) pin;
 	const int n = reducev->n_point;
 	const int l1 = lskip / sizeof( T );
 
@@ -492,8 +492,8 @@ reducev_notab( VipsReducev *reducev,
 	VipsPel *pout, const VipsPel *pin,
 	const int ne, const int lskip, double y )
 {
-	T* restrict out = (T *) pout;
-	const T* restrict in = (T *) pin;
+	T* __restrict out = (T *) pout;
+	const T* __restrict in = (T *) pin;
 	const int n = reducev->n_point;
 	const int l1 = lskip / sizeof( T );
 
--- a/libvips/resample/templates.h
+++ b/libvips/resample/templates.h
@@ -162,7 +162,7 @@ bicubic_unsigned_int(
 	const T dos_one, const T dos_two, const T dos_thr, const T dos_fou,
 	const T tre_one, const T tre_two, const T tre_thr, const T tre_fou,
 	const T qua_one, const T qua_two, const T qua_thr, const T qua_fou,
-	const int* restrict cx, const int* restrict cy )
+	const int* __restrict cx, const int* __restrict cy )
 {
 	const int c0 = cx[0];
 	const int c1 = cx[1];
@@ -214,7 +214,7 @@ bicubic_signed_int(
 	const T dos_one, const T dos_two, const T dos_thr, const T dos_fou,
 	const T tre_one, const T tre_two, const T tre_thr, const T tre_fou,
 	const T qua_one, const T qua_two, const T qua_thr, const T qua_fou,
-	const int* restrict cx, const int* restrict cy )
+	const int* __restrict cx, const int* __restrict cy )
 {
 	const int c0 = cx[0];
 	const int c1 = cx[1];
@@ -252,7 +252,7 @@ bicubic_signed_int(
 template <typename T> static T inline
 cubic_float(
 	const T one, const T two, const T thr, const T fou,
-	const double* restrict cx )
+	const double* __restrict cx )
 {
 	return( cx[0] * one +
 		 cx[1] * two +
@@ -268,7 +268,7 @@ bicubic_float(
 	const T dos_one, const T dos_two, const T dos_thr, const T dos_fou,
 	const T tre_one, const T tre_two, const T tre_thr, const T tre_fou,
 	const T qua_one, const T qua_two, const T qua_thr, const T qua_fou,
-	const double* restrict cx, const double* restrict cy )
+	const double* __restrict cx, const double* __restrict cy )
 {
 	const double r0 = cubic_float<T>( 
 		uno_one, uno_two, uno_thr, uno_fou, cx ); 
@@ -444,7 +444,7 @@ calculate_coefficients_lanczos( double *c,
  */
 template <typename T, typename IT>
 static IT
-reduce_sum( const T * restrict in, int stride, const IT * restrict c, int n )
+reduce_sum( const T * __restrict in, int stride, const IT * __restrict c, int n )
 {
 	IT sum;
 
--- a/libvips/resample/vsqbs.cpp
+++ b/libvips/resample/vsqbs.cpp
@@ -178,16 +178,16 @@ typedef struct _VipsInterpolateVsqbsClass {
  */
 #define VSQBS_CONVERSION( conversion )               \
   template <typename T> static void inline           \
-  vsqbs_ ## conversion(       void*    restrict pout, \
-                        const VipsPel* restrict pin,  \
+  vsqbs_ ## conversion(       void*    __restrict pout, \
+                        const VipsPel* __restrict pin,  \
                         const int             bands, \
                         const int             lskip, \
                         const double          x_0,   \
                         const double          y_0 )  \
   { \
-    T* restrict out = (T *) pout; \
+    T* __restrict out = (T *) pout; \
     \
-    const T* restrict in = (T *) pin; \
+    const T* __restrict in = (T *) pin; \
     \
     const int sign_of_x_0 = 2 * ( x_0 >= 0. ) - 1; \
     const int sign_of_y_0 = 2 * ( y_0 >= 0. ) - 1; \
@@ -302,9 +302,9 @@ extern "C" {
 
 
 static void
-vips_interpolate_vsqbs_interpolate( VipsInterpolate* restrict interpolate,
-                                    void*            restrict out,
-                                    VipsRegion*      restrict in,
+vips_interpolate_vsqbs_interpolate( VipsInterpolate* __restrict interpolate,
+                                    void*            __restrict out,
+                                    VipsRegion*      __restrict in,
                                     double                    absolute_x,
                                     double                    absolute_y )
 {
@@ -321,7 +321,7 @@ vips_interpolate_vsqbs_interpolate( VipsInterpolate* restrict interpolate,
    * 2x2 group of pixel centers which contains the sampling location
    * in its convex hull:
    */
-  const VipsPel* restrict p = VIPS_REGION_ADDR( in, ix, iy );
+  const VipsPel* __restrict p = VIPS_REGION_ADDR( in, ix, iy );
 
   const double relative_x = absolute_x - ix;
   const double relative_y = absolute_y - iy;
--- a/meson.build
+++ b/meson.build
@@ -30,8 +30,6 @@ pymod = import('python')
 pkg = import('pkgconfig')
 i18n = import('i18n')
 
-add_project_arguments('-Drestrict=__restrict', language: 'cpp')
-
 # if we're optimising (eg. release mode) we turn off cast checks and g_asserts
 if get_option('optimization') in ['2', '3', 's']
     add_project_arguments('-DG_DISABLE_CAST_CHECKS', language : ['cpp', 'c'])
--- a/test/test_connections.c
+++ b/test/test_connections.c
@@ -4,7 +4,9 @@
 #include <sys/types.h>
 #include <sys/stat.h>
 #include <fcntl.h>
+#ifdef HAVE_UNISTD_H
 #include <unistd.h>
+#endif /*HAVE_UNISTD_H*/
 #include <string.h>
 #include <vips/vips.h>
 
--- a/test/test_descriptors.c
+++ b/test/test_descriptors.c
@@ -5,7 +5,9 @@
  */
 
 #include <stdio.h>
+#ifdef HAVE_UNISTD_H
 #include <unistd.h>
+#endif /*HAVE_UNISTD_H*/
 
 #define _GNU_SOURCE
 #include <stdlib.h>
