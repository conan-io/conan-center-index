Exporting a template is non-sense (it only makes sense for an explicit instantiation), and msvc will complain.
see https://github.com/mfontanini/cppkafka/issues/206

--- a/include/cppkafka/utils/buffered_producer.h
+++ b/include/cppkafka/utils/buffered_producer.h
@@ -84,7 +84,7 @@ namespace cppkafka {
  */
 template <typename BufferType,
           typename Allocator = std::allocator<ConcreteMessageBuilder<BufferType>>>
-class CPPKAFKA_API BufferedProducer {
+class BufferedProducer {
 public:
     enum class FlushMethod {
         Sync,    ///< Empty the buffer and wait for acks from the broker.
--- a/include/cppkafka/utils/compacted_topic_processor.h
+++ b/include/cppkafka/utils/compacted_topic_processor.h
@@ -44,7 +44,7 @@ namespace cppkafka {
  * \brief Events generated by a CompactedTopicProcessor
  */
 template <typename Key, typename Value>
-class CPPKAFKA_API CompactedTopicEvent {
+class CompactedTopicEvent {
 public:
     /**
      * \brief Event type enum
@@ -111,7 +111,7 @@ private:
 };
 
 template <typename Key, typename Value>
-class CPPKAFKA_API CompactedTopicProcessor {
+class CompactedTopicProcessor {
 public:
     /**
      * The type of events generated by this processor
--- a/include/cppkafka/utils/consumer_dispatcher.h
+++ b/include/cppkafka/utils/consumer_dispatcher.h
@@ -70,7 +70,7 @@ namespace cppkafka {
  * * EOF: void(BasicConsumerDispatcher::EndOfFile, TopicPartition)
  */
 template <typename ConsumerType>
-class CPPKAFKA_API BasicConsumerDispatcher {
+class BasicConsumerDispatcher {
 public:
     /**
      * Tag to indicate a timeout occurred
