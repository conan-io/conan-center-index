diff --git a/include/cppkafka/utils/buffered_producer.h b/include/cppkafka/utils/buffered_producer.h
index c5d8b78..b3424c8 100644
--- a/include/cppkafka/utils/buffered_producer.h
+++ b/include/cppkafka/utils/buffered_producer.h
@@ -746,6 +746,8 @@ Producer::PayloadPolicy get_default_payload_policy<Buffer>() {
     return Producer::PayloadPolicy::PASSTHROUGH_PAYLOAD;
 }
 
+#if defined(cppkafka_EXPORTS)
+
 template <typename BufferType, typename Allocator>
 BufferedProducer<BufferType, Allocator>::BufferedProducer(Configuration config,
                                                           const Allocator& alloc)
@@ -1273,6 +1275,8 @@ void BufferedProducer<BufferType, Allocator>::swap_queues(BufferedProducer<Buffe
     std::swap(queue1, queue2);
 }
 
+#endif // defined(cppkafka_EXPORTS)
+
 } // cppkafka
 
 #endif // CPPKAFKA_BUFFERED_PRODUCER_H
diff --git a/include/cppkafka/utils/compacted_topic_processor.h b/include/cppkafka/utils/compacted_topic_processor.h
index 166dcfe..f1660b8 100644
--- a/include/cppkafka/utils/compacted_topic_processor.h
+++ b/include/cppkafka/utils/compacted_topic_processor.h
@@ -187,6 +187,8 @@ private:
 
 // CompactedTopicEvent
 
+#if defined(cppkafka_EXPORTS)
+
 template <typename K, typename V>
 CompactedTopicEvent<K, V>::CompactedTopicEvent(EventType type, std::string topic, int partition)
 : type_(type), topic_(std::move(topic)), partition_(partition) {
@@ -341,6 +343,8 @@ void CompactedTopicProcessor<K, V>::on_assignment(TopicPartitionList& topic_part
     }
 }
 
+#endif  // defined(cppkafka_EXPORTS)
+
 } // cppkafka
 
 #endif // CPPKAFKA_COMPACTED_TOPIC_PROCESSOR_H
diff --git a/include/cppkafka/utils/consumer_dispatcher.h b/include/cppkafka/utils/consumer_dispatcher.h
index 05b1875..d17367c 100644
--- a/include/cppkafka/utils/consumer_dispatcher.h
+++ b/include/cppkafka/utils/consumer_dispatcher.h
@@ -313,6 +313,8 @@ private:
 
 using ConsumerDispatcher = BasicConsumerDispatcher<Consumer>;
 
+#if defined(cppkafka_EXPORTS)
+
 template <typename ConsumerType>
 BasicConsumerDispatcher<ConsumerType>::BasicConsumerDispatcher(ConsumerType& consumer)
 : consumer_(consumer) {
@@ -368,6 +370,8 @@ void BasicConsumerDispatcher<ConsumerType>::run(const Args&... args) {
     }
 }
 
+#endif  // defined(cppkafka_EXPORTS)
+
 } // cppkafka
 
 #endif // CPPKAFKA_CONSUMER_DISPATCHER_H
