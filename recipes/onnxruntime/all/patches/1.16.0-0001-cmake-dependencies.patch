From a30759bc61768883302290d34efd6d0a5e09dc9f Mon Sep 17 00:00:00 2001
From: mayeut <mayeut@users.noreply.github.com>
Date: Thu, 21 Sep 2023 23:20:46 +0200
Subject: [PATCH] CMake: ensure conan dependencies are used

---
 cmake/external/eigen.cmake                     |  5 +++--
 cmake/external/onnxruntime_external_deps.cmake | 15 ++++++++-------
 cmake/external/xnnpack.cmake                   | 11 +++++++----
 cmake/onnxruntime_mlas.cmake                   |  2 +-
 4 files changed, 19 insertions(+), 14 deletions(-)

diff --git a/cmake/external/eigen.cmake b/cmake/external/eigen.cmake
index c0f7ddc50e..a47de64cbd 100644
--- a/cmake/external/eigen.cmake
+++ b/cmake/external/eigen.cmake
@@ -16,8 +16,9 @@ else ()
             eigen
             URL ${DEP_URL_eigen}
             URL_HASH SHA1=${DEP_SHA1_eigen}
+            FIND_PACKAGE_ARGS REQUIRED CONFIG NAMES Eigen3
         )
     endif()
-    FetchContent_Populate(eigen)
-    set(eigen_INCLUDE_DIRS  "${eigen_SOURCE_DIR}")
+    onnxruntime_fetchcontent_makeavailable(eigen)
+    get_target_property(eigen_INCLUDE_DIRS Eigen3::Eigen INTERFACE_INCLUDE_DIRECTORIES)
 endif()
diff --git a/cmake/external/onnxruntime_external_deps.cmake b/cmake/external/onnxruntime_external_deps.cmake
index 8e412c7847..0e2482d7de 100644
--- a/cmake/external/onnxruntime_external_deps.cmake
+++ b/cmake/external/onnxruntime_external_deps.cmake
@@ -187,6 +187,7 @@ FetchContent_Declare(
       date
       URL ${DEP_URL_date}
       URL_HASH SHA1=${DEP_SHA1_date}
+      FIND_PACKAGE_ARGS NAMES date
     )
 onnxruntime_fetchcontent_makeavailable(date)
 
@@ -196,6 +197,7 @@ FetchContent_Declare(
   mp11
   URL ${DEP_URL_mp11}
   URL_HASH SHA1=${DEP_SHA1_mp11}
+  FIND_PACKAGE_ARGS NAMES Boost
 )
 
 set(JSON_BuildTests OFF CACHE INTERNAL "")
@@ -314,6 +316,7 @@ FetchContent_Declare(
     safeint
     URL ${DEP_URL_safeint}
     URL_HASH SHA1=${DEP_SHA1_safeint}
+    FIND_PACKAGE_ARGS NAMES safeint
 )
 
 # The next line will generate an error message "fatal: not a git repository", but it is ok. It is from flatbuffers
@@ -410,6 +413,7 @@ FetchContent_Declare(
   URL ${DEP_URL_onnx}
   URL_HASH SHA1=${DEP_SHA1_onnx}
   PATCH_COMMAND ${ONNXRUNTIME_ONNX_PATCH_COMMAND}
+  FIND_PACKAGE_ARGS NAMES ONNX
 )
 
 
@@ -437,9 +441,6 @@ endif()
 set(GSL_TARGET "Microsoft.GSL::GSL")
 set(GSL_INCLUDE_DIR "$<TARGET_PROPERTY:${GSL_TARGET},INTERFACE_INCLUDE_DIRECTORIES>")
 
-add_library(safeint_interface INTERFACE)
-target_include_directories(safeint_interface INTERFACE ${safeint_SOURCE_DIR})
-
 # XNNPACK EP
 if (onnxruntime_USE_XNNPACK)
   if (onnxruntime_DISABLE_CONTRIB_OPS)
@@ -467,10 +468,10 @@ set(onnxruntime_EXTERNAL_LIBRARIES ${onnxruntime_EXTERNAL_LIBRARIES_XNNPACK} ${W
 # The other libs do not have the problem. All the sources are already there. We can compile them in any order.
 set(onnxruntime_EXTERNAL_DEPENDENCIES onnx_proto flatbuffers::flatbuffers)
 
-target_compile_definitions(onnx PUBLIC $<TARGET_PROPERTY:onnx_proto,INTERFACE_COMPILE_DEFINITIONS> PRIVATE "__ONNX_DISABLE_STATIC_REGISTRATION")
-if (NOT onnxruntime_USE_FULL_PROTOBUF)
-  target_compile_definitions(onnx PUBLIC "__ONNX_NO_DOC_STRINGS")
-endif()
+# target_compile_definitions(onnx PUBLIC $<TARGET_PROPERTY:onnx_proto,INTERFACE_COMPILE_DEFINITIONS> PRIVATE "__ONNX_DISABLE_STATIC_REGISTRATION")
+# if (NOT onnxruntime_USE_FULL_PROTOBUF)
+#  target_compile_definitions(onnx PUBLIC "__ONNX_NO_DOC_STRINGS")
+# endif()
 
 if (onnxruntime_RUN_ONNX_TESTS)
   add_definitions(-DORT_RUN_EXTERNAL_ONNX_TESTS)
diff --git a/cmake/external/xnnpack.cmake b/cmake/external/xnnpack.cmake
index 7455584f1a..85d8177f45 100644
--- a/cmake/external/xnnpack.cmake
+++ b/cmake/external/xnnpack.cmake
@@ -25,12 +25,15 @@ set(FXDIV_SOURCE_DIR ${fxdiv_SOURCE_DIR})
 
 FetchContent_Declare(pthreadpool URL ${DEP_URL_pthreadpool} URL_HASH SHA1=${DEP_SHA1_pthreadpool})
 onnxruntime_fetchcontent_makeavailable(pthreadpool)
-FetchContent_Declare(googlexnnpack URL ${DEP_URL_googlexnnpack}  URL_HASH SHA1=${DEP_SHA1_googlexnnpack}
-PATCH_COMMAND ${Patch_EXECUTABLE} --binary --ignore-whitespace -p1 < ${PROJECT_SOURCE_DIR}/patches/xnnpack/AddEmscriptenAndIosSupport.patch)
+FetchContent_Declare(
+    googlexnnpack
+    URL ${DEP_URL_googlexnnpack}
+    URL_HASH SHA1=${DEP_SHA1_googlexnnpack}
+    PATCH_COMMAND ${Patch_EXECUTABLE} --binary --ignore-whitespace -p1 < ${PROJECT_SOURCE_DIR}/patches/xnnpack/AddEmscriptenAndIosSupport.patch
+    FIND_PACKAGE_ARGS NAMES xnnpack
+)
 
 onnxruntime_fetchcontent_makeavailable(googlexnnpack)
-set(XNNPACK_DIR ${googlexnnpack_SOURCE_DIR})
-set(XNNPACK_INCLUDE_DIR ${XNNPACK_DIR}/include)
 
 set(onnxruntime_EXTERNAL_LIBRARIES_XNNPACK XNNPACK pthreadpool)
 
diff --git a/cmake/onnxruntime_mlas.cmake b/cmake/onnxruntime_mlas.cmake
index e0ccc504d7..819ffba884 100644
--- a/cmake/onnxruntime_mlas.cmake
+++ b/cmake/onnxruntime_mlas.cmake
@@ -609,7 +609,7 @@ if (NOT onnxruntime_ORT_MINIMAL_BUILD)
 
   target_link_libraries(onnxruntime_mlas_q4dq PRIVATE ${ONNXRUNTIME_MLAS_LIBS} onnxruntime_common)
   if (CPUINFO_SUPPORTED AND NOT CMAKE_SYSTEM_NAME STREQUAL "Emscripten")
-    target_link_libraries(onnxruntime_mlas_q4dq PRIVATE cpuinfo)
+    target_link_libraries(onnxruntime_mlas_q4dq PRIVATE cpuinfo::cpuinfo)
   endif()
   if(NOT WIN32)
     target_link_libraries(onnxruntime_mlas_q4dq PRIVATE nsync::nsync_cpp ${CMAKE_DL_LIBS})
-- 
2.39.2 (Apple Git-143)

