From 8ed31fc8a82926ce97d2f82ab6137edad9bfc76a Mon Sep 17 00:00:00 2001
From: Lucas K Dal Castel <lucas.castel@ael.com.br>
Date: Sat, 28 Oct 2023 12:34:03 -0300
Subject: [PATCH] freealut-1.1.0-conan-build

---
 CMakeLists.txt    | 72 +++++++++++++++++------------------------------
 include/AL/alut.h | 26 +++++++++--------
 2 files changed, 41 insertions(+), 57 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 640f35b..220f6fc 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -1,14 +1,16 @@
 # cmake project file by Prakash Punnoor
-CMAKE_MINIMUM_REQUIRED(VERSION 2.0)
+CMAKE_MINIMUM_REQUIRED(VERSION 3.15)
 
 SET(CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/admin/CMakeModules")
 PROJECT(Alut C)
+include(GNUInstallDirs)
+
 SET(PACKAGE "freealut")
 SET(PACKAGE_TARNAME "freealut")
 SET(PACKAGE_NAME "freealut library")
 SET(PACKAGE_MAJOR_VERSION "1")
-SET(PACKAGE_MINOR_VERSION "0")
-SET(PACKAGE_BUILD_VERSION "1")
+SET(PACKAGE_MINOR_VERSION "1")
+SET(PACKAGE_BUILD_VERSION "0")
 SET(PACKAGE_VERSION "${PACKAGE_MAJOR_VERSION}.${PACKAGE_MINOR_VERSION}.${PACKAGE_BUILD_VERSION}")
 SET(MAJOR_VERSION "0")
 SET(MINOR_VERSION "0")
@@ -36,14 +38,14 @@ SET(ALUT_SOURCES src/alutBufferData.c
                  src/alutVersion.c
                  src/alutWaveform.c)
 
-INCLUDE_DIRECTORIES(${Alut_SOURCE_DIR}/include)
+INCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR}/include)
 
 SET(ADD_WFLAGS "")
 SET(ADD_CFLAGS "")
 SET(ADD_LDFLAGS "")
 SET(ADD_LIBS "")
 
-OPTION(BUILD_STATIC    "build static library too"   ON)
+option(BUILD_SHARED_LIBS "Build using shared libraries" ON)
 OPTION(PROFILE         "enable profile"            OFF)
 OPTION(OPTIMIZATION    "enable optimization"        ON)
 OPTION(WARNINGS        "enable warnings"            ON)
@@ -72,24 +74,9 @@ ADD_DEFINE("__NO_CTYPE 1")
 ADD_DEFINITIONS(-DHAVE_CONFIG_H)
 ADD_DEFINITIONS(-DNDEBUG)
 
-FIND_LIBRARY(OPENAL_LIB NAMES openal openal32 PATHS /usr/lib /usr/local/lib ${OPENAL_LIB_DIR})
-IF(OPENAL_LIB MATCHES "NOTFOUND")
-  MESSAGE(FATAL_ERROR "OpenAL not installed, cannot build alut - aborting.")
-ENDIF(OPENAL_LIB MATCHES "NOTFOUND")
-
-IF(UNIX)
- SET(ADD_LIBS ${ADD_LIBS} m)
-ENDIF(UNIX)
-
-SET(CMAKE_REQUIRED_INCLUDES ${OPENAL_INCLUDE_DIR})
-CHECK_INCLUDE_FILES("AL/alc.h;AL/al.h" AL_HEADERS)
-IF(NOT AL_HEADERS)
-  MESSAGE(FATAL_ERROR "OpenAL header files not found - aborting.")
-ENDIF(NOT AL_HEADERS)
 
-IF(DEFINED OPENAL_INCLUDE_DIR)
-  INCLUDE_DIRECTORIES(${OPENAL_INCLUDE_DIR})
-ENDIF(DEFINED OPENAL_INCLUDE_DIR)
+FIND_PACKAGE(OpenAL REQUIRED)
+set(OPENAL_LIB "OpenAL::OpenAL")
 
 FIND_PACKAGE(SleepFunction)
 
@@ -131,30 +118,19 @@ SET(CMAKE_CXX_FLAGS "${ADD_CFLAGS} ${CMAKE_CXX_FLAGS}")
 SET(CMAKE_SHARED_LINKER_FLAGS "${ADD_LDFLAGS} ${CMAKE_SHARED_LINKER_FLAGS}")
 SET(CMAKE_MODULE_LINKER_FLAGS "${ADD_LDFLAGS} ${CMAKE_MODULE_LINKER_FLAGS}")
 
-IF(BUILD_STATIC)
-  # we can't create a static library with the same name
-  # as the shared one, so we copy it over after creation
-  ADD_LIBRARY(alut_static STATIC ${ALUT_SOURCES})
-  TARGET_LINK_LIBRARIES(alut_static ${OPENAL_LIB} ${ADD_LIBS})
-  IF(NOT WIN32)
-    ADD_CUSTOM_COMMAND(
-      TARGET alut_static
-      POST_BUILD
-      COMMAND ${CMAKE_COMMAND}
-      ARGS -E copy
-        ${CMAKE_BINARY_DIR}/${CMAKE_STATIC_LIBRARY_PREFIX}alut_static${CMAKE_STATIC_LIBRARY_SUFFIX}
-        ${CMAKE_BINARY_DIR}/${CMAKE_STATIC_LIBRARY_PREFIX}alut${CMAKE_STATIC_LIBRARY_SUFFIX})
-    INSTALL_FILES(/lib FILES ${CMAKE_STATIC_LIBRARY_PREFIX}alut${CMAKE_STATIC_LIBRARY_SUFFIX})
-  ENDIF(NOT WIN32)
-ENDIF(BUILD_STATIC)
-
-
-ADD_LIBRARY(alut SHARED ${ALUT_SOURCES})
+ADD_LIBRARY(alut ${ALUT_SOURCES})
 SET_TARGET_PROPERTIES(alut PROPERTIES VERSION ${VERSION} SOVERSION ${MAJOR_VERSION})
+set_target_properties(alut PROPERTIES PUBLIC_HEADER "include/AL/alut.h")
+if (NOT BUILD_SHARED_LIBS)
+  target_compile_definitions(alut PUBLIC ALUT_LIBTYPE_STATIC)
+endif()
 TARGET_LINK_LIBRARIES(alut ${OPENAL_LIB} ${ADD_LIBS})
 
-INSTALL_TARGETS(/lib alut)
-INSTALL_FILES(/include/AL FILES include/AL/alut.h)
+install(TARGETS alut
+    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+    ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+    PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/AL)
 
 # needed for openal.pc.in and openal-config.in
 SET(prefix ${CMAKE_INSTALL_PREFIX})
@@ -170,8 +146,10 @@ CONFIGURE_FILE(${CMAKE_SOURCE_DIR}/admin/pkgconfig/freealut.pc.in
                ${CMAKE_BINARY_DIR}/admin/pkgconfig/freealut.pc @ONLY)
 CONFIGURE_FILE(${CMAKE_SOURCE_DIR}/admin/pkgconfig/freealut-config.in
                ${CMAKE_BINARY_DIR}/admin/pkgconfig/freealut-config @ONLY)
-INSTALL_PROGRAMS(/bin FILES admin/pkgconfig/freealut-config)
-INSTALL_FILES(/lib/pkgconfig FILES admin/pkgconfig/freealut.pc)
+install(PROGRAMS ${CMAKE_CURRENT_BINARY_DIR}/admin/pkgconfig/freealut-config 
+    DESTINATION ${CMAKE_INSTALL_BINDIR})
+install(FILES ${CMAKE_CURRENT_BINARY_DIR}/admin/pkgconfig/freealut.pc
+    DESTINATION ${CMAKE_INSTALL_LIBDIR}/pkgconfig)
 
 
 # test-suite
@@ -192,7 +170,9 @@ IF(BUILD_TESTS)
 
     FOREACH(TEST ${TESTS})
       SET(TEST_SRC test_suite/test_${TEST}.c)
-      SET_SOURCE_FILES_PROPERTIES(${TEST_SRC} PROPERTIES COMPILE_FLAGS "-Wno-deprecated-declarations")
+      if(CMAKE_COMPILER_IS_GNUCC)
+          SET_SOURCE_FILES_PROPERTIES(${TEST_SRC} PROPERTIES COMPILE_FLAGS "-Wno-deprecated-declarations")
+      endif()
       ADD_EXECUTABLE(test_${TEST} ${TEST_SRC})
       TARGET_LINK_LIBRARIES(test_${TEST} ${OPENAL_LIB} ${ADD_LIBS} alut)
     ENDFOREACH(TEST)
diff --git a/include/AL/alut.h b/include/AL/alut.h
index 4b05a3c..5772c6c 100644
--- a/include/AL/alut.h
+++ b/include/AL/alut.h
@@ -16,18 +16,22 @@
 extern "C" {
 #endif
 
-#if defined(_WIN32) && !defined(_XBOX)
- #if defined (ALUT_BUILD_LIBRARY)
-  #define ALUT_API __declspec(dllexport)
- #else
-  #define ALUT_API __declspec(dllimport)
- #endif
+#ifndef ALUT_LIBTYPE_STATIC
+  #if defined(_WIN32) && !defined(_XBOX)
+   #if defined (ALUT_BUILD_LIBRARY)
+    #define ALUT_API __declspec(dllexport)
+   #else
+    #define ALUT_API __declspec(dllimport)
+   #endif
+  #else
+   #if defined(ALUT_BUILD_LIBRARY) && defined(HAVE_GCC_VISIBILITY)
+    #define ALUT_API __attribute__((visibility("default")))
+   #else
+    #define ALUT_API extern
+   #endif
+  #endif
 #else
- #if defined(ALUT_BUILD_LIBRARY) && defined(HAVE_GCC_VISIBILITY)
-  #define ALUT_API __attribute__((visibility("default")))
- #else
-  #define ALUT_API extern
- #endif
+  #define ALUT_API
 #endif
 
 #if defined(_WIN32)
-- 
2.36.1.windows.1

