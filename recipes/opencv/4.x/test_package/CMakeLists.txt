cmake_minimum_required(VERSION 3.8)
project(test_package LANGUAGES CXX)

enable_testing()

# Options to test main modules
option(OPENCV_WITH_CALIB3D "Enabled if opencv is built with calib3d module" OFF)
option(OPENCV_WITH_FEATURES2D "Enabled if opencv is built with features2d module" OFF)
option(OPENCV_WITH_FLANN "Enabled if opencv is built with flann module" OFF)
option(OPENCV_WITH_GAPI "Enabled if opencv is built with gapi module" OFF)
option(OPENCV_WITH_HIGHGUI "Enabled if opencv is built with highgui module" OFF)
option(OPENCV_WITH_IMGCODECS_PNG "Enabled if opencv is built with imgcodecs module and png support" OFF)
option(OPENCV_WITH_IMGPROC "Enabled if opencv is built with imgproc module" OFF)
option(OPENCV_WITH_ML "Enabled if opencv is built with ml module" OFF)
option(OPENCV_WITH_OBJDETECT "Enabled if opencv is built with objdetect module" OFF)
option(OPENCV_WITH_PHOTO "Enabled if opencv is built with photo module" OFF)
option(OPENCV_WITH_STITCHING "Enabled if opencv is built with stitching module" OFF)
option(OPENCV_WITH_VIDEO "Enabled if opencv is built with video module" OFF)
option(OPENCV_WITH_VIDEOIO_FFMPEG "Enabled if opencv is built with videoio module and ffmpeg" OFF)
# Options to test extra modules
option(OPENCV_WITH_ARUCO "Enabled if opencv is built with aruco module" OFF)
option(OPENCV_WITH_BGSEGM "Enabled if opencv is built with bgsegm module" OFF)
option(OPENCV_WITH_FREETYPE "Enabled if opencv is built with freetype module" OFF)
option(OPENCV_WITH_IMG_HASH "Enabled if opencv is built with img_hash module" OFF)
option(OPENCV_WITH_INTENSITY_TRANSFORM "Enabled if opencv is built with intensity_transform module" OFF)
option(OPENCV_WITH_OPTFLOW "Enabled if opencv is built with optflow module" OFF)
option(OPENCV_WITH_REG "Enabled if opencv is built with reg module" OFF)
option(OPENCV_WITH_RGBD "Enabled if opencv is built with rgbd module" OFF)
option(OPENCV_WITH_SFM "Enabled if opencv is built with sfm module" OFF)
option(OPENCV_WITH_SHAPE "Enabled if opencv is built with shape module" OFF)
option(OPENCV_WITH_STRUCTURED_LIGHT "Enabled if opencv is built with structured_light module" OFF)
option(OPENCV_WITH_SURFACE_MATCHING "Enabled if opencv is built with surface_matching module" OFF)
option(OPENCV_WITH_TEXT "Enabled if opencv is built with text module" OFF)
option(OPENCV_WITH_XFEATURES2D "Enabled if opencv is built with xfeatures2d module" OFF)

find_package(OpenCV REQUIRED core CONFIG)

add_executable(test_core test_core.cpp)
target_link_libraries(test_core PRIVATE opencv_core)
target_compile_features(test_core PRIVATE cxx_std_11)
add_test(NAME test_core COMMAND test_core)

if(OPENCV_WITH_CALIB3D)
    add_executable(test_calib3d test_calib3d.cpp)
    target_link_libraries(test_calib3d PRIVATE opencv_core opencv_calib3d)
    target_compile_features(test_calib3d PRIVATE cxx_std_11)
    add_test(NAME test_calib3d COMMAND test_calib3d)
endif()

if(OPENCV_WITH_FEATURES2D)
    add_executable(test_features2d test_features2d.cpp)
    target_link_libraries(test_features2d PRIVATE opencv_features2d)
    target_compile_features(test_features2d PRIVATE cxx_std_11)
    add_test(NAME test_features2d COMMAND test_features2d)
endif()

if(OPENCV_WITH_FLANN)
    add_executable(test_flann test_flann.cpp)
    target_link_libraries(test_flann PRIVATE opencv_core opencv_flann)
    target_compile_features(test_flann PRIVATE cxx_std_11)
    add_test(NAME test_flann COMMAND test_flann)
endif()

if(OPENCV_WITH_GAPI)
    add_executable(test_gapi test_gapi.cpp)
    target_link_libraries(test_gapi PRIVATE opencv_gapi)
    target_compile_features(test_gapi PRIVATE cxx_std_11)
    add_test(NAME test_gapi COMMAND test_gapi)
endif()

if(OPENCV_WITH_HIGHGUI)
    add_executable(test_highgui test_highgui.cpp)
    target_link_libraries(test_highgui PRIVATE opencv_core opencv_highgui)
    target_compile_features(test_highgui PRIVATE cxx_std_11)
endif()

if(OPENCV_WITH_IMGCODECS_PNG)
    add_executable(test_imgcodecs_with_png test_imgcodecs_with_png.cpp)
    target_link_libraries(test_imgcodecs_with_png PRIVATE opencv_core opencv_imgcodecs)
    target_compile_features(test_imgcodecs_with_png PRIVATE cxx_std_11)
    add_test(NAME test_imgcodecs_with_png COMMAND test_imgcodecs_with_png)
endif()

if(OPENCV_WITH_IMGPROC)
    add_executable(test_imgproc test_imgproc.cpp)
    target_link_libraries(test_imgproc PRIVATE opencv_core opencv_imgproc)
    target_compile_features(test_imgproc PRIVATE cxx_std_11)
    add_test(NAME test_imgproc COMMAND test_imgproc)
endif()

if(OPENCV_WITH_ML)
    add_executable(test_ml test_ml.cpp)
    target_link_libraries(test_ml PRIVATE opencv_ml)
    target_compile_features(test_ml PRIVATE cxx_std_11)
    add_test(NAME test_ml COMMAND test_ml)
endif()

if(OPENCV_WITH_OBJDETECT)
    add_executable(test_objdetect test_objdetect.cpp)
    target_link_libraries(test_objdetect PRIVATE opencv_core opencv_objdetect)
    target_compile_features(test_objdetect PRIVATE cxx_std_11)
    add_test(NAME test_objdetect COMMAND test_objdetect)
endif()

if(OPENCV_WITH_PHOTO)
    add_executable(test_photo test_photo.cpp)
    target_link_libraries(test_photo PRIVATE opencv_core opencv_photo)
    target_compile_features(test_photo PRIVATE cxx_std_11)
    add_test(NAME test_photo COMMAND test_photo)
endif()

if(OPENCV_WITH_STITCHING)
    add_executable(test_stitching test_stitching.cpp)
    target_link_libraries(test_stitching PRIVATE opencv_core opencv_stitching)
    target_compile_features(test_stitching PRIVATE cxx_std_11)
    add_test(NAME test_stitching COMMAND test_stitching)
endif()

if(OPENCV_WITH_VIDEO)
    add_executable(test_video test_video.cpp)
    target_link_libraries(test_video PRIVATE opencv_video)
    target_compile_features(test_video PRIVATE cxx_std_11)
    add_test(NAME test_video COMMAND test_video)
endif()

if(OPENCV_WITH_VIDEOIO_FFMPEG)
    add_executable(test_videoio_with_ffmpeg test_videoio_with_ffmpeg.cpp)
    target_link_libraries(test_videoio_with_ffmpeg PRIVATE opencv_videoio)
    target_compile_features(test_videoio_with_ffmpeg PRIVATE cxx_std_11)
    add_test(NAME test_videoio_with_ffmpeg COMMAND test_videoio_with_ffmpeg)
endif()

if(OPENCV_WITH_ARUCO)
    add_executable(test_aruco test_aruco.cpp)
    target_link_libraries(test_aruco PRIVATE opencv_core opencv_aruco)
    target_compile_features(test_aruco PRIVATE cxx_std_11)
    add_test(NAME test_aruco COMMAND test_aruco)
endif()

if(OPENCV_WITH_BGSEGM)
    add_executable(test_bgsegm test_bgsegm.cpp)
    target_link_libraries(test_bgsegm PRIVATE opencv_bgsegm)
    target_compile_features(test_bgsegm PRIVATE cxx_std_11)
    add_test(NAME test_bgsegm COMMAND test_bgsegm)
endif()

if(OPENCV_WITH_FREETYPE)
    add_executable(test_freetype test_freetype.cpp)
    target_link_libraries(test_freetype PRIVATE opencv_freetype)
    target_compile_features(test_freetype PRIVATE cxx_std_11)
    add_test(NAME test_freetype COMMAND test_freetype)
endif()

if(OPENCV_WITH_IMG_HASH)
    add_executable(test_img_hash test_img_hash.cpp)
    target_link_libraries(test_img_hash PRIVATE opencv_core opencv_img_hash)
    target_compile_features(test_img_hash PRIVATE cxx_std_11)
    add_test(NAME test_img_hash COMMAND test_img_hash)
endif()

if(OPENCV_WITH_INTENSITY_TRANSFORM)
    add_executable(test_intensity_transform test_intensity_transform.cpp)
    target_link_libraries(test_intensity_transform PRIVATE opencv_core opencv_intensity_transform)
    target_compile_features(test_intensity_transform PRIVATE cxx_std_11)
    add_test(NAME test_intensity_transform COMMAND test_intensity_transform)
endif()

if(OPENCV_WITH_OPTFLOW)
    add_executable(test_optflow test_optflow.cpp)
    target_link_libraries(test_optflow PRIVATE opencv_optflow)
    target_compile_features(test_optflow PRIVATE cxx_std_11)
    add_test(NAME test_optflow COMMAND test_optflow)
endif()

if(OPENCV_WITH_REG)
    add_executable(test_reg test_reg.cpp)
    target_link_libraries(test_reg PRIVATE opencv_reg)
    target_compile_features(test_reg PRIVATE cxx_std_11)
    add_test(NAME test_reg COMMAND test_reg)
endif()

if(OPENCV_WITH_RGBD)
    add_executable(test_rgbd test_rgbd.cpp)
    target_link_libraries(test_rgbd PRIVATE opencv_rgbd)
    target_compile_features(test_rgbd PRIVATE cxx_std_11)
    add_test(NAME test_rgbd COMMAND test_rgbd)
endif()

if(OPENCV_WITH_SFM)
    add_executable(test_sfm test_sfm.cpp)
    target_link_libraries(test_sfm PRIVATE opencv_core opencv_sfm)
    target_compile_features(test_sfm PRIVATE cxx_std_11)
    add_test(NAME test_sfm COMMAND test_sfm)
endif()

if(OPENCV_WITH_SHAPE)
    add_executable(test_shape test_shape.cpp)
    target_link_libraries(test_shape PRIVATE opencv_shape)
    target_compile_features(test_shape PRIVATE cxx_std_11)
    add_test(NAME test_shape COMMAND test_shape)
endif()

if(OPENCV_WITH_STRUCTURED_LIGHT)
    add_executable(test_structured_light test_structured_light.cpp)
    target_link_libraries(test_structured_light PRIVATE opencv_structured_light)
    target_compile_features(test_structured_light PRIVATE cxx_std_11)
    add_test(NAME test_structured_light COMMAND test_structured_light)
endif()

if(OPENCV_WITH_SURFACE_MATCHING)
    add_executable(test_surface_matching test_surface_matching.cpp)
    target_link_libraries(test_surface_matching PRIVATE opencv_surface_matching)
    target_compile_features(test_surface_matching PRIVATE cxx_std_11)
    add_test(NAME test_surface_matching COMMAND test_surface_matching)
endif()

if(OPENCV_WITH_TEXT)
    add_executable(test_text test_text.cpp)
    target_link_libraries(test_text PRIVATE opencv_core opencv_text)
    target_compile_features(test_text PRIVATE cxx_std_11)
    add_test(NAME test_text COMMAND test_text)
endif()

if(OPENCV_WITH_XFEATURES2D)
    add_executable(test_xfeatures2d test_xfeatures2d.cpp)
    target_link_libraries(test_xfeatures2d PRIVATE opencv_xfeatures2d)
    target_compile_features(test_xfeatures2d PRIVATE cxx_std_11)
    add_test(NAME test_xfeatures2d COMMAND test_xfeatures2d)
endif()
