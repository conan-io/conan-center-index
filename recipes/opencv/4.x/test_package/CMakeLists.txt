cmake_minimum_required(VERSION 3.8)
project(test_package LANGUAGES CXX)

enable_testing()

# Options to test main modules
option(OPENCV_WITH_CALIB3D "Enabled if opencv is built with calib3d module" OFF)
option(OPENCV_WITH_FLANN "Enabled if opencv is built with flann module" OFF)
option(OPENCV_WITH_GAPI "Enabled if opencv is built with gapi module" OFF)
option(OPENCV_WITH_IMGCODECS_PNG "Enabled if opencv is built with imgcodecs module and png support" OFF)
option(OPENCV_WITH_IMGPROC "Enabled if opencv is built with imgproc module" OFF)
option(OPENCV_WITH_OBJDETECT "Enabled if opencv is built with objdetect module" OFF)
option(OPENCV_WITH_PHOTO "Enabled if opencv is built with photo module" OFF)
option(OPENCV_WITH_STITCHING "Enabled if opencv is built with stitching module" OFF)
option(OPENCV_WITH_VIDEO "Enabled if opencv is built with video module" OFF)
option(OPENCV_WITH_VIDEOIO_FFMPEG "Enabled if opencv is built with videoio module and ffmpeg" OFF)
# Options to test extra modules
option(OPENCV_WITH_SFM "Enabled if opencv is built with sfm module" OFF)

find_package(OpenCV REQUIRED core CONFIG)

add_executable(test_core test_core.cpp)
target_link_libraries(test_core PRIVATE opencv_core)
target_compile_features(test_core PRIVATE cxx_std_11)
add_test(NAME test_core COMMAND test_core)

if(OPENCV_WITH_CALIB3D)
    add_executable(test_calib3d test_calib3d.cpp)
    target_link_libraries(test_calib3d PRIVATE opencv_core opencv_calib3d)
    target_compile_features(test_calib3d PRIVATE cxx_std_11)
    add_test(NAME test_calib3d COMMAND test_calib3d)
endif()

if(OPENCV_WITH_FLANN)
    add_executable(test_flann test_flann.cpp)
    target_link_libraries(test_flann PRIVATE opencv_core opencv_flann)
    target_compile_features(test_flann PRIVATE cxx_std_11)
    add_test(NAME test_flann COMMAND test_flann)
endif()

if(OPENCV_WITH_GAPI)
    add_executable(test_gapi test_gapi.cpp)
    target_link_libraries(test_gapi PRIVATE opencv_gapi)
    target_compile_features(test_gapi PRIVATE cxx_std_11)
    add_test(NAME test_gapi COMMAND test_gapi)
endif()

if(OPENCV_WITH_IMGCODECS_PNG)
    add_executable(test_imgcodecs_with_png test_imgcodecs_with_png.cpp)
    target_link_libraries(test_imgcodecs_with_png PRIVATE opencv_core opencv_imgcodecs)
    target_compile_features(test_imgcodecs_with_png PRIVATE cxx_std_11)
    add_test(NAME test_imgcodecs_with_png COMMAND test_imgcodecs_with_png)
endif()

if(OPENCV_WITH_IMGPROC)
    add_executable(test_imgproc test_imgproc.cpp)
    target_link_libraries(test_imgproc PRIVATE opencv_core opencv_imgproc)
    target_compile_features(test_imgproc PRIVATE cxx_std_11)
    add_test(NAME test_imgproc COMMAND test_imgproc)
endif()

if(OPENCV_WITH_OBJDETECT)
    add_executable(test_objdetect test_objdetect.cpp)
    target_link_libraries(test_objdetect PRIVATE opencv_core opencv_objdetect)
    target_compile_features(test_objdetect PRIVATE cxx_std_11)
    add_test(NAME test_objdetect COMMAND test_objdetect)
endif()

if(OPENCV_WITH_PHOTO)
    add_executable(test_photo test_photo.cpp)
    target_link_libraries(test_photo PRIVATE opencv_core opencv_photo)
    target_compile_features(test_photo PRIVATE cxx_std_11)
    add_test(NAME test_photo COMMAND test_photo)
endif()

if(OPENCV_WITH_STITCHING)
    add_executable(test_stitching test_stitching.cpp)
    target_link_libraries(test_stitching PRIVATE opencv_core opencv_stitching)
    target_compile_features(test_stitching PRIVATE cxx_std_11)
    add_test(NAME test_stitching COMMAND test_stitching)
endif()

if(OPENCV_WITH_VIDEO)
    add_executable(test_video test_video.cpp)
    target_link_libraries(test_video PRIVATE opencv_video)
    target_compile_features(test_video PRIVATE cxx_std_11)
    add_test(NAME test_video COMMAND test_video)
endif()

if(OPENCV_WITH_VIDEOIO_FFMPEG)
    add_executable(test_videoio_with_ffmpeg test_videoio_with_ffmpeg.cpp)
    target_link_libraries(test_videoio_with_ffmpeg PRIVATE opencv_videoio)
    target_compile_features(test_videoio_with_ffmpeg PRIVATE cxx_std_11)
    add_test(NAME test_videoio_with_ffmpeg COMMAND test_videoio_with_ffmpeg)
endif()

if(OPENCV_WITH_SFM)
    add_executable(test_sfm test_sfm.cpp)
    target_link_libraries(test_sfm PRIVATE opencv_core opencv_sfm)
    target_compile_features(test_sfm PRIVATE cxx_std_11)
    add_test(NAME test_sfm COMMAND test_sfm)
endif()
