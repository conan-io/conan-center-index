diff --git a/mDNSPosix/mDNSPosix.c b/mDNSPosix/mDNSPosix.c
index 0a7c3df..5605f03 100644
--- a/mDNSPosix/mDNSPosix.c
+++ b/mDNSPosix/mDNSPosix.c
@@ -20,6 +20,7 @@
 #include "DNSCommon.h"
 #include "mDNSPosix.h"               // Defines the specific types needed to run mDNS on this platform
 #include "PlatformCommon.h"
+#include "uds_daemon.h"
 #include "dns_sd.h"
 
 #include <assert.h>
@@ -159,6 +160,19 @@ mDNSlocal void SockAddrTomDNSAddr(const struct sockaddr *const sa, mDNSAddr *ipA
 #pragma mark ***** Send and Receive
 #endif
 
+mDNSlocal PosixNetworkInterface *IfindexToInterfaceInfoPosix(mDNSInterfaceID InterfaceID)
+{
+    mDNS *const m = &mDNSStorage;
+    mDNSu32 ifindex = (mDNSu32)(uintptr_t)InterfaceID;
+    PosixNetworkInterface *intf;
+
+    intf = (PosixNetworkInterface*)(m->HostInterfaces);
+    while ((intf != NULL) && (mDNSu32) intf->index != ifindex)
+        intf = (PosixNetworkInterface *)(intf->coreIntf.next);
+
+    return intf ? intf->aliasIntf : mDNSNULL;
+}
+
 // mDNS core calls this routine when it needs to send a packet.
 mDNSexport mStatus mDNSPlatformSendUDP(const mDNS *const m, const void *const msg, const mDNSu8 *const end,
                                        mDNSInterfaceID InterfaceID, UDPSocket *src, const mDNSAddr *dst,
@@ -166,7 +180,7 @@ mDNSexport mStatus mDNSPlatformSendUDP(const mDNS *const m, const void *const ms
 {
     int err = 0;
     struct sockaddr_storage to;
-    PosixNetworkInterface * thisIntf = (PosixNetworkInterface *)(InterfaceID);
+    PosixNetworkInterface * thisIntf;
     int sendingsocket = -1;
     struct sockaddr *sa = (struct sockaddr *)&to;
 
@@ -177,6 +191,13 @@ mDNSexport mStatus mDNSPlatformSendUDP(const mDNS *const m, const void *const ms
     assert(end != NULL);
     assert((((char *) end) - ((char *) msg)) > 0);
 
+    thisIntf = IfindexToInterfaceInfoPosix(InterfaceID);
+    if (thisIntf == NULL)
+    {
+        LogMsg("mDNSPlatformSendUDP: Invalid argument -interface index is set to %p", InterfaceID);
+        return mStatus_BadParamErr;
+    }
+
     if (dstPort.NotAnInteger == 0)
     {
         LogMsg("mDNSPlatformSendUDP: Invalid argument -dstPort is set to 0");
@@ -652,9 +673,9 @@ mDNSexport mStatus mDNSPlatformTCPConnect(TCPSocket *sock, const mDNSAddr *dst,
     }
 
     // If we've been asked to bind to a single interface, do it.  See comment in mDNSMacOSX.c for more info.
-    if (InterfaceID)
+    PosixNetworkInterface *iface = IfindexToInterfaceInfoPosix(InterfaceID);
+    if (iface)
     {
-        PosixNetworkInterface *iface = (PosixNetworkInterface *)InterfaceID;
 #if defined(SO_BINDTODEVICE)
         result = setsockopt(sock->events.fd,
                             SOL_SOCKET, SO_BINDTODEVICE, iface->intfName, strlen(iface->intfName));
@@ -989,7 +1010,7 @@ mDNSexport mDNSInterfaceID mDNSPlatformInterfaceIDfromInterfaceIndex(mDNS *const
     while ((intf != NULL) && (mDNSu32) intf->index != index)
         intf = (PosixNetworkInterface *)(intf->coreIntf.next);
 
-    return (mDNSInterfaceID) intf;
+    return intf ? intf->coreIntf.InterfaceID : mDNSNULL;
 }
 
 mDNSexport mDNSu32 mDNSPlatformInterfaceIndexfromInterfaceID(mDNS *const m, mDNSInterfaceID id, mDNSBool suppressNetworkChange)
@@ -1004,14 +1025,14 @@ mDNSexport mDNSu32 mDNSPlatformInterfaceIndexfromInterfaceID(mDNS *const m, mDNS
     if (id == mDNSInterface_Any      ) return(kDNSServiceInterfaceIndexAny);
 
     intf = (PosixNetworkInterface*)(m->HostInterfaces);
-    while ((intf != NULL) && (mDNSInterfaceID) intf != id)
+    while ((intf != NULL) && intf->coreIntf.InterfaceID != id)
         intf = (PosixNetworkInterface *)(intf->coreIntf.next);
 
     if (intf) return intf->index;
 
     // If we didn't find the interface, check the RecentInterfaces list as well
     intf = gRecentInterfaces;
-    while ((intf != NULL) && (mDNSInterfaceID) intf != id)
+    while ((intf != NULL) && intf->coreIntf.InterfaceID != id)
         intf = (PosixNetworkInterface *)(intf->coreIntf.next);
 
     return intf ? intf->index : 0;
@@ -1398,7 +1419,8 @@ mDNSlocal int SetupOneInterface(mDNS *const m, struct sockaddr *intfAddr, struct
 #endif
         alias                      = SearchForInterfaceByName(m, intf->intfName);
         if (alias == NULL) alias   = intf;
-        intf->coreIntf.InterfaceID = (mDNSInterfaceID)alias;
+        intf->coreIntf.InterfaceID = (mDNSInterfaceID)(uintptr_t)alias->index;
+        intf->aliasIntf = alias;
 
         if (alias != intf)
             debugf("SetupOneInterface: %s %#a is an alias of %#a", intfName, &intf->coreIntf.ip, &alias->coreIntf.ip);
