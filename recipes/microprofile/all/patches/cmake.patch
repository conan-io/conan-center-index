--- /dev/null
+++ b/CMakeLists.txt
@@ -0,0 +1,138 @@
+cmake_minimum_required(VERSION 3.4)
+project(microprofile)
+
+option(MP_ENABLED "Enable library" ON)
+option(MP_DEBUG "Enable debug mode" OFF)
+option(MP_MINIZ "Use Miniz library" OFF)
+option(MP_BIG_ENDIAN "Use big endian" OFF)
+option(MP_GPU_TIMER_CALLBACKS "Enable GPU timer callbacks" OFF)
+option(MP_GPU_TIMERS_GL "Enable OpenGL GPU timers" OFF)
+option(MP_GPU_TIMERS_D3D11 "Enable DirectX 11 GPU timers" OFF)
+option(MP_GPU_TIMERS_D3D12 "Enable DirectX 12 GPU timers" OFF)
+option(MP_GPU_TIMERS_VULKAN "Enable Vulkan GPU timers" OFF)
+
+set(MICROPROFILE_EXPORT_FILENAME microprofile.export.h)
+set(MICROPROFILE_PUBLIC_HEADERS
+        ${PROJECT_SOURCE_DIR}/microprofile.h
+        ${CMAKE_CURRENT_BINARY_DIR}/${MICROPROFILE_EXPORT_FILENAME}
+)
+
+set(THREADS_PREFER_PTHREAD_FLAG ON)
+find_package(Threads REQUIRED)
+
+add_definitions("-DMICROPROFILE_PER_THREAD_BUFFER_SIZE=${MP_THREAD_BUFFER_SIZE}")
+add_definitions("-DMICROPROFILE_PER_THREAD_GPU_BUFFER_SIZE=${MP_THREAD_GPU_BUFFER_SIZE}")
+add_definitions("-DMICROPROFILE_MAX_FRAME_HISTORY=${MP_MAX_FRAME_HISTORY}")
+add_definitions("-DMICROPROFILE_WEBSERVER_PORT=${MP_WEBSERVER_PORT}")
+add_definitions("-DMICROPROFILE_WEBSERVER_MAXFRAMES=${MP_WEBSERVER_MAXFRAMES}")
+add_definitions("-DMICROPROFILE_WEBSERVER_SOCKET_BUFFER_SIZE=${MP_WEBSERVER_SOCKET_BUFFER_SIZE}")
+add_definitions("-DMICROPROFILE_GPU_FRAME_DELAY=${MP_GPU_FRAME_DELAY}")
+add_definitions("-DMICROPROFILE_NAME_MAX_LEN=${MP_NAME_MAX_LENGTH}")
+add_definitions("-DMICROPROFILE_MAX_TIMERS=${MP_MAX_TIMERS}")
+add_definitions("-DMICROPROFILE_MAX_THREADS=${MP_MAX_THREADS}")
+add_definitions("-DMICROPROFILE_MAX_STRING=${MP_MAX_STRING_LENGTH}")
+add_definitions("-DMICROPROFILE_TIMELINE_MAX_TOKENS=${MP_TIMELINE_MAX_TOKENS}")
+add_definitions("-DMICROPROFILE_THREAD_LOG_FRAMES_REUSE=${MP_THREAD_LOG_FRAMES_REUSE}")
+add_definitions("-DMICROPROFILE_MAX_GROUPS=${MP_MAX_GROUPS}")
+
+if (MP_ENABLED)
+    add_definitions("-DMICROPROFILE_ENABLED=1")
+else()
+    add_definitions("-DMICROPROFILE_ENABLED=0")
+endif()
+
+if (MP_DEBUG)
+    add_definitions("-DMICROPROFILE_DEBUG=1")
+else()
+    add_definitions("-DMICROPROFILE_DEBUG=0")
+endif()
+
+if (MP_MINIZ)
+    add_definitions("-DMICROPROFILE_MINIZ=1")
+else()
+    add_definitions("-DMICROPROFILE_MINIZ=0")
+endif()
+
+if (MP_BIG_ENDIAN)
+    add_definitions("-DMICROPROFILE_BIG_ENDIAN=1")
+else()
+    add_definitions("-DMICROPROFILE_BIG_ENDIAN=0")
+endif()
+
+if (MP_GPU_TIMERS_GL OR MP_GPU_TIMERS_D3D11 OR MP_GPU_TIMERS_D3D12 OR MP_GPU_TIMERS_VULKAN)
+    add_definitions("-DMICROPROFILE_GPU_TIMERS=1")
+else()
+    add_definitions("-DMICROPROFILE_GPU_TIMERS=0")
+endif()
+
+if (MP_GPU_TIMER_CALLBACKS)
+    add_definitions("-DMICROPROFILE_GPU_TIMER_CALLBACKS=1")
+else()
+    add_definitions("-DMICROPROFILE_GPU_TIMER_CALLBACKS=0")
+endif()
+
+if (MP_GPU_TIMERS_GL)
+    add_definitions("-DMICROPROFILE_GPU_TIMERS_GL=1")
+else()
+    add_definitions("-DMICROPROFILE_GPU_TIMERS_GL=0")
+endif()
+
+if (MP_GPU_TIMERS_D3D11)
+    add_definitions("-DMICROPROFILE_GPU_TIMERS_D3D11=1")
+else()
+    add_definitions("-DMICROPROFILE_GPU_TIMERS_D3D11=0")
+endif()
+
+if (MP_GPU_TIMERS_D3D12)
+    add_definitions("-DMICROPROFILE_GPU_TIMERS_D3D12=1")
+else()
+    add_definitions("-DMICROPROFILE_GPU_TIMERS_D3D12=0")
+endif()
+
+if (MP_GPU_TIMERS_VULKAN)
+    add_definitions("-DMICROPROFILE_GPU_TIMERS_VULKAN=1")
+else()
+    add_definitions("-DMICROPROFILE_GPU_TIMERS_VULKAN=0")
+endif()
+
+add_library(${PROJECT_NAME} microprofile.h microprofile.cpp)
+
+include(GenerateExportHeader)
+generate_export_header(${PROJECT_NAME}
+        EXPORT_MACRO_NAME MICROPROFILE_API
+        EXPORT_FILE_NAME ${MICROPROFILE_EXPORT_FILENAME}
+)
+
+target_include_directories(${PROJECT_NAME} PUBLIC
+        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>
+        $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>
+        $<INSTALL_INTERFACE:include>
+)
+
+target_compile_definitions(${PROJECT_NAME} PUBLIC MICROPROFILE_EXPORT)
+
+target_compile_features(${PROJECT_NAME} PUBLIC cxx_std_11)
+
+target_link_libraries(${PROJECT_NAME} PRIVATE Threads::Threads)
+
+if (WIN32)
+    target_link_libraries(${PROJECT_NAME} PRIVATE ws2_32)
+endif()
+
+if (MP_MINIZ)
+    target_link_libraries(${PROJECT_NAME} PRIVATE CONAN_PKG::miniz)
+endif()
+
+if (MP_GPU_TIMERS_VULKAN)
+    target_link_libraries(${PROJECT_NAME} PRIVATE CONAN_PKG::vulkan-loader)
+endif()
+
+set_target_properties(${PROJECT_NAME} PROPERTIES PUBLIC_HEADER "${MICROPROFILE_PUBLIC_HEADERS}")
+
+include(GNUInstallDirs)
+install(TARGETS ${PROJECT_NAME}
+        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+        PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/${PROJECT_NAME}
+)
