--- meson.build
+++ meson.build
@@ -20,7 +20,6 @@
 
 cc = meson.get_compiler('c')
 cpp = meson.get_compiler('cpp')
-cy = meson.get_compiler('cython')
 
 # Check compiler is recent enough (see the SciPy Toolchain Roadmap for details)
 if cc.get_id() == 'gcc'
@@ -32,9 +31,6 @@
     error('NumPy requires at least vc142 (default with Visual Studio 2019) ' + \
           'when building with MSVC')
   endif
-endif
-if not cy.version().version_compare('>=0.29.34')
-  error('NumPy requires Cython >= 0.29.34')
 endif
 
 py = import('python').find_installation(pure: false)

--- numpy/meson.build
+++ numpy/meson.build
@@ -234,18 +234,11 @@
   python_sources += ['_distributor_init_local.py']
 endif
 
-py.install_sources(
-  python_sources,
-  subdir: 'numpy'
-)
-
 src_file_cli = find_program('_build_utils/process_src_template.py')
 src_file = generator(src_file_cli,
   arguments : ['@INPUT@', '--outfile', '@OUTPUT@'],
   output : '@BASENAME@'
 )
-
-tempita_cli = find_program('_build_utils/tempita.py')
 
 pure_subdirs = [
   '_pyinstaller',
@@ -270,34 +263,6 @@
 
 np_dir = py.get_install_dir() / 'numpy'
 
-# Generate version.py for sdist
-meson.add_dist_script(
-   ['_build_utils/gitversion.py', '--meson-dist', '--write',
-     'numpy/version.py']
-)
-if not fs.exists('version.py')
-  generate_version = custom_target(
-    'generate-version',
-    install: true,
-    build_always_stale: true,
-    build_by_default: true,
-    output: 'version.py',
-    input: '_build_utils/gitversion.py',
-    command: [py, '@INPUT@', '--write', '@OUTPUT@'],
-    install_dir: np_dir
-  )
-else
-  # When building from sdist, version.py exists and should be included
-  py.install_sources(
-    ['version.py'],
-    subdir : 'numpy'
-  )
-endif
-
-foreach subdir: pure_subdirs
-  install_subdir(subdir, install_dir: np_dir)
-endforeach
-
 compilers = {
   'C': cc,
   'CPP': cpp,
@@ -369,14 +334,5 @@
   endif
 endforeach
 
-configure_file(
-  input: '__config__.py.in',
-  output: '__config__.py',
-  configuration : conf_data,
-  install_dir: np_dir,
-)
-
 subdir('core')
-subdir('fft')
-subdir('linalg')
 subdir('random')

--- numpy/random/meson.build
+++ numpy/random/meson.build
@@ -18,31 +18,6 @@
   name_suffix: name_suffix_staticlib,
 )
 
-# Build Cython extensions for numpy.random
-# ----------------------------------------
-# pyx -> c transpile output depends on copied __init__.py and pxd files
-_cython_tree_random = [
-  fs.copyfile('__init__.py'),
-  fs.copyfile('__init__.pxd'),
-  fs.copyfile('_common.pxd'),
-  fs.copyfile('bit_generator.pxd'),
-  fs.copyfile('c_distributions.pxd'),
-]
-# Need to use `custom_target` because we need to install this .pxd file
-_cython_tree_random += custom_target('_bounded_integer_pxd',
-  output: '_bounded_integers.pxd',
-  input: '_bounded_integers.pxd.in',
-  command: [tempita_cli, '@INPUT@', '-o', '@OUTPUT@'],
-  install: true,
-  install_dir: np_dir / 'random'
-)
-
-_bounded_integers_pyx = custom_target('_bounded_integer_pyx',
-  output: '_bounded_integers.pyx',
-  input: '_bounded_integers.pyx.in',
-  command: [tempita_cli, '@INPUT@', '-o', '@OUTPUT@'],
-)
-
 c_args_random = [
   cflags_large_file_support,
   '-DNPY_NO_DEPRECATED_API=0',  # Cython still uses old NumPy C API
@@ -50,3 +25,4 @@
 if host_machine.system() == 'cygwin'
   c_args_random += ['-Wl,--export-all-symbols']
 endif
+subdir_done()
