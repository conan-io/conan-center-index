cmake_minimum_required(VERSION 3.7)
project(sqlite3 LANGUAGES C)
# recommended compilte-time options from https://www.sqlite.org/compile.html#recommended_compile_time_options
set(DQS CACHE STRING "This setting disables the double-quoted string literal misfeature.")
set(THREADSAFE CACHE STRING "Setting -DSQLITE_THREADSAFE=0 causes all of the mutex and thread-safety logic in SQLite to be omitted. This is the single compile-time option causes SQLite to run about 2% faster and also reduces the size of the library by about 2%. But the downside is that using the compile-time option means that SQLite can never be used by more than a single thread at a time, even if each thread has its own database connection.")
set(DEFAULT_MEMSTATUS CACHE STRING "This setting causes the sqlite3_status() interfaces that track memory usage to be disabled. This helps the sqlite3_malloc() routines run much faster, and since SQLite uses sqlite3_malloc() internally, this helps to make the entire library faster.")
set(DEFAULT_WAL_SYNCHRONOUS CACHE STRING "For maximum database safety following a power loss, the setting of PRAGMA synchronous=FULL is recommended. However, in WAL mode, complete database integrity is guaranteed with PRAGMA synchronous=NORMAL. With PRAGMA synchronous=NORMAL in WAL mode, recent changes to the database might be rolled back by a power loss, but the database will not be corrupted. Furthermore, transaction commit is much faster in WAL mode using synchronous=NORMAL than with the default synchronous=FULL. For these reasons, it is recommended that the synchronous setting be changed from FULL to NORMAL when switching to WAL mode. This compile-time option will accomplish that.")
option(LIKE_DOESNT_MATCH_BLOBS "Historically, SQLite has allowed BLOB operands to the LIKE and GLOB operators. But having a BLOB as an operand of LIKE or GLOB complicates and slows the LIKE optimization. When this option is set, it means that the LIKE and GLOB operators always return FALSE if either operand is a BLOB. That simplifies the implementation of the LIKE optimization and allows queries that use the LIKE optimization to run faster.")
set(MAX_EXPR_DEPTH CACHE STRING "Setting the maximum expression parse-tree depth to zero disables all checking of the expression parse-tree depth, which simplifies the code resulting in faster execution, and helps the parse tree to use less memory.")
option(OMIT_DECLTYPE "By omitting the (seldom-needed) ability to return the declared type of columns from the result set of query, prepared statements can be made to consume less memory.")
option(OMIT_DEPRECATED "Omitting deprecated interfaces and features will not help SQLite to run any faster. It will reduce the library footprint, however. And it is the right thing to do.")
option(OMIT_PROGRESS_CALLBACK "The progress handler callback counter must be checked in the inner loop of the bytecode engine. By omitting this interface, a single conditional is removed from the inner loop of the bytecode engine, helping SQL statements to run slightly faster.")
option(OMIT_SHARED_CACHE "Omitting the possibility of using shared cache allows many conditionals in performance-critical sections of the code to be eliminated. This can give a noticeable improvement in performance.")
option(USE_ALLOCA "Make use of alloca() for dynamically allocating temporary stack space for use within a single function, on systems that support alloca(). Without this option, temporary space is allocated from the heap.")
option(OMIT_AUTOINIT "The SQLite library needs to be initialized using a call to sqlite3_initialize() before certain interfaces are used. This initialization normally happens automatically the first time it is needed. However, with the SQLITE_OMIT_AUTOINIT option, the automatic initialization is omitted. This helps many API calls to run a little faster (since they do not have to check to see if initialization has already occurred and then run initialization if it has not previously been invoked) but it also means that the application must call sqlite3_initialize() manually. If SQLite is compiled with -DSQLITE_OMIT_AUTOINIT and a routine like sqlite3_malloc() or sqlite3_vfs_find() or sqlite3_open() is invoked without first calling sqlite3_initialize(), the likely result will be a segfault.")

# additional options from https://sqlite.org/compile.html
option(SQLITE3_BUILD_EXECUTABLE "Build sqlite command line utility for accessing SQLite databases")
option(ENABLE_JSON1 "Enable JSON SQL functions")
option(ENABLE_COLUMN_METADATA "Enable additional APIs that provide convenient access to meta-data about tables and queries")
option(ENABLE_DBSTAT_VTAB "Enable the DBSTAT virtual table")
option(ENABLE_EXPLAIN_COMMENTS "Enable SQLite to insert comment text into the output of EXPLAIN")
option(ENABLE_FTS3 "Enable version 3 of the full-text search engine")
option(ENABLE_FTS3_PARENTHESIS "Kodifies the query pattern parser in FTS3 such that it supports operators AND and NOT (in addition to the usual OR and NEAR) and also allows query expressions to contain nested parenthesis")
option(ENABLE_FTS4 "Enable version 3 and 4 of the full-text search engine")
option(ENABLE_FTS5 "Enable version 5 of the full-text search engine")
option(ENABLE_SOUNDEX "Enable the soundex() SQL function")
option(ENABLE_PREUPDATE_HOOK "Enables APIs to handle any change to a rowid table")
option(ENABLE_RTREE "Enable support for the R*Tree index extension")
option(ENABLE_UNLOCK_NOTIFY "Enable support for the unlock notify API")
option(ENABLE_DEFAULT_SECURE_DELETE "Turns on secure deletion by default")
option(OMIT_LOAD_EXTENSION "Omits the entire extension loading mechanism from SQLite")
if(SQLITE3_VERSION VERSION_GREATER_EQUAL "3.35.0")
    option(ENABLE_MATH_FUNCTIONS "Enables the built-in SQL math functions" ON)
else()
    set(ENABLE_MATH_FUNCTIONS OFF)
endif()
option(HAVE_FDATASYNC "Use fdatasync() instead of fsync() on unix systems")
option(HAVE_GMTIME_R "Use the threadsafe gmtime_r()")
option(HAVE_LOCALTIME_R "Use the threadsafe localtime_r()")
option(HAVE_POSIX_FALLOCATE "Use posix_fallocate()")
option(HAVE_STRERROR_R "Use strerror_r()")
option(HAVE_USLEEP "Use usleep() system call to implement the xSleep method")
option(DISABLE_GETHOSTUUID "Disable function gethostuuid")
set(MAX_COLUMN CACHE STRING "The maximum number of columns in a table / index / view")
set(MAX_VARIABLE_NUMBER CACHE STRING "The maximum value of a ?nnn wildcard that the parser will accept")
set(MAX_BLOB_SIZE CACHE STRING "Set the maximum number of bytes in a string or BLOB")
option(DISABLE_DEFAULT_VFS "Disable default VFS implementation")
option(ENABLE_DBPAGE_VTAB "The SQLITE_DBPAGE extension implements an eponymous-only virtual table that provides direct access to the underlying database file by interacting with the pager. SQLITE_DBPAGE is capable of both reading and writing any page of the database. Because interaction is through the pager layer, all changes are transactional.")

add_library(${PROJECT_NAME} ${SQLITE3_SRC_DIR}/sqlite3.c)
set_target_properties(${PROJECT_NAME} PROPERTIES C_VISIBILITY_PRESET hidden)
if(BUILD_SHARED_LIBS)
    if(WIN32)
        target_compile_definitions(${PROJECT_NAME}
            PRIVATE "SQLITE_API=__declspec(dllexport)"
            INTERFACE "SQLITE_API=__declspec(dllimport)"
        )
    else()
        target_compile_definitions(${PROJECT_NAME}
            PUBLIC "SQLITE_API=__attribute__((visibility(\"default\")))"
        )
    endif()
endif()

# recommended compilte-time options
if(DQS)
    target_compile_definitions(${PROJECT_NAME} PRIVATE SQLITE_DQS=${DQS})
endif()
if(THREADSAFE)
    target_compile_definitions(${PROJECT_NAME} PRIVATE SQLITE_THREADSAFE=${THREADSAFE})
endif()
if(DEFAULT_MEMSTATUS)
    target_compile_definitions(${PROJECT_NAME} PRIVATE SQLITE_DEFAULT_MEMSTATUS=${DEFAULT_MEMSTATUS})
endif()
if(DEFAULT_WAL_SYNCHRONOUS)
    target_compile_definitions(${PROJECT_NAME} PRIVATE SQLITE_DEFAULT_WAL_SYNCHRONOUS=${DEFAULT_WAL_SYNCHRONOUS})
endif()
if(LIKE_DOESNT_MATCH_BLOBS)
    target_compile_definitions(${PROJECT_NAME} PRIVATE SQLITE_LIKE_DOESNT_MATCH_BLOBS)
endif()
if(MAX_EXPR_DEPTH)
    target_compile_definitions(${PROJECT_NAME} PRIVATE SQLITE_MAX_EXPR_DEPTH=${MAX_EXPR_DEPTH})
endif()
if(OMIT_DECLTYPE)
    target_compile_definitions(${PROJECT_NAME} PRIVATE SQLITE_OMIT_DECLTYPE)
endif()
if (OMIT_DEPRECATED)
    target_compile_definitions(${PROJECT_NAME} PRIVATE SQLITE_OMIT_DEPRECATED)
endif()
if(OMIT_PROGRESS_CALLBACK)
    target_compile_definitions(${PROJECT_NAME} PRIVATE SQLITE_OMIT_PROGRESS_CALLBACK)
endif()
if(OMIT_SHARED_CACHE)
    target_compile_definitions(${PROJECT_NAME} PRIVATE SQLITE_OMIT_SHARED_CACHE)
endif()
if(USE_ALLOCA)
    target_compile_definitions(${PROJECT_NAME} PRIVATE SQLITE_USE_ALLOCA)
endif()
if(OMIT_AUTOINIT)
    target_compile_definitions(${PROJECT_NAME} PRIVATE SQLITE_OMIT_AUTOINIT)
endif()

# additional options
if(ENABLE_JSON1)
    target_compile_definitions(${PROJECT_NAME} PRIVATE SQLITE_ENABLE_JSON1)
endif()
if(ENABLE_COLUMN_METADATA)
    target_compile_definitions(${PROJECT_NAME}  PRIVATE SQLITE_ENABLE_COLUMN_METADATA)
endif()
if(ENABLE_DBSTAT_VTAB)
    target_compile_definitions(${PROJECT_NAME}  PRIVATE SQLITE_ENABLE_DBSTAT_VTAB)
endif()
if(ENABLE_EXPLAIN_COMMENTS)
    target_compile_definitions(${PROJECT_NAME}  PRIVATE SQLITE_ENABLE_EXPLAIN_COMMENTS)
endif()
if(ENABLE_FTS3)
    target_compile_definitions(${PROJECT_NAME}  PRIVATE SQLITE_ENABLE_FTS3)
endif()
if(ENABLE_FTS3_PARENTHESIS)
    target_compile_definitions(${PROJECT_NAME}  PRIVATE SQLITE_ENABLE_FTS3_PARENTHESIS)
endif()
if(ENABLE_FTS4)
    target_compile_definitions(${PROJECT_NAME}  PRIVATE SQLITE_ENABLE_FTS4)
endif()
if(ENABLE_FTS5)
    target_compile_definitions(${PROJECT_NAME}  PRIVATE SQLITE_ENABLE_FTS5)
endif()
if(ENABLE_PREUPDATE_HOOK)
    target_compile_definitions(${PROJECT_NAME}  PRIVATE SQLITE_ENABLE_PREUPDATE_HOOK)
endif()
if(ENABLE_RTREE)
    target_compile_definitions(${PROJECT_NAME}  PRIVATE SQLITE_ENABLE_RTREE)
endif()
if(ENABLE_UNLOCK_NOTIFY)
    target_compile_definitions(${PROJECT_NAME}  PRIVATE SQLITE_ENABLE_UNLOCK_NOTIFY)
endif()
if(ENABLE_DEFAULT_SECURE_DELETE)
    target_compile_definitions(${PROJECT_NAME}  PRIVATE SQLITE_SECURE_DELETE)
endif()
if(ENABLE_SOUNDEX)
    target_compile_definitions(${PROJECT_NAME}  PRIVATE SQLITE_SOUNDEX)
endif()
if(OMIT_LOAD_EXTENSION)
    target_compile_definitions(${PROJECT_NAME}  PRIVATE SQLITE_OMIT_LOAD_EXTENSION)
endif()
if(ENABLE_MATH_FUNCTIONS)
    target_compile_definitions(${PROJECT_NAME} PRIVATE SQLITE_ENABLE_MATH_FUNCTIONS)
endif()
if(HAVE_FDATASYNC)
    target_compile_definitions(${PROJECT_NAME}  PRIVATE HAVE_FDATASYNC)
endif()
if(HAVE_GMTIME_R)
    target_compile_definitions(${PROJECT_NAME}  PRIVATE HAVE_GMTIME_R)
endif()
if(HAVE_LOCALTIME_R)
    target_compile_definitions(${PROJECT_NAME}  PRIVATE HAVE_LOCALTIME_R)
endif()
if(HAVE_POSIX_FALLOCATE)
    target_compile_definitions(${PROJECT_NAME}  PRIVATE HAVE_POSIX_FALLOCATE)
endif()
if(HAVE_STRERROR_R)
    target_compile_definitions(${PROJECT_NAME}  PRIVATE HAVE_STRERROR_R)
endif()
if(HAVE_USLEEP)
    target_compile_definitions(${PROJECT_NAME}  PRIVATE HAVE_USLEEP)
endif()
if(DISABLE_GETHOSTUUID)
    target_compile_definitions(${PROJECT_NAME}  PRIVATE HAVE_GETHOSTUUID=0)
endif()
if(MAX_COLUMN)
    target_compile_definitions(${PROJECT_NAME} PRIVATE SQLITE_MAX_COLUMN=${MAX_COLUMN})
endif()
if(MAX_VARIABLE_NUMBER)
    target_compile_definitions(${PROJECT_NAME} PRIVATE SQLITE_MAX_VARIABLE_NUMBER=${MAX_VARIABLE_NUMBER})
endif()
if(MAX_BLOB_SIZE)
    target_compile_definitions(${PROJECT_NAME} PRIVATE SQLITE_MAX_LENGTH=${MAX_BLOB_SIZE})
endif()
if(DISABLE_DEFAULT_VFS)
    target_compile_definitions(${PROJECT_NAME} PRIVATE SQLITE_OS_OTHER=1)
endif()
if(ENABLE_DBPAGE_VTAB)
    target_compile_definitions(${PROJECT_NAME} PRIVATE SQLITE_ENABLE_DBPAGE_VTAB)
endif()

if(THREADSAFE)
    find_package(Threads REQUIRED)
    target_link_libraries(${PROJECT_NAME}  PRIVATE Threads::Threads)
endif()

if(NOT OMIT_LOAD_EXTENSION)
    target_link_libraries(${PROJECT_NAME}  PRIVATE ${CMAKE_DL_LIBS})
endif()

if(ENABLE_FTS5 OR ENABLE_MATH_FUNCTIONS)
    include(CheckLibraryExists)
    # Check if math functionality is on the separate 'libm' library,
    # otherwise assume that it is already part of the C runtime.
    # The `m` library is part of the compiler toolchain, this checks
    # if the compiler can successfully link against the library.
    check_library_exists(m log "" HAVE_MATH_LIBRARY)
    if(HAVE_MATH_LIBRARY)
        target_link_libraries(${PROJECT_NAME} PRIVATE m)
    endif()
endif()

include(GNUInstallDirs)
install(TARGETS ${PROJECT_NAME}
        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR})

install(DIRECTORY ${SQLITE3_SRC_DIR}/ DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
        FILES_MATCHING PATTERN "*.h")

if(SQLITE3_BUILD_EXECUTABLE)
    add_executable(sqlite3-bin ${SQLITE3_SRC_DIR}/shell.c)
    target_link_libraries(sqlite3-bin PRIVATE ${PROJECT_NAME})
    if(ENABLE_DBPAGE_VTAB)
        target_compile_definitions(sqlite3-bin PRIVATE SQLITE_ENABLE_DBPAGE_VTAB)
    endif()
    set_target_properties(sqlite3-bin PROPERTIES OUTPUT_NAME "sqlite3" PDB_NAME "sqlite3-bin")
    include(CheckSymbolExists)
    check_symbol_exists(system "stdlib.h" HAVE_SYSTEM)
    if(NOT HAVE_SYSTEM)
        target_compile_definitions(sqlite3-bin PRIVATE SQLITE_NOHAVE_SYSTEM)
    endif()
    install(TARGETS sqlite3-bin DESTINATION ${CMAKE_INSTALL_BINDIR})
endif()
