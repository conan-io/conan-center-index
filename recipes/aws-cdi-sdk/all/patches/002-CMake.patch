commit d58e79a4914d8d8d8bfad3a3d059ff169cb87077
Author: dvirtz <dvirtz@gmail.com>
Date:   Mon Jul 5 09:51:24 2021 +0300

    build standalone cmake

diff --git a/aws-cpp-sdk-cdi/CMakeLists.txt b/aws-cpp-sdk-cdi/CMakeLists.txt
index 9ca1679..193e136 100644
--- a/aws-cpp-sdk-cdi/CMakeLists.txt
+++ b/aws-cpp-sdk-cdi/CMakeLists.txt
@@ -1,4 +1,32 @@
-add_project(aws-cpp-sdk-cdi "C++ SDK for the AWS cdi service" aws-cpp-sdk-core)
+find_package(AWSSDK COMPONENTS aws-sdk-cpp-core)
+
+set(AWS_NATIVE_SDK_ROOT ${CMAKE_CURRENT_SOURCE_DIR})
+set(SIMPLE_INSTALL TRUE)
+
+if (CMAKE_INSTALL_BINDIR)
+    set(BINARY_DIRECTORY "${CMAKE_INSTALL_BINDIR}")
+endif()
+
+if (CMAKE_INSTALL_LIBDIR)
+    set(LIBRARY_DIRECTORY "${CMAKE_INSTALL_LIBDIR}")
+endif()
+
+if (CMAKE_INSTALL_INCLUDEDIR)
+    set(INCLUDE_DIRECTORY "${CMAKE_INSTALL_INCLUDEDIR}")
+endif()
+
+if(BUILD_SHARED_LIBS)
+    set(ARCHIVE_DIRECTORY "${BINARY_DIRECTORY}")
+else()
+    set(ARCHIVE_DIRECTORY "${LIBRARY_DIRECTORY}")
+endif()
+
+include(CMakePackageConfigHelpers)
+include(cmake/initialize_project_version.cmake)
+include(cmake/utilities.cmake)
+include(cmake/compiler_settings.cmake)
+
+add_project(aws-cpp-sdk-cdi "C++ SDK for the AWS cdi service" AWS::aws-sdk-cpp-core)
 
 file(GLOB AWS_CDI_HEADERS
     "include/aws/cdi/*.h"
diff --git a/aws-cpp-sdk-cdi/cmake/compiler_settings.cmake b/aws-cpp-sdk-cdi/cmake/compiler_settings.cmake
new file mode 100644
index 0000000..52c93ca
--- /dev/null
+++ b/aws-cpp-sdk-cdi/cmake/compiler_settings.cmake
@@ -0,0 +1,161 @@
+# Compiler recognition
+set(COMPILER_MSVC 0)
+set(COMPILER_GCC 0)
+set(COMPILER_CLANG 0)
+
+# ToDo: extend as necessary and remove common assumptions
+if(MSVC)
+    set(COMPILER_MSVC 1)
+else()
+    if(CMAKE_CXX_COMPILER_ID MATCHES "Clang")
+        set(COMPILER_CLANG 1)
+    else()
+        set(COMPILER_GCC 1)
+    endif()
+    set(USE_GCC_FLAGS 1)
+endif()
+
+function(set_compiler_flags target)
+    if(NOT MSVC)
+        set_gcc_flags()
+        target_compile_options(${target} PRIVATE "${AWS_COMPILER_FLAGS}")
+        string(REPLACE ";" " " _TMP "${AWS_COMPILER_FLAGS}")
+        set(PKG_CONFIG_CFLAGS "${_TMP}" CACHE INTERNAL "C++ compiler flags which affect the ABI")
+    endif()
+endfunction()
+
+function(set_compiler_warnings target)
+    if(NOT MSVC)
+        set_gcc_warnings()
+        target_compile_options(${target} PRIVATE "${AWS_COMPILER_WARNINGS}")
+    endif()
+endfunction()
+
+
+macro(set_gcc_flags)
+    list(APPEND AWS_COMPILER_FLAGS "-fno-exceptions" "-std=c++${CPP_STANDARD}")
+
+    if(NOT BUILD_SHARED_LIBS)
+        list(APPEND AWS_COMPILER_FLAGS "-fPIC")
+    endif()
+
+    if(NOT ENABLE_RTTI)
+        list(APPEND AWS_COMPILER_FLAGS "-fno-rtti")
+    endif()
+
+    if(MINIMIZE_SIZE AND COMPILER_GCC)
+        list(APPEND AWS_COMPILER_FLAGS "-s")
+    endif()
+
+    if(NOT BUILD_SHARED_LIBS AND NOT ENABLE_VIRTUAL_OPERATIONS)
+        list(APPEND AWS_COMPILER_FLAGS "-ffunction-sections;-fdata-sections")
+    endif()
+endmacro()
+
+macro(set_gcc_warnings)
+    list(APPEND AWS_COMPILER_WARNINGS "-Wall" "-Werror" "-pedantic" "-Wextra")
+    if(COMPILER_CLANG)
+        if(PLATFORM_ANDROID)
+            # when using clang with libc and API lower than 21 we need to include Android support headers and ignore the gnu-include-next warning.
+            if(ANDROID_STL MATCHES "libc" AND ANDROID_NATIVE_API_LEVEL_NUM LESS "21")
+                # NDK lower than 12 doesn't support ignoring the gnu-include-next warning so we need to disable pedantic mode.
+                if(NDK_RELEASE_NUMBER LESS "12000")
+                    string(REGEX REPLACE "-pedantic" "" AWS_COMPILER_WARNINGS "${AWS_COMPILER_WARNINGS}")
+                else()
+                    list(APPEND AWS_COMPILER_WARNINGS "-Wno-gnu-include-next")
+                endif()
+            endif()
+        endif()
+    endif()
+endmacro()
+
+macro(set_msvc_flags)
+    if(MSVC)
+        # Based on the FORCE_SHARED_CRT and BUILD_SHARED_LIBS options, make sure our compile/link flags bring in the right CRT library
+        # modified from gtest's version; while only the else clause is actually necessary, do both for completeness/future-proofing
+        foreach (var
+                CMAKE_CXX_FLAGS CMAKE_CXX_FLAGS_DEBUG CMAKE_CXX_FLAGS_RELEASE
+                CMAKE_CXX_FLAGS_MINSIZEREL CMAKE_CXX_FLAGS_RELWITHDEBINFO)
+            if(BUILD_SHARED_LIBS OR FORCE_SHARED_CRT)
+                string(REPLACE "/MT" "/MD" ${var} "${${var}}")
+            else()
+                string(REPLACE "/MD" "/MT" ${var} "${${var}}")
+            endif()
+        endforeach()
+
+        # enable parallel builds
+        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /MP")
+        # some of the clients are exceeding the 16-bit code section limit when building x64 debug, so use /bigobj when we build
+        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /bigobj")
+
+        if(NOT ENABLE_RTTI)
+            string(REGEX REPLACE "/GR " " " CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
+            set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /GR-")
+        endif()
+
+        # special windows build options:
+        #   debug info: pdbs with dlls, embedded in static libs
+        #   release optimizations to purely focus on size, override debug info settings as necessary
+        if(BUILD_SHARED_LIBS)
+            set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /Zi")
+            set(CMAKE_SHARED_LINKER_FLAGS_RELEASE "${CMAKE_SHARED_LINKER_FLAGS_RELEASE} /DEBUG /OPT:REF /OPT:ICF")
+        else()
+            if(CMAKE_CXX_FLAGS MATCHES "/Zi")
+                string(REGEX REPLACE "/Zi" "" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
+            endif()
+            if(CMAKE_CXX_FLAGS_DEBUG MATCHES "/Zi")
+                message(STATUS "Clearing pdb setting")
+                string(REGEX REPLACE "/Zi" "" CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG}")
+            endif()
+
+            # put Z7 in config-specific flags so we can strip from release if we're concerned about size
+            set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /Z7")
+            set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /Z7")
+        endif()
+
+        if(MINIMIZE_SIZE)
+            # strip debug info from release
+            string(REGEX REPLACE "/Z[a-zA-Z0-9]" "" CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE}")
+            string(REGEX REPLACE "/DEBUG" "" CMAKE_SHARED_LINKER_FLAGS_RELEASE "${CMAKE_SHARED_LINKER_FLAGS_RELEASE}")
+
+            # strip optimization settings and replace with
+            string(REGEX REPLACE "/O[a-zA-Z0-9]*" "" CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE}")
+
+            # pure size flags
+            set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /O1 /Ob0 /Os")
+        endif()
+    endif()
+endmacro()
+
+macro(set_msvc_warnings)
+    if(MSVC)
+        #remove bogus errors at generation time if these variables haven't been manually set
+        if(NOT CMAKE_CONFIGURATION_TYPES)
+            set(CMAKE_CONFIGURATION_TYPES "Debug;Release;MinSizeRel;RelWithDebInfo")
+        endif()
+
+        if(NOT CMAKE_CXX_FLAGS_DEBUGOPT)
+            set(CMAKE_CXX_FLAGS_DEBUGOPT "")
+        endif()
+
+        if(NOT CMAKE_EXE_LINKER_FLAGS_DEBUGOPT)
+            set(CMAKE_EXE_LINKER_FLAGS_DEBUGOPT "")
+        endif()
+
+        if(NOT CMAKE_SHARED_LINKER_FLAGS_DEBUGOPT)
+            set(CMAKE_SHARED_LINKER_FLAGS_DEBUGOPT "")
+        endif()
+
+        # warnings as errors, max warning level (4)
+        if(NOT CMAKE_CXX_FLAGS MATCHES "/WX")
+            set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /WX")
+        endif()
+
+        # taken from http://stackoverflow.com/questions/2368811/how-to-set-warning-level-in-cmake
+        if(CMAKE_CXX_FLAGS MATCHES "/W[0-4]")
+            string(REGEX REPLACE "/W[0-4]" "/W4" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
+        else()
+            set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /W4")
+        endif()
+    endif(MSVC)
+endmacro()
diff --git a/aws-cpp-sdk-cdi/cmake/initialize_project_version.cmake b/aws-cpp-sdk-cdi/cmake/initialize_project_version.cmake
new file mode 100644
index 0000000..f677572
--- /dev/null
+++ b/aws-cpp-sdk-cdi/cmake/initialize_project_version.cmake
@@ -0,0 +1,33 @@
+set(PROJECT_VERSION "${AWSSDK_VERSION}")
+
+message(STATUS "Building project version: ${PROJECT_VERSION}")
+
+macro(add_project name description)
+    set(PROJECT_NAME "${name}")
+    set(PROJECT_STRING    "${name}_${PROJECT_VERSION}")
+    set(PROJECT_TARNAME   "${name}-${PROJECT_VERSION}")
+    set(PROJECT_BUGREPORT "https://github.com/aws/aws-sdk-cpp/issues/")
+    set(PROJECT_DESCRIPTION "${description}")
+    set(PROJECT_LIBS "")
+    set(PROJECT_LIBS_STRING "")
+    foreach(library_var ${ARGN})
+        list(APPEND PROJECT_LIBS "${library_var}")
+        set(PROJECT_LIBS_STRING "${PROJECT_LIBS_STRING} ${library_var}")
+    endforeach()
+
+    if(POLICY CMP0028)
+	cmake_policy(SET CMP0028 NEW)
+    endif()
+    if(POLICY CMP0048)
+	cmake_policy(SET CMP0048 NEW)
+    endif()
+    if(POLICY CMP0054)
+	cmake_policy(SET CMP0054 NEW)
+    endif()
+    if(POLICY CMP0056)
+	cmake_policy(SET CMP0056 NEW)
+    endif()
+
+    project(${name} VERSION "${PROJECT_VERSION}" LANGUAGES CXX C)
+
+endmacro()
diff --git a/aws-cpp-sdk-cdi/cmake/utilities.cmake b/aws-cpp-sdk-cdi/cmake/utilities.cmake
new file mode 100644
index 0000000..00d8f44
--- /dev/null
+++ b/aws-cpp-sdk-cdi/cmake/utilities.cmake
@@ -0,0 +1,103 @@
+macro(generate_pkgconfig_link_flags LIBS_LIST OUTPUT_VAR)
+    set(${OUTPUT_VAR} "")
+    foreach(LIB IN LISTS ${LIBS_LIST})
+        if(${OUTPUT_VAR})
+            set(${OUTPUT_VAR} "${${OUTPUT_VAR}} -l${LIB}")
+        else()
+            set(${OUTPUT_VAR} "-l${LIB}")
+        endif()
+    endforeach()
+endmacro()
+
+# this function is based on the unity build function described at: https://cheind.wordpress.com/2009/12/10/reducing-compilation-time-unity-builds/
+function(enable_unity_build UNITY_SUFFIX SOURCE_FILES)
+    set(files ${${SOURCE_FILES}})
+
+    # Generate a unique filename for the unity build translation unit
+    set(unity_build_file ${CMAKE_CURRENT_BINARY_DIR}/ub_${UNITY_SUFFIX}.cpp)
+
+    # Exclude all translation units from compilation
+    set_source_files_properties(${files} PROPERTIES HEADER_FILE_ONLY true)
+
+    # Open the ub file
+    FILE(WRITE ${unity_build_file} "// Unity Build generated by CMake\n")
+
+    # Add include statement for each translation unit
+    foreach(source_file ${files} )
+        FILE( APPEND ${unity_build_file} "#include <${source_file}>\n")
+    endforeach(source_file)
+
+    # Complement list of translation units with the name of ub
+    set(${SOURCE_FILES} ${${SOURCE_FILES}} ${unity_build_file} PARENT_SCOPE)
+endfunction(enable_unity_build)
+
+macro(setup_install)
+    if(SIMPLE_INSTALL)
+        configure_file("${AWS_NATIVE_SDK_ROOT}/toolchains/pkg-config.pc.in" "${PROJECT_NAME}.pc" @ONLY)
+
+        install( TARGETS ${PROJECT_NAME}
+                EXPORT "${PROJECT_NAME}-targets"
+                ARCHIVE DESTINATION ${ARCHIVE_DIRECTORY}
+                LIBRARY DESTINATION ${LIBRARY_DIRECTORY}
+                RUNTIME DESTINATION ${BINARY_DIRECTORY} )
+
+        if (BUILD_SHARED_LIBS)
+            install(
+                FILES "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}.pc"
+                DESTINATION ${LIBRARY_DIRECTORY}/pkgconfig)
+        endif()
+    else()
+        if(PLATFORM_CUSTOM)
+            install_custom_library(${PROJECT_NAME})
+        else()
+            install (TARGETS ${PROJECT_NAME}
+                     ARCHIVE DESTINATION ${ARCHIVE_DIRECTORY}/${SDK_INSTALL_BINARY_PREFIX}/${PLATFORM_INSTALL_QUALIFIER}/\${CMAKE_INSTALL_CONFIG_NAME}
+                     LIBRARY DESTINATION ${LIBRARY_DIRECTORY}/${SDK_INSTALL_BINARY_PREFIX}/${PLATFORM_INSTALL_QUALIFIER}/\${CMAKE_INSTALL_CONFIG_NAME}
+                     RUNTIME DESTINATION ${BINARY_DIRECTORY}/${SDK_INSTALL_BINARY_PREFIX}/${PLATFORM_INSTALL_QUALIFIER}/\${CMAKE_INSTALL_CONFIG_NAME})
+        endif()
+    endif()
+endmacro()
+
+macro(do_packaging)
+    if(SIMPLE_INSTALL)
+        write_basic_package_version_file(
+            "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-config-version.cmake"
+            VERSION ${PROJECT_VERSION}
+            COMPATIBILITY AnyNewerVersion
+        )
+
+        # TODO: Re-enable export after Aws Common Runtime exports their libraries.
+        # export(EXPORT "${PROJECT_NAME}-targets"
+        #     FILE "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-targets.cmake"
+        # )
+
+    if(${PROJECT_NAME} STREQUAL "aws-cpp-sdk-core")
+        configure_file(
+            "${AWS_NATIVE_SDK_ROOT}/toolchains/core-config.cmake"
+            "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-config.cmake"
+            @ONLY)
+    else()
+        configure_file(
+            "${AWS_NATIVE_SDK_ROOT}/toolchains/cmakeProjectConfig.cmake"
+            "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-config.cmake"
+            @ONLY)
+    endif()
+
+        set(ConfigPackageLocation "${LIBRARY_DIRECTORY}/cmake/${PROJECT_NAME}")
+        install(EXPORT "${PROJECT_NAME}-targets"
+            FILE "${PROJECT_NAME}-targets.cmake"
+            DESTINATION ${ConfigPackageLocation}
+        )
+
+        install(
+            FILES
+            "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-config.cmake"
+            "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-config-version.cmake"
+            DESTINATION
+            ${ConfigPackageLocation}
+            COMPONENT
+            Devel)
+    endif()
+endmacro()
+
+
diff --git a/aws-cpp-sdk-cdi/toolchains/cmakeProjectConfig.cmake b/aws-cpp-sdk-cdi/toolchains/cmakeProjectConfig.cmake
new file mode 100644
index 0000000..f40ebfa
--- /dev/null
+++ b/aws-cpp-sdk-cdi/toolchains/cmakeProjectConfig.cmake
@@ -0,0 +1 @@
+include("${CMAKE_CURRENT_LIST_DIR}/@PROJECT_NAME@-targets.cmake")
diff --git a/aws-cpp-sdk-cdi/toolchains/pkg-config.pc.in b/aws-cpp-sdk-cdi/toolchains/pkg-config.pc.in
new file mode 100644
index 0000000..9b519d2
--- /dev/null
+++ b/aws-cpp-sdk-cdi/toolchains/pkg-config.pc.in
@@ -0,0 +1,10 @@
+includedir=@CMAKE_INSTALL_PREFIX@/@INCLUDE_DIRECTORY@
+libdir=@CMAKE_INSTALL_PREFIX@/@LIBRARY_DIRECTORY@
+
+Name: @PROJECT_NAME@
+Description: @PROJECT_DESCRIPTION@
+Version: @PROJECT_VERSION@
+Cflags: -I${includedir} @PKG_CONFIG_CFLAGS@
+Libs: -L${libdir} -l@PROJECT_NAME@ 
+Libs.private: @ALL_DEP_LIBS_LINK_FLAGS@
+Requires: @PROJECT_LIBS_STRING@
