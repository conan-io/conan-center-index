diff --git a/AssetLoader/CMakeLists.txt b/AssetLoader/CMakeLists.txt
index 52b8694..f36f0a5 100644
--- a/AssetLoader/CMakeLists.txt
+++ b/AssetLoader/CMakeLists.txt
@@ -34,13 +34,8 @@ source_group("interface" FILES ${INTERFACE})
 
 target_link_libraries(Diligent-AssetLoader 
 PRIVATE 
-    Diligent-BuildSettings
-    Diligent-Common
-    Diligent-PlatformInterface
-    Diligent-GraphicsEngineInterface
-    Diligent-GraphicsAccessories
-    Diligent-GraphicsTools
     Diligent-TextureLoader
+    CONAN_PKG::diligent-core
 )
 
 if (TARGET draco)
diff --git a/AssetLoader/interface/DXSDKMeshLoader.hpp b/AssetLoader/interface/DXSDKMeshLoader.hpp
index c3a386d..1b0b01d 100644
--- a/AssetLoader/interface/DXSDKMeshLoader.hpp
+++ b/AssetLoader/interface/DXSDKMeshLoader.hpp
@@ -29,14 +29,14 @@
 
 #include <vector>
 
-#include "../../../DiligentCore/Primitives/interface/BasicTypes.h"
-#include "../../../DiligentCore/Graphics/GraphicsEngine/interface/RenderDevice.h"
-#include "../../../DiligentCore/Graphics/GraphicsEngine/interface/DeviceContext.h"
-#include "../../../DiligentCore/Graphics/GraphicsEngine/interface/Buffer.h"
-#include "../../../DiligentCore/Graphics/GraphicsEngine/interface/Texture.h"
-#include "../../../DiligentCore/Graphics/GraphicsEngine/interface/TextureView.h"
-#include "../../../DiligentCore/Common/interface/BasicMath.hpp"
-#include "../../../DiligentCore/Common/interface/RefCntAutoPtr.hpp"
+#include "DiligentCore/Primitives/interface/BasicTypes.h"
+#include "DiligentCore/Graphics/GraphicsEngine/interface/RenderDevice.h"
+#include "DiligentCore/Graphics/GraphicsEngine/interface/DeviceContext.h"
+#include "DiligentCore/Graphics/GraphicsEngine/interface/Buffer.h"
+#include "DiligentCore/Graphics/GraphicsEngine/interface/Texture.h"
+#include "DiligentCore/Graphics/GraphicsEngine/interface/TextureView.h"
+#include "DiligentCore/Common/interface/BasicMath.hpp"
+#include "DiligentCore/Common/interface/RefCntAutoPtr.hpp"
 
 namespace Diligent
 {
diff --git a/AssetLoader/interface/GLTFLoader.hpp b/AssetLoader/interface/GLTFLoader.hpp
index 86339ea..0798868 100644
--- a/AssetLoader/interface/GLTFLoader.hpp
+++ b/AssetLoader/interface/GLTFLoader.hpp
@@ -36,10 +36,10 @@
 #include <atomic>
 #include <functional>
 
-#include "../../../DiligentCore/Graphics/GraphicsEngine/interface/RenderDevice.h"
-#include "../../../DiligentCore/Graphics/GraphicsEngine/interface/DeviceContext.h"
-#include "../../../DiligentCore/Common/interface/RefCntAutoPtr.hpp"
-#include "../../../DiligentCore/Common/interface/AdvancedMath.hpp"
+#include "DiligentCore/Graphics/GraphicsEngine/interface/RenderDevice.h"
+#include "DiligentCore/Graphics/GraphicsEngine/interface/DeviceContext.h"
+#include "DiligentCore/Common/interface/RefCntAutoPtr.hpp"
+#include "DiligentCore/Common/interface/AdvancedMath.hpp"
 #include "GLTFResourceManager.hpp"
 
 namespace tinygltf
diff --git a/AssetLoader/interface/GLTFResourceManager.hpp b/AssetLoader/interface/GLTFResourceManager.hpp
index 22e89a9..c6c8274 100644
--- a/AssetLoader/interface/GLTFResourceManager.hpp
+++ b/AssetLoader/interface/GLTFResourceManager.hpp
@@ -32,12 +32,12 @@
 #include <unordered_map>
 #include <atomic>
 
-#include "../../../DiligentCore/Graphics/GraphicsEngine/interface/RenderDevice.h"
-#include "../../../DiligentCore/Graphics/GraphicsEngine/interface/DeviceContext.h"
-#include "../../../DiligentCore/Common/interface/RefCntAutoPtr.hpp"
-#include "../../../DiligentCore/Common/interface/ObjectBase.hpp"
-#include "../../../DiligentCore/Graphics/GraphicsTools/interface/BufferSuballocator.h"
-#include "../../../DiligentCore/Graphics/GraphicsTools/interface/DynamicTextureAtlas.h"
+#include "DiligentCore/Graphics/GraphicsEngine/interface/RenderDevice.h"
+#include "DiligentCore/Graphics/GraphicsEngine/interface/DeviceContext.h"
+#include "DiligentCore/Common/interface/RefCntAutoPtr.hpp"
+#include "DiligentCore/Common/interface/ObjectBase.hpp"
+#include "DiligentCore/Graphics/GraphicsTools/interface/BufferSuballocator.h"
+#include "DiligentCore/Graphics/GraphicsTools/interface/DynamicTextureAtlas.h"
 
 
 namespace Diligent
diff --git a/Imgui/CMakeLists.txt b/Imgui/CMakeLists.txt
index 76c792a..5799a4f 100644
--- a/Imgui/CMakeLists.txt
+++ b/Imgui/CMakeLists.txt
@@ -111,12 +111,7 @@ source_group("imGuIZMO.quat" FILES ${IMGUIZMO_QUAT_SOURCE})
 
 target_link_libraries(Diligent-Imgui
 PRIVATE
-    Diligent-BuildSettings
-    Diligent-Common
-    Diligent-PlatformInterface
-    Diligent-GraphicsEngineInterface
-    Diligent-GraphicsAccessories
-    Diligent-GraphicsTools
+    CONAN_PKG::diligent-core
     CONAN_PKG::imgui
 )
 
diff --git a/Imgui/interface/ImGuiDiligentRenderer.hpp b/Imgui/interface/ImGuiDiligentRenderer.hpp
index 29625f0..f959a20 100644
--- a/Imgui/interface/ImGuiDiligentRenderer.hpp
+++ b/Imgui/interface/ImGuiDiligentRenderer.hpp
@@ -28,10 +28,10 @@
 #pragma once
 
 #include <memory>
-#include "../../../DiligentCore/Primitives/interface/BasicTypes.h"
-#include "../../../DiligentCore/Common/interface/BasicMath.hpp"
-#include "../../../DiligentCore/Common/interface/RefCntAutoPtr.hpp"
-#include "../../../DiligentCore/Graphics/GraphicsEngine/interface/GraphicsTypes.h"
+#include "DiligentCore/Primitives/interface/BasicTypes.h"
+#include "DiligentCore/Common/interface/BasicMath.hpp"
+#include "DiligentCore/Common/interface/RefCntAutoPtr.hpp"
+#include "DiligentCore/Graphics/GraphicsEngine/interface/GraphicsTypes.h"
 #include "imgui.h"
 
 struct ImDrawData;
diff --git a/Imgui/interface/ImGuiImplDiligent.hpp b/Imgui/interface/ImGuiImplDiligent.hpp
index bb059a7..65bd45a 100644
--- a/Imgui/interface/ImGuiImplDiligent.hpp
+++ b/Imgui/interface/ImGuiImplDiligent.hpp
@@ -28,7 +28,7 @@
 #pragma once
 
 #include <memory>
-#include "../../../DiligentCore/Primitives/interface/BasicTypes.h"
+#include "DiligentCore/Primitives/interface/BasicTypes.h"
 
 namespace Diligent
 {
diff --git a/RenderStateNotation/CMakeLists.txt b/RenderStateNotation/CMakeLists.txt
new file mode 100644
index 0000000..85d4e6f
--- /dev/null
+++ b/RenderStateNotation/CMakeLists.txt
@@ -0,0 +1,96 @@
+cmake_minimum_required (VERSION 3.6)
+
+project(Diligent-RenderStateNotation CXX)
+
+set(REFLECTED
+    BlendState.h
+    DepthStencilState.h
+    GraphicsTypes.h
+    InputLayout.h
+    PipelineResourceSignature.h
+    PipelineState.h
+    RasterizerState.h
+    RenderPass.h
+    Shader.h
+    ShaderResourceVariable.h
+    Sampler.h
+    SerializationDevice.h
+)
+
+set(RSN_PARSER_HEADERS_DIR ${CMAKE_CURRENT_BINARY_DIR}/parser_headers CACHE INTERNAL "Render State Notation Parser generated headers directory")
+set(RSN_PARSER_GENERATED_HEADERS_DIR ${RSN_PARSER_HEADERS_DIR}/generated)
+file(MAKE_DIRECTORY "${RSN_PARSER_GENERATED_HEADERS_DIR}")
+
+find_package(PythonInterp 3 REQUIRED)
+
+execute_process(COMMAND ${PYTHON_EXECUTABLE} -m pip install libclang==12.0.0
+                RESULT_VARIABLE PYTHON_PIP_LIBCLANG_RESULT)
+if(NOT PYTHON_PIP_LIBCLANG_RESULT EQUAL "0")
+    message(FATAL_ERROR "python -m pip install libclang failed with ${PYTHON_PIP_LIBCLANG_RESULT}")
+endif()
+
+execute_process(COMMAND ${PYTHON_EXECUTABLE} -m pip install jinja2
+                RESULT_VARIABLE PYTHON_PIP_JINJIA_RESULT)
+if(NOT PYTHON_PIP_JINJIA_RESULT EQUAL "0")
+    message(FATAL_ERROR "python -m pip install jinja2 failed with ${PYTHON_PIP_JINJIA_RESULT}")
+endif()
+
+file(GLOB INCLUDE    include/*)
+file(GLOB INTERFACE  interface/*)
+file(GLOB SOURCE     src/*)
+
+foreach(REFLECTED_FILE_PATH ${REFLECTED})
+    get_filename_component(REFLECTED_FILE_NAME ${REFLECTED_FILE_PATH} NAME_WE)
+    set(GENERATED_FILE_PATH "${RSN_PARSER_GENERATED_HEADERS_DIR}/${REFLECTED_FILE_NAME}Parser.hpp")
+    list(APPEND GENERATED ${GENERATED_FILE_PATH})
+endforeach(REFLECTED_FILE_PATH)
+list(APPEND GENERATED "${RSN_PARSER_GENERATED_HEADERS_DIR}/CommonParser.hpp")
+set_source_files_properties(${GENERATED} PROPERTIES GENERATED TRUE)
+
+source_group("include"   FILES ${INCLUDE})
+source_group("interface" FILES ${INTERFACE})
+source_group("generated" FILES ${GENERATED})
+source_group("source"    FILES ${SOURCE})
+
+if(CMAKE_HOST_SYSTEM_NAME STREQUAL "Windows")
+    set(CLANG_FORMAT_VERSION "clang-format_10.0.0.exe")
+elseif(CMAKE_HOST_SYSTEM_NAME STREQUAL "Linux")
+    set(CLANG_FORMAT_VERSION "clang-format_linux_10.0.0")
+elseif(CMAKE_HOST_SYSTEM_NAME STREQUAL "Darwin")
+    set(CLANG_FORMAT_VERSION "clang-format_mac_10.0.0")
+endif()
+
+add_custom_command(OUTPUT ${GENERATED}
+                   COMMAND ${PYTHON_EXECUTABLE} "${CMAKE_CURRENT_SOURCE_DIR}/scripts/cxx_generator.py" --dir "." --files ${REFLECTED}
+                   COMMAND "${CMAKE_CURRENT_SOURCE_DIR}/../../DiligentCore/BuildTools/FormatValidation/${CLANG_FORMAT_VERSION}" -i *.hpp --verbose
+                   WORKING_DIRECTORY "${RSN_PARSER_GENERATED_HEADERS_DIR}"
+                   DEPENDS ${REFLECTED}
+                   COMMENT "RSN Parser Header Generation")
+
+add_library(Diligent-RenderStateNotation STATIC
+    ${INCLUDE}
+    ${INTERFACE}
+    ${SOURCE}
+    ${GENERATED}
+)
+
+target_include_directories(Diligent-RenderStateNotation
+PUBLIC
+    interface
+PRIVATE
+    include
+    ../ThirdParty/json
+    ${RSN_PARSER_HEADERS_DIR}
+)
+
+target_link_libraries(Diligent-RenderStateNotation PRIVATE
+    CONAN_PKG::diligent-core
+)
+
+target_compile_definitions(Diligent-RenderStateNotation PUBLIC JSON_DIAGNOSTICS=1)
+
+set_target_properties(Diligent-RenderStateNotation PROPERTIES
+    FOLDER DiligentTools
+)
+
+set_common_target_properties(Diligent-RenderStateNotation)
diff --git a/RenderStateNotation/interface/RenderStateNotationLoader.h b/RenderStateNotation/interface/RenderStateNotationLoader.h
new file mode 100644
index 0000000..3a0c692
--- /dev/null
+++ b/RenderStateNotation/interface/RenderStateNotationLoader.h
@@ -0,0 +1,169 @@
+/*
+ *  Copyright 2019-2022 Diligent Graphics LLC
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ *
+ *  In no event and under no legal theory, whether in tort (including negligence),
+ *  contract, or otherwise, unless required by applicable law (such as deliberate
+ *  and grossly negligent acts) or agreed to in writing, shall any Contributor be
+ *  liable for any damages, including any direct, indirect, special, incidental,
+ *  or consequential damages of any character arising as a result of this License or
+ *  out of the use or inability to use the software (including but not limited to damages
+ *  for loss of goodwill, work stoppage, computer failure or malfunction, or any and
+ *  all other commercial damages or losses), even if such Contributor has been advised
+ *  of the possibility of such damages.
+ */
+
+#pragma once
+
+// clang-format off
+
+/// \file
+/// Defines Diligent::IRenderStateNotationLoader interface
+#include "RenderStateNotationParser.h"
+
+DILIGENT_BEGIN_NAMESPACE(Diligent)
+
+#if DILIGENT_C_INTERFACE
+#    define REF *
+#else
+#    define REF &
+#endif
+
+struct RenderStateNotationLoaderCreateInfo
+{
+    IRenderDevice*                   pDevice        DEFAULT_INITIALIZER(nullptr);
+
+    IRenderStateNotationParser*      pParser        DEFAULT_INITIALIZER(nullptr);
+
+    IShaderSourceInputStreamFactory* pStreamFactory DEFAULT_INITIALIZER(nullptr);
+};
+typedef struct RenderStateNotationLoaderCreateInfo RenderStateNotationLoaderCreateInfo;
+
+struct LoadResourceSignatureInfo
+{
+    const Char* Name                                         DEFAULT_INITIALIZER(nullptr);
+
+    bool AddToCache                                          DEFAULT_INITIALIZER(true);
+
+    void (*Modify)(PipelineResourceSignatureDesc REF, void*) DEFAULT_INITIALIZER(nullptr);
+
+    void* pUserData                                          DEFAULT_INITIALIZER(nullptr);
+};
+typedef struct LoadResourceSignatureInfo LoadResourceSignatureInfo;
+
+struct LoadRenderPassInfo
+{
+    const Char* Name                          DEFAULT_INITIALIZER(nullptr);
+
+    bool AddToCache                           DEFAULT_INITIALIZER(true);
+
+    void (*Modify)(RenderPassDesc REF, void*) DEFAULT_INITIALIZER(nullptr);
+
+    void* pUserData                           DEFAULT_INITIALIZER(nullptr);
+};
+typedef struct LoadRenderPassInfo LoadRenderPassInfo;
+
+struct LoadShaderInfo
+{
+    const Char* Name                            DEFAULT_INITIALIZER(nullptr);
+
+    bool AddToCache                             DEFAULT_INITIALIZER(true);
+
+    void (*Modify)(ShaderCreateInfo REF, void*) DEFAULT_INITIALIZER(nullptr);
+
+    void* pUserData                             DEFAULT_INITIALIZER(nullptr);
+};
+typedef struct LoadShaderInfo LoadShaderInfo;
+
+struct LoadPipelineStateInfo
+{
+    const Char* Name                                                                    DEFAULT_INITIALIZER(nullptr);
+
+    PIPELINE_TYPE PipelineType                                                          DEFAULT_INITIALIZER(PIPELINE_TYPE_INVALID);
+
+    bool AddToCache                                                                     DEFAULT_INITIALIZER(true);
+
+    void (*ModifyPipeline)(PipelineStateCreateInfo REF, void*)                          DEFAULT_INITIALIZER(nullptr);
+
+    void* pModifyPipelineData                                                           DEFAULT_INITIALIZER(nullptr);
+
+    void (*ModifyShader)(ShaderCreateInfo REF, SHADER_TYPE, bool REF, void*)            DEFAULT_INITIALIZER(nullptr);
+
+    void* pModifyShaderData                                                             DEFAULT_INITIALIZER(nullptr);
+
+    void (*ModifyResourceSignature)(PipelineResourceSignatureDesc REF, bool REF, void*) DEFAULT_INITIALIZER(nullptr);
+
+    void* pModifyResourceSignatureData                                                  DEFAULT_INITIALIZER(nullptr);
+
+    void (*ModifyRenderPass)(RenderPassDesc REF, bool REF, void*)                       DEFAULT_INITIALIZER(nullptr);
+
+    void* pModifyRenderPassData                                                         DEFAULT_INITIALIZER(nullptr);
+};
+typedef struct LoadPipelineStateInfo LoadPipelineStateInfo;
+
+// clang-format on
+
+// {FD9B12C5-3BC5-4729-A2B4-924DF374B3D3}
+static const INTERFACE_ID IID_RenderStateNotationLoader = {0xFD9B12C5, 0x3BC5, 0x4729, {0xA2, 0xB4, 0x92, 0x4D, 0xF3, 0x74, 0xB3, 0xD3}};
+
+#define DILIGENT_INTERFACE_NAME IRenderStateNotationLoader
+#include "DiligentCore/Primitives/interface/DefineInterfaceHelperMacros.h"
+
+#define IRenderStateNotationLoaderInclusiveMethods \
+    IObjectInclusiveMethods;                       \
+    IRenderStateNotationLoader RenderStateNotationLoader
+
+// clang-format off
+
+DILIGENT_BEGIN_INTERFACE(IRenderStateNotationLoader, IObject) 
+{
+    VIRTUAL void METHOD(LoadPipelineState)(THIS_
+                                           const LoadPipelineStateInfo REF LoadInfo, 
+                                           IPipelineState**                ppPSO) PURE;
+
+    VIRTUAL void METHOD(LoadResourceSignature)(THIS_
+                                               const LoadResourceSignatureInfo REF LoadInfo,
+                                               IPipelineResourceSignature**        ppSignature) PURE;
+
+    VIRTUAL void METHOD(LoadRenderPass)(THIS_
+                                        const LoadRenderPassInfo REF LoadInfo,
+                                        IRenderPass**                ppRenderPass) PURE;
+
+    VIRTUAL void METHOD(LoadShader)(THIS_
+                                    const LoadShaderInfo REF LoadInfo,
+                                    IShader**                ppShader) PURE;
+};
+DILIGENT_END_INTERFACE
+
+#include "DiligentCore/Primitives/interface/UndefInterfaceHelperMacros.h"
+
+#if DILIGENT_C_INTERFACE
+
+// clang-format off
+#    define IRenderStateNotationLoader_LoadPipelineState(This, ...)     CALL_IFACE_METHOD(RenderStateNotationLoader, LoadPipelineState,     This, __VA_ARGS__)
+#    define IRenderStateNotationLoader_LoadResourceSignature(This, ...) CALL_IFACE_METHOD(RenderStateNotationLoader, LoadResourceSignature, This, __VA_ARGS__)
+#    define IRenderStateNotationLoader_LoadRenderPass(This, ...)        CALL_IFACE_METHOD(RenderStateNotationLoader, LoadRenderPass,        This, __VA_ARGS__)
+#    define IRenderStateNotationLoader_LoadShader(This, ...)            CALL_IFACE_METHOD(RenderStateNotationLoader, LoadShader,            This, __VA_ARGS__)
+// clang-format on
+
+#endif
+
+#include "DiligentCore/Primitives/interface/DefineGlobalFuncHelperMacros.h"
+
+void DILIGENT_GLOBAL_FUNCTION(CreateRenderStateNotationLoader)(const RenderStateNotationLoaderCreateInfo REF CreateInfo,
+                                                               IRenderStateNotationLoader**                  ppLoader);
+
+#include "DiligentCore/Primitives/interface/UndefGlobalFuncHelperMacros.h"
+
+DILIGENT_END_NAMESPACE // namespace Diligent
diff --git a/RenderStateNotation/interface/RenderStateNotationParser.h b/RenderStateNotation/interface/RenderStateNotationParser.h
new file mode 100644
index 0000000..4a36d6a
--- /dev/null
+++ b/RenderStateNotation/interface/RenderStateNotationParser.h
@@ -0,0 +1,360 @@
+/*
+ *  Copyright 2019-2022 Diligent Graphics LLC
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ *
+ *  In no event and under no legal theory, whether in tort (including negligence),
+ *  contract, or otherwise, unless required by applicable law (such as deliberate
+ *  and grossly negligent acts) or agreed to in writing, shall any Contributor be
+ *  liable for any damages, including any direct, indirect, special, incidental,
+ *  or consequential damages of any character arising as a result of this License or
+ *  out of the use or inability to use the software (including but not limited to damages
+ *  for loss of goodwill, work stoppage, computer failure or malfunction, or any and
+ *  all other commercial damages or losses), even if such Contributor has been advised
+ *  of the possibility of such damages.
+ */
+
+#pragma once
+
+// clang-format off
+
+/// \file
+/// Defines Diligent::IRenderStateNotationParser interface
+#include "DiligentCore/Graphics/GraphicsEngine/interface/RenderDevice.h"
+
+DILIGENT_BEGIN_NAMESPACE(Diligent)
+
+struct PipelineStateNotation 
+{
+    PipelineStateDesc PSODesc;
+
+    PSO_CREATE_FLAGS  Flags                       DEFAULT_INITIALIZER(PSO_CREATE_FLAG_NONE);
+
+    const Char**      ppResourceSignatureNames    DEFAULT_INITIALIZER(nullptr);
+
+    Uint32            ResourceSignaturesNameCount DEFAULT_INITIALIZER(0);
+
+    // Required to ensure correct memory layout for inherited structs on clang/gcc
+    Uint32            _Padding                    DEFAULT_INITIALIZER(~0u);
+
+#if DILIGENT_CPP_INTERFACE
+    bool operator == (const PipelineStateNotation& RHS) const
+    {
+        if (!(PSODesc == RHS.PSODesc) || !(Flags == RHS.Flags) || !(ResourceSignaturesNameCount == RHS.ResourceSignaturesNameCount))
+            return false;
+
+        for (Uint32 SignatureID = 0; SignatureID < ResourceSignaturesNameCount; SignatureID++)
+            if (!SafeStrEqual(ppResourceSignatureNames[SignatureID], RHS.ppResourceSignatureNames[SignatureID]))
+                return false;
+
+        return true;
+    }
+#endif
+};
+typedef struct PipelineStateNotation PipelineStateNotation;
+
+
+struct GraphicsPipelineNotation DILIGENT_DERIVE(PipelineStateNotation)
+
+    GraphicsPipelineDesc Desc;
+
+    const Char*         pRenderPassName  DEFAULT_INITIALIZER(nullptr);
+
+    const Char*         pVSName          DEFAULT_INITIALIZER(nullptr);
+
+    const Char*         pPSName          DEFAULT_INITIALIZER(nullptr);
+
+    const Char*         pDSName          DEFAULT_INITIALIZER(nullptr);
+
+    const Char*         pHSName          DEFAULT_INITIALIZER(nullptr);
+
+    const Char*         pGSName          DEFAULT_INITIALIZER(nullptr);
+
+    const Char*         pASName          DEFAULT_INITIALIZER(nullptr);
+
+    const Char*         pMSName          DEFAULT_INITIALIZER(nullptr);
+
+#if DILIGENT_CPP_INTERFACE
+    bool operator == (const GraphicsPipelineNotation& RHS) const 
+    {
+        if (!(static_cast<const PipelineStateNotation&>(*this) == static_cast<const PipelineStateNotation&>(RHS)))
+            return false;
+
+        return Desc == RHS.Desc &&
+               SafeStrEqual(pRenderPassName, RHS.pRenderPassName) &&
+               SafeStrEqual(pVSName, RHS.pVSName) &&
+               SafeStrEqual(pPSName, RHS.pPSName) &&
+               SafeStrEqual(pDSName, RHS.pDSName) &&
+               SafeStrEqual(pHSName, RHS.pHSName) &&
+               SafeStrEqual(pGSName, RHS.pGSName) &&
+               SafeStrEqual(pASName, RHS.pASName) &&
+               SafeStrEqual(pMSName, RHS.pMSName);
+    }
+#endif
+};
+typedef struct GraphicsPipelineNotation GraphicsPipelineNotation;
+
+
+struct ComputePipelineNotation DILIGENT_DERIVE(PipelineStateNotation)
+
+    const Char* pCSName DEFAULT_INITIALIZER(nullptr);
+
+#if DILIGENT_CPP_INTERFACE
+    bool operator == (const ComputePipelineNotation& RHS) const 
+    {
+        if (!(static_cast<const PipelineStateNotation &>(*this) == static_cast<const PipelineStateNotation&>(RHS)))
+            return false;
+
+        return SafeStrEqual(pCSName, RHS.pCSName);           
+    }
+#endif
+};
+typedef struct ComputePipelineNotation ComputePipelineNotation;
+
+
+struct TilePipelineNotation DILIGENT_DERIVE(PipelineStateNotation)
+
+    const Char* pTSName DEFAULT_INITIALIZER(nullptr);
+
+#if DILIGENT_CPP_INTERFACE
+    bool operator == (const TilePipelineNotation& RHS) const 
+    {
+        if (!(static_cast<const PipelineStateNotation&>(*this) == static_cast<const PipelineStateNotation&>(RHS)))
+            return false;
+
+        return SafeStrEqual(pTSName, RHS.pTSName);
+    }
+#endif
+};
+typedef struct TilePipelineNotation TilePipelineNotation;
+
+
+struct RTGeneralShaderGroupNotation 
+{
+    const Char* Name         DEFAULT_INITIALIZER(nullptr);
+
+    const Char* pShaderName  DEFAULT_INITIALIZER(nullptr);
+
+#if DILIGENT_CPP_INTERFACE
+    bool operator == (const RTGeneralShaderGroupNotation& RHS) const
+    {
+        return SafeStrEqual(Name, RHS.Name) &&
+               SafeStrEqual(pShaderName, RHS.pShaderName);
+    }
+#endif
+};
+typedef struct RTGeneralShaderGroupNotation RTGeneralShaderGroupNotation;
+
+
+struct RTTriangleHitShaderGroupNotation 
+{ 
+    const Char* Name                  DEFAULT_INITIALIZER(nullptr);
+
+    const Char* pClosestHitShaderName DEFAULT_INITIALIZER(nullptr);
+
+    const Char* pAnyHitShaderName     DEFAULT_INITIALIZER(nullptr);
+
+#if DILIGENT_CPP_INTERFACE
+    bool operator == (const RTTriangleHitShaderGroupNotation& RHS) const 
+    {
+        return SafeStrEqual(Name, RHS.Name) &&
+               SafeStrEqual(pClosestHitShaderName, RHS.pClosestHitShaderName) &&
+               SafeStrEqual(pAnyHitShaderName, RHS.pAnyHitShaderName);
+    }
+#endif
+};
+typedef struct RTTriangleHitShaderGroupNotation RTTriangleHitShaderGroupNotation;
+
+
+struct RTProceduralHitShaderGroupNotation 
+{
+    const Char* Name                    DEFAULT_INITIALIZER(nullptr);
+
+    const Char* pIntersectionShaderName DEFAULT_INITIALIZER(nullptr);
+
+    const Char* pClosestHitShaderName   DEFAULT_INITIALIZER(nullptr);
+
+    const Char* pAnyHitShaderName       DEFAULT_INITIALIZER(nullptr);
+
+#if DILIGENT_CPP_INTERFACE
+    bool operator == (const RTProceduralHitShaderGroupNotation& RHS) const 
+    {
+        return SafeStrEqual(Name, RHS.Name) &&
+               SafeStrEqual(pIntersectionShaderName, RHS.pIntersectionShaderName) &&
+               SafeStrEqual(pClosestHitShaderName, RHS.pClosestHitShaderName) &&
+               SafeStrEqual(pAnyHitShaderName, RHS.pAnyHitShaderName);
+    }
+#endif
+};
+typedef struct RTProceduralHitShaderGroupNotation RTProceduralHitShaderGroupNotation;
+
+
+struct RayTracingPipelineNotation DILIGENT_DERIVE(PipelineStateNotation)
+
+    RayTracingPipelineDesc                       RayTracingPipeline;
+
+    const RTGeneralShaderGroupNotation*          pGeneralShaders          DEFAULT_INITIALIZER(nullptr);
+
+    Uint32                                       GeneralShaderCount       DEFAULT_INITIALIZER(0);
+
+    const RTTriangleHitShaderGroupNotation*      pTriangleHitShaders      DEFAULT_INITIALIZER(nullptr);
+
+    Uint32                                       TriangleHitShaderCount   DEFAULT_INITIALIZER(0);
+
+    const RTProceduralHitShaderGroupNotation*    pProceduralHitShaders    DEFAULT_INITIALIZER(nullptr);
+
+    Uint32                                       ProceduralHitShaderCount DEFAULT_INITIALIZER(0);
+
+    const char*                                  pShaderRecordName        DEFAULT_INITIALIZER(nullptr);
+
+    Uint32                                       MaxAttributeSize         DEFAULT_INITIALIZER(0);
+
+    Uint32                                       MaxPayloadSize           DEFAULT_INITIALIZER(0);
+
+#if DILIGENT_CPP_INTERFACE
+    bool operator == (const RayTracingPipelineNotation& RHS) const
+    {
+        if (!(static_cast<const PipelineStateNotation&>(*this) == static_cast<const PipelineStateNotation&>(RHS)))
+            return false;
+
+        if (!(RayTracingPipeline == RHS.RayTracingPipeline) ||
+            !(GeneralShaderCount == RHS.GeneralShaderCount) || 
+            !(TriangleHitShaderCount == RHS.TriangleHitShaderCount) ||
+            !(ProceduralHitShaderCount == RHS.ProceduralHitShaderCount) ||
+            !(MaxAttributeSize == RHS.MaxAttributeSize) ||
+            !(MaxPayloadSize == RHS.MaxPayloadSize) || 
+            !SafeStrEqual(pShaderRecordName, RHS.pShaderRecordName))
+            return false;
+
+        for (Uint32 GroupID = 0; GroupID < GeneralShaderCount; GroupID++)
+            if (!(pGeneralShaders[GroupID] == RHS.pGeneralShaders[GroupID]))
+                return false;
+
+        for (Uint32 GroupID = 0; GroupID < TriangleHitShaderCount; GroupID++)
+            if (!(pTriangleHitShaders[GroupID] == RHS.pTriangleHitShaders[GroupID]))
+                return false;
+
+        for (Uint32 GroupID = 0; GroupID < ProceduralHitShaderCount; GroupID++)
+            if (!(pProceduralHitShaders[GroupID] == RHS.pProceduralHitShaders[GroupID]))
+                return false;
+
+        return true;
+    }
+#endif
+};
+typedef struct RayTracingPipelineNotation RayTracingPipelineNotation;
+
+
+struct RenderStateNotationParserInfo 
+{
+    Uint32 ResourceSignatureCount DEFAULT_INITIALIZER(0);
+
+    Uint32 ShaderCount            DEFAULT_INITIALIZER(0);
+
+    Uint32 RenderPassCount        DEFAULT_INITIALIZER(0);
+
+    Uint32 PipelineStateCount     DEFAULT_INITIALIZER(0);
+};
+typedef struct RenderStateNotationParserInfo RenderStateNotationParserInfo;
+
+
+struct RenderStateNotationParserCreateInfo 
+{
+    const void* Reserved DEFAULT_INITIALIZER(nullptr);
+};
+typedef struct RenderStateNotationParserCreateInfo RenderStateNotationParserCreateInfo;
+
+// clang-format on
+
+// {355AC9f7-5D9D-423D-AE35-80E0028DE17E}
+static const INTERFACE_ID IID_RenderStateNotationParser = {0x355AC9F7, 0x5D9D, 0x423D, {0xAE, 0x35, 0x80, 0xE0, 0x02, 0x8D, 0xE1, 0x7E}};
+
+#define DILIGENT_INTERFACE_NAME IRenderStateNotationParser
+#include "DiligentCore/Primitives/interface/DefineInterfaceHelperMacros.h"
+
+#define IRenderStateNotationParserInclusiveMethods \
+    IObjectInclusiveMethods;                       \
+    IRenderStateNotationParser RenderStateNotationParser
+
+// clang-format off
+
+DILIGENT_BEGIN_INTERFACE(IRenderStateNotationParser, IObject)
+{
+    VIRTUAL Bool METHOD(ParseFile)(THIS_
+                                   const Char*                      FileName,
+                                   IShaderSourceInputStreamFactory* pStreamFactory) PURE;
+
+    VIRTUAL Bool METHOD(ParseString)(THIS_
+                                     const Char*                      StrData,
+                                     Uint32                           Length,
+                                     IShaderSourceInputStreamFactory* pStreamFactory) PURE;
+
+    VIRTUAL CONST PipelineStateNotation* METHOD(GetPipelineStateByName)(THIS_
+                                                                        const Char*   Name,
+                                                                        PIPELINE_TYPE PipelineType DEFAULT_VALUE(PIPELINE_TYPE_INVALID)) CONST PURE;
+
+    VIRTUAL CONST PipelineResourceSignatureDesc* METHOD(GetResourceSignatureByName)(THIS_
+                                                                                   const Char* Name) CONST PURE;
+
+    VIRTUAL CONST ShaderCreateInfo* METHOD(GetShaderByName)(THIS_
+                                                            const Char* Name) CONST PURE;
+
+    VIRTUAL CONST RenderPassDesc*  METHOD(GetRenderPassByName)(THIS_
+                                                               const Char* Name) CONST PURE;
+
+    VIRTUAL CONST PipelineStateNotation* METHOD(GetPipelineStateByIndex)(THIS_
+                                                                         Uint32 Index) CONST PURE;
+
+    VIRTUAL CONST PipelineResourceSignatureDesc* METHOD(GetResourceSignatureByIndex)(THIS_
+                                                                                     Uint32 Index) CONST PURE;
+
+    VIRTUAL CONST ShaderCreateInfo* METHOD(GetShaderByIndex)(THIS_
+                                                             Uint32 Index) CONST PURE;
+
+    VIRTUAL CONST RenderPassDesc* METHOD(GetRenderPassByIndex)(THIS_
+                                                               Uint32 Index) CONST PURE;
+
+    VIRTUAL CONST RenderStateNotationParserInfo REF METHOD(GetInfo)(THIS) CONST PURE;
+
+};
+DILIGENT_END_INTERFACE
+
+#include "DiligentCore/Primitives/interface/UndefInterfaceHelperMacros.h"
+
+#if DILIGENT_C_INTERFACE
+
+// clang-format off
+#    define IRenderStateNotationParser_ParseFile(This, ...)                   CALL_IFACE_METHOD(RenderStateNotationParser, ParseFile,                   This, __VA_ARGS__)
+#    define IRenderStateNotationParser_ParseString(This, ...)                 CALL_IFACE_METHOD(RenderStateNotationParser, ParseString,                 This, __VA_ARGS__)
+#    define IRenderStateNotationParser_GetPipelineStateByName(This, ...)      CALL_IFACE_METHOD(RenderStateNotationParser, GetPipelineStateByName,      This, __VA_ARGS__)
+#    define IRenderStateNotationParser_GetResourceSignatureByName(This, ...)  CALL_IFACE_METHOD(RenderStateNotationParser, GetResourceSignatureByName,  This, __VA_ARGS__)
+#    define IRenderStateNotationParser_GetShaderByName(This, ...)             CALL_IFACE_METHOD(RenderStateNotationParser, GetShaderByName,             This, __VA_ARGS__)
+#    define IRenderStateNotationParser_GetRenderPassByName(This, ...)         CALL_IFACE_METHOD(RenderStateNotationParser, GetRenderPassByName,         This, __VA_ARGS__)
+#    define IRenderStateNotationParser_GetPipelineStateByIndex(This, ...)     CALL_IFACE_METHOD(RenderStateNotationParser, GetPipelineStateByIndex,     This, __VA_ARGS__)
+#    define IRenderStateNotationParser_GetResourceSignatureByIndex(This, ...) CALL_IFACE_METHOD(RenderStateNotationParser, GetResourceSignatureByIndex, This, __VA_ARGS__)
+#    define IRenderStateNotationParser_GetShaderByIndex(This, ...)            CALL_IFACE_METHOD(RenderStateNotationParser, GetShaderByIndex,            This, __VA_ARGS__)
+#    define IRenderStateNotationParser_GetRenderPassByIndex(This, ...)        CALL_IFACE_METHOD(RenderStateNotationParser, GetRenderPassByIndex,        This, __VA_ARGS__)
+#    define IRenderStateNotationParser_GetInfo(This, ...)                     CALL_IFACE_METHOD(RenderStateNotationParser, GetInfo,                     This)
+// clang-format on
+
+#endif
+
+#include "DiligentCore/Primitives/interface/DefineGlobalFuncHelperMacros.h"
+
+void DILIGENT_GLOBAL_FUNCTION(CreateRenderStateNotationParser)(const RenderStateNotationParserCreateInfo REF CreateInfo,
+                                                               IRenderStateNotationParser**                  pParser);
+
+
+#include "DiligentCore/Primitives/interface/UndefGlobalFuncHelperMacros.h"
+
+DILIGENT_END_NAMESPACE // namespace Diligent
diff --git a/TextureLoader/CMakeLists.txt b/TextureLoader/CMakeLists.txt
index 942e7c6..a58b3df 100644
--- a/TextureLoader/CMakeLists.txt
+++ b/TextureLoader/CMakeLists.txt
@@ -45,12 +45,7 @@ source_group("interface" FILES ${INTERFACE})
 
 target_link_libraries(Diligent-TextureLoader 
 PRIVATE 
-    Diligent-BuildSettings 
-    Diligent-Common 
-    Diligent-PlatformInterface 
-    Diligent-GraphicsEngineInterface 
-    Diligent-GraphicsAccessories
-    Diligent-GraphicsTools
+    CONAN_PKG::diligent-core
     CONAN_PKG::libpng
     CONAN_PKG::libtiff
     CONAN_PKG::zlib
diff --git a/TextureLoader/interface/BCTools.h b/TextureLoader/interface/BCTools.h
index cb46211..95bee9f 100644
--- a/TextureLoader/interface/BCTools.h
+++ b/TextureLoader/interface/BCTools.h
@@ -26,7 +26,7 @@
 
 #pragma once
 
-#include "../../../DiligentCore/Primitives/interface/BasicTypes.h"
+#include "DiligentCore/Primitives/interface/BasicTypes.h"
 
 DILIGENT_BEGIN_NAMESPACE(Diligent)
 
diff --git a/TextureLoader/interface/Image.h b/TextureLoader/interface/Image.h
index 78629a0..4d5f5f7 100644
--- a/TextureLoader/interface/Image.h
+++ b/TextureLoader/interface/Image.h
@@ -27,15 +27,15 @@
 
 #pragma once
 
-#include "../../../DiligentCore/Graphics/GraphicsEngine/interface/GraphicsTypes.h"
-#include "../../../DiligentCore/Primitives/interface/FileStream.h"
-#include "../../../DiligentCore/Primitives/interface/DataBlob.h"
+#include "DiligentCore/Graphics/GraphicsEngine/interface/GraphicsTypes.h"
+#include "DiligentCore/Primitives/interface/FileStream.h"
+#include "DiligentCore/Primitives/interface/DataBlob.h"
 
 #if DILIGENT_CPP_INTERFACE
 #    include <vector>
 
-#    include "../../../DiligentCore/Common/interface/RefCntAutoPtr.hpp"
-#    include "../../../DiligentCore/Common/interface/ObjectBase.hpp"
+#    include "DiligentCore/Common/interface/RefCntAutoPtr.hpp"
+#    include "DiligentCore/Common/interface/ObjectBase.hpp"
 #endif
 
 DILIGENT_BEGIN_NAMESPACE(Diligent)
diff --git a/TextureLoader/interface/TextureLoader.h b/TextureLoader/interface/TextureLoader.h
index 15710a6..9ccf234 100644
--- a/TextureLoader/interface/TextureLoader.h
+++ b/TextureLoader/interface/TextureLoader.h
@@ -27,9 +27,9 @@
 
 #pragma once
 
-#include "../../../DiligentCore/Primitives/interface/FileStream.h"
-#include "../../../DiligentCore/Graphics/GraphicsEngine/interface/RenderDevice.h"
-#include "../../../DiligentCore/Graphics/GraphicsEngine/interface/Texture.h"
+#include "DiligentCore/Primitives/interface/FileStream.h"
+#include "DiligentCore/Graphics/GraphicsEngine/interface/RenderDevice.h"
+#include "DiligentCore/Graphics/GraphicsEngine/interface/Texture.h"
 #include "Image.h"
 
 DILIGENT_BEGIN_NAMESPACE(Diligent)
@@ -96,7 +96,7 @@ static const struct INTERFACE_ID IID_TextureLoader =
     {0xe04fe6d5, 0x8665, 0x4183, {0xa8, 0x72, 0x85, 0x2e, 0xf, 0x7c, 0xe2, 0x42}};
 
 #define DILIGENT_INTERFACE_NAME ITextureLoader
-#include "../../../DiligentCore/Primitives/interface/DefineInterfaceHelperMacros.h"
+#include "DiligentCore/Primitives/interface/DefineInterfaceHelperMacros.h"
 
 #define ITextureLoaderInclusiveMethods \
     IObjectInclusiveMethods;           \
@@ -123,7 +123,7 @@ DILIGENT_BEGIN_INTERFACE(ITextureLoader, IObject)
 DILIGENT_END_INTERFACE
 // clang-format on
 
-#include "../../../DiligentCore/Primitives/interface/UndefInterfaceHelperMacros.h"
+#include "DiligentCore/Primitives/interface/UndefInterfaceHelperMacros.h"
 
 #if DILIGENT_C_INTERFACE
 
@@ -135,7 +135,7 @@ DILIGENT_END_INTERFACE
 
 #endif
 
-#include "../../../DiligentCore/Primitives/interface/DefineGlobalFuncHelperMacros.h"
+#include "DiligentCore/Primitives/interface/DefineGlobalFuncHelperMacros.h"
 
 /// Creates a texture loader from image.
 
@@ -177,6 +177,6 @@ void DILIGENT_GLOBAL_FUNCTION(CreateTextureLoaderFromMemory)(const void*
                                                              const TextureLoadInfo REF TexLoadInfo,
                                                              ITextureLoader**          ppLoader);
 
-#include "../../../DiligentCore/Primitives/interface/UndefGlobalFuncHelperMacros.h"
+#include "DiligentCore/Primitives/interface/UndefGlobalFuncHelperMacros.h"
 
 DILIGENT_END_NAMESPACE // namespace Diligent
diff --git a/TextureLoader/interface/TextureUtilities.h b/TextureLoader/interface/TextureUtilities.h
index 93d563a..2b53b02 100644
--- a/TextureLoader/interface/TextureUtilities.h
+++ b/TextureLoader/interface/TextureUtilities.h
@@ -30,15 +30,15 @@
 /// \file
 /// Defines texture utilities
 
-#include "../../../DiligentCore/Graphics/GraphicsEngine/interface/GraphicsTypes.h"
-#include "../../../DiligentCore/Graphics/GraphicsEngine/interface/Texture.h"
-#include "../../../DiligentCore/Graphics/GraphicsEngine/interface/RenderDevice.h"
+#include "DiligentCore/Graphics/GraphicsEngine/interface/GraphicsTypes.h"
+#include "DiligentCore/Graphics/GraphicsEngine/interface/Texture.h"
+#include "DiligentCore/Graphics/GraphicsEngine/interface/RenderDevice.h"
 #include "TextureLoader.h"
 
 DILIGENT_BEGIN_NAMESPACE(Diligent)
 
 
-#include "../../../DiligentCore/Primitives/interface/DefineGlobalFuncHelperMacros.h"
+#include "DiligentCore/Primitives/interface/DefineGlobalFuncHelperMacros.h"
 
 /// Creates a texture from file.
 
@@ -51,6 +51,6 @@ void DILIGENT_GLOBAL_FUNCTION(CreateTextureFromFile)(const Char*               F
                                                      IRenderDevice*            pDevice,
                                                      ITexture**                ppTexture);
 
-#include "../../../DiligentCore/Primitives/interface/UndefGlobalFuncHelperMacros.h"
+#include "DiligentCore/Primitives/interface/UndefGlobalFuncHelperMacros.h"
 
 DILIGENT_END_NAMESPACE // namespace Diligent
