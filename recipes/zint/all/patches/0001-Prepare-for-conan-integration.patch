From 83239ac6a546383b67c0326025ef2e594e96c7d9 Mon Sep 17 00:00:00 2001
From: atom <tomasiche@gmail.com>
Date: Mon, 18 Oct 2021 12:56:02 +0300
Subject: [PATCH] Patch

---
 CMakeLists.txt             | 93 ++++++++++++++++++--------------------
 backend/CMakeLists.txt     | 25 ++++++----
 backend_qt/CMakeLists.txt  | 15 ++++--
 backend_qt/qzint.h         |  2 +-
 frontend/CMakeLists.txt    |  4 +-
 frontend/main.c            |  2 +-
 frontend_qt/CMakeLists.txt | 10 ++--
 getopt/CMakeLists.txt      |  9 +++-
 8 files changed, 89 insertions(+), 71 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index c378a75..b40b227 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -15,7 +15,8 @@ set(ZINT_VERSION "${ZINT_VERSION_MAJOR}.${ZINT_VERSION_MINOR}.${ZINT_VERSION_REL
 
 add_definitions(-DZINT_VERSION=\"${ZINT_VERSION}\")
 
-set(CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake/modules")
+#set(CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake/modules")
+set(CMAKE_POSITION_INDEPENDENT_CODE ON)
 
 option(ZINT_DEBUG    "Set debug compile flags"         OFF)
 option(ZINT_SANITIZE "Set sanitize compile/link flags" OFF)
@@ -25,7 +26,7 @@ option(ZINT_STATIC   "Build static library"            OFF)
 option(ZINT_USE_PNG  "Build with PNG support"          ON)
 option(ZINT_USE_QT   "Build with QT support"           ON)
 
-include(SetPaths.cmake)
+#include(SetPaths.cmake)
 
 include(CheckCXXCompilerFlag)
 include(CheckFunctionExists)
@@ -130,63 +131,57 @@ if(NOT HAVE_GETOPT)
 endif()
 
 add_subdirectory(backend)
-add_subdirectory(frontend)
+#add_subdirectory(frontend)
 
 if(NOT ZINT_USE_QT)
     message(STATUS "Qt support was disabled for this build")
-elseif($ENV{CMAKE_PREFIX_PATH} MATCHES "6[.][0-9][.][0-9]")
-    set(USE_QT6 TRUE)
-    message(STATUS "Using Qt6")
-    cmake_policy(SET CMP0012 NEW) # Recognize constants in if()
-    cmake_policy(SET CMP0072 NEW) # Choose OpenGL over legacy GL
-    find_package(Qt6Widgets)
-    find_package(Qt6Gui)
-    find_package(Qt6UiTools)
-    find_package(Qt6Xml)
-
-    if(Qt6Widgets_FOUND AND Qt6Gui_FOUND AND Qt6UiTools_FOUND AND Qt6Xml_FOUND)
-        message(STATUS "Qt version: " ${Qt6Core_VERSION_MAJOR}.${Qt6Core_VERSION_MINOR}.${Qt6Core_VERSION_PATCH})
-        add_subdirectory(backend_qt)
-        add_subdirectory(frontend_qt)
-    else()
-        message(STATUS "Could NOT find Qt6")
-    endif()
 else()
-    message(STATUS "Using Qt5")
-    find_package(Qt5Widgets)
-    find_package(Qt5Gui)
-    find_package(Qt5UiTools)
-    find_package(Qt5Xml)
-
-    if(Qt5Widgets_FOUND AND Qt5Gui_FOUND AND Qt5UiTools_FOUND AND Qt5Xml_FOUND)
-        message(STATUS "Qt version: " ${Qt5Core_VERSION_STRING})
-        # Old Qt does not provide QT_VERSION_MAJOR
-        if (NOT QT_VERSION_MAJOR)
-            string(SUBSTRING ${Qt5Core_VERSION_STRING} 0 1 QT_VERSION_MAJOR)
-        endif()
-        add_subdirectory(backend_qt)
-        add_subdirectory(frontend_qt)
-    else()
-        message(STATUS "Could NOT find Qt5")
+    find_package(
+      QT NAMES Qt6 Qt5
+      COMPONENTS Core Xml Widgets UiTools
+      REQUIRED)
+    find_package(
+      Qt${QT_VERSION_MAJOR}
+      COMPONENTS Core Xml Widgets UiTools
+      REQUIRED)
+
+  # Old Qt does not provide QT_VERSION_MAJOR
+  if (NOT QT_VERSION_MAJOR)
+      string(SUBSTRING ${Qt5Core_VERSION_STRING} 0 1 QT_VERSION_MAJOR)
+  endif()
+
+  if (${QT_VERSION_MAJOR} GREATER_EQUAL 5)
+    if(${QT_VERSION_MAJOR} EQUAL 6)
+        cmake_policy(SET CMP0012 NEW) # Recognize constants in if()
+        cmake_policy(SET CMP0072 NEW) # Choose OpenGL over legacy GL
+        set(USE_QT6 TRUE)
     endif()
+
+
+    message(STATUS "Using Qt${QT_VERSION_MAJOR}")
+    add_subdirectory(backend_qt)
+    #add_subdirectory(frontend_qt)
+  else()
+    message(STATUS "Could NOT find Qt5")
+  endif()
 endif()
 
-configure_file(
-  "${CMAKE_CURRENT_SOURCE_DIR}/cmake_uninstall.cmake.in"
-  "${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake"
-  IMMEDIATE @ONLY)
+#configure_file(
+#  "${CMAKE_CURRENT_SOURCE_DIR}/cmake_uninstall.cmake.in"
+#  "${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake"
+#  IMMEDIATE @ONLY)
 
-add_custom_target(uninstall
-  "${CMAKE_COMMAND}" -P "${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake")
+#add_custom_target(uninstall
+#  "${CMAKE_COMMAND}" -P "${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake")
 
-# staniek: don't install
-if(DATA_INSTALL_DIR)
-    set(CMAKE_MODULES_INSTALL_PATH ${DATA_INSTALL_DIR}/cmake/modules)
-else()
-    set(CMAKE_MODULES_INSTALL_PATH ${CMAKE_ROOT}/Modules)
-endif()
+## staniek: don't install
+#if(DATA_INSTALL_DIR)
+#    set(CMAKE_MODULES_INSTALL_PATH ${DATA_INSTALL_DIR}/cmake/modules)
+#else()
+#    set(CMAKE_MODULES_INSTALL_PATH ${CMAKE_ROOT}/Modules)
+#endif()
 
-install(FILES cmake/modules/FindZint.cmake DESTINATION ${CMAKE_MODULES_INSTALL_PATH} COMPONENT Devel)
+#install(FILES cmake/modules/FindZint.cmake DESTINATION ${CMAKE_MODULES_INSTALL_PATH} COMPONENT Devel)
 
 # This needs to be run very last so other parts of the scripts can take
 # advantage of this.
diff --git a/backend/CMakeLists.txt b/backend/CMakeLists.txt
index c79eabe..b1f04ec 100644
--- a/backend/CMakeLists.txt
+++ b/backend/CMakeLists.txt
@@ -13,11 +13,7 @@ set(zint_TWODIM_SRCS code16k.c codablock.c dmatrix.c pdf417.c qr.c maxicode.c co
 set(zint_OUTPUT_SRCS vector.c ps.c svg.c emf.c bmp.c pcx.c gif.c png.c tif.c raster.c output.c)
 set(zint_SRCS ${zint_OUTPUT_SRCS} ${zint_COMMON_SRCS} ${zint_ONEDIM_SRCS} ${zint_POSTAL_SRCS} ${zint_TWODIM_SRCS})
 
-add_library(zint SHARED ${zint_SRCS})
-
-if(ZINT_STATIC)
-    add_library(zint-static STATIC ${zint_SRCS})
-endif()
+add_library(zint ${zint_SRCS})
 
 function(zint_target_link_libraries library)
     target_link_libraries(zint ${library})
@@ -59,12 +55,21 @@ if(MSVC)
     target_compile_definitions(zint PRIVATE DLL_EXPORT)
 endif()
 
-install(TARGETS zint ${INSTALL_TARGETS_DEFAULT_ARGS})
-if(ZINT_STATIC)
-    install(TARGETS zint-static ${INSTALL_TARGETS_DEFAULT_ARGS})
-endif()
-install(FILES zint.h DESTINATION ${INCLUDE_INSTALL_DIR} COMPONENT Devel)
+#install(TARGETS zint ${INSTALL_TARGETS_DEFAULT_ARGS})
+#if(ZINT_STATIC)
+#    install(TARGETS zint-static ${INSTALL_TARGETS_DEFAULT_ARGS})
+#endif()
+#install(FILES zint.h DESTINATION ${INCLUDE_INSTALL_DIR} COMPONENT Devel)
+
+target_include_directories(${PROJECT_NAME} PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})
 
 if(ZINT_TEST)
     add_subdirectory(tests)
 endif()
+
+set_target_properties(${PROJECT_NAME} PROPERTIES PUBLIC_HEADER zint.h)
+include(GNUInstallDirs)
+install(TARGETS ${PROJECT_NAME}
+        PUBLIC_HEADER
+          DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
+)
diff --git a/backend_qt/CMakeLists.txt b/backend_qt/CMakeLists.txt
index 953cae8..e3f77b2 100644
--- a/backend_qt/CMakeLists.txt
+++ b/backend_qt/CMakeLists.txt
@@ -12,15 +12,22 @@ else()
     qt5_wrap_cpp(QZint_SRCS qzint.h)
 endif()
 
-add_library(${PROJECT_NAME} STATIC ${QZint_SRCS})
+add_library(${PROJECT_NAME} ${QZint_SRCS})
 
 set_target_properties(${PROJECT_NAME} PROPERTIES  SOVERSION "${ZINT_VERSION_MAJOR}.${ZINT_VERSION_MINOR}"
                                         VERSION ${ZINT_VERSION})
 
-target_include_directories(${PROJECT_NAME} PUBLIC "${CMAKE_SOURCE_DIR}/backend")
+#target_include_directories(${PROJECT_NAME} PUBLIC "${CMAKE_SOURCE_DIR}/backend")
 
 target_link_libraries(${PROJECT_NAME} zint Qt${QT_VERSION_MAJOR}::Widgets Qt${QT_VERSION_MAJOR}::Gui)
 
+target_include_directories(${PROJECT_NAME} PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})
 
-install(TARGETS ${PROJECT_NAME} ${INSTALL_TARGETS_DEFAULT_ARGS})
-install(FILES qzint.h DESTINATION ${INCLUDE_INSTALL_DIR} COMPONENT Devel)
+#install(TARGETS ${PROJECT_NAME} ${INSTALL_TARGETS_DEFAULT_ARGS})
+#install(FILES qzint.h DESTINATION ${INCLUDE_INSTALL_DIR} COMPONENT Devel)
+set_target_properties(${PROJECT_NAME} PROPERTIES PUBLIC_HEADER qzint.h)
+include(GNUInstallDirs)
+install(TARGETS ${PROJECT_NAME}
+        PUBLIC_HEADER
+          DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
+)
diff --git a/backend_qt/qzint.h b/backend_qt/qzint.h
index 309ec03..be23f85 100644
--- a/backend_qt/qzint.h
+++ b/backend_qt/qzint.h
@@ -20,7 +20,7 @@
 #define BARCODERENDER_H
 #include <QColor>
 #include <QPainter>
-#include "zint.h"
+#include <zint.h>
 
 namespace Zint
 {
diff --git a/frontend/CMakeLists.txt b/frontend/CMakeLists.txt
index cdf5e25..4663176 100644
--- a/frontend/CMakeLists.txt
+++ b/frontend/CMakeLists.txt
@@ -12,7 +12,7 @@ if(WIN32)
     target_sources(${PROJECT_NAME} PRIVATE zint.rc)
 endif()
 
-target_include_directories(${PROJECT_NAME} PUBLIC "${CMAKE_SOURCE_DIR}/backend")
+#target_include_directories(${PROJECT_NAME} PUBLIC "${CMAKE_SOURCE_DIR}/backend")
 
 set_target_properties(${PROJECT_NAME} PROPERTIES OUTPUT_NAME "zint")
 
@@ -21,7 +21,7 @@ if(NOT HAVE_GETOPT)
     target_link_libraries(${PROJECT_NAME} zint_bundled_getopt)
 endif()
 
-install(TARGETS ${PROJECT_NAME} DESTINATION "${BIN_INSTALL_DIR}" RUNTIME)
+#install(TARGETS ${PROJECT_NAME} DESTINATION "${BIN_INSTALL_DIR}" RUNTIME)
 
 if(ZINT_TEST)
     add_subdirectory(tests)
diff --git a/frontend/main.c b/frontend/main.c
index bb5af6c..9f39226 100644
--- a/frontend/main.c
+++ b/frontend/main.c
@@ -30,7 +30,7 @@
 #else
 #include <malloc.h>
 #include "../getopt/getopt.h"
-#include "zint.h"
+#include <zint.h>
 #if _MSC_VER != 1200 /* VC6 */
 #pragma warning(disable: 4996) /* function or variable may be unsafe */
 #endif
diff --git a/frontend_qt/CMakeLists.txt b/frontend_qt/CMakeLists.txt
index 0b11c83..329a331 100644
--- a/frontend_qt/CMakeLists.txt
+++ b/frontend_qt/CMakeLists.txt
@@ -28,9 +28,13 @@ if(WIN32)
     target_sources(${PROJECT_NAME} PRIVATE res/qtZint.rc)
 endif()
 
-target_include_directories(${PROJECT_NAME} PUBLIC "${CMAKE_SOURCE_DIR}/backend" "${CMAKE_SOURCE_DIR}/backend_qt")
+#target_include_directories(${PROJECT_NAME} PUBLIC "${CMAKE_SOURCE_DIR}/backend" "${CMAKE_SOURCE_DIR}/backend_qt")
 
 target_link_libraries(${PROJECT_NAME} zint QZint Qt${QT_VERSION_MAJOR}::UiTools Qt${QT_VERSION_MAJOR}::Xml Qt${QT_VERSION_MAJOR}::Gui Qt${QT_VERSION_MAJOR}::Core)
 
-
-install(TARGETS ${PROJECT_NAME} DESTINATION "${BIN_INSTALL_DIR}" RUNTIME)
+if (MSVC_C_ARCHITECTURE_ID)
+    if (NOT QT_STATIC)
+        target_link_libraries(${PROJECT_NAME} Dwmapi UxTheme)
+    endif()
+endif()
+#install(TARGETS ${PROJECT_NAME} DESTINATION "${BIN_INSTALL_DIR}" RUNTIME)
diff --git a/getopt/CMakeLists.txt b/getopt/CMakeLists.txt
index b61a55d..04e8a2d 100644
--- a/getopt/CMakeLists.txt
+++ b/getopt/CMakeLists.txt
@@ -1,4 +1,11 @@
 project(zint_bundled_getopt)
 
-add_library(${PROJECT_NAME} STATIC getopt.c getopt1.c)
+add_library(${PROJECT_NAME} getopt.c getopt1.c)
 target_include_directories(${PROJECT_NAME} PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})
+
+set_target_properties(${PROJECT_NAME} PROPERTIES PUBLIC_HEADER getopt.h)
+include(GNUInstallDirs)
+install(TARGETS ${PROJECT_NAME}
+        PUBLIC_HEADER
+          DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
+)
-- 
2.32.0.windows.2

