--- CMakeLists.txt
+++ CMakeLists.txt
@@ -84,20 +84,20 @@ set( ossimDependentLibs )
 #---
 
 # GEOS - Required:
-find_package( GEOS )
+find_package( GEOS REQUIRED )
 if( GEOS_FOUND )
    include_directories( ${GEOS_INCLUDE_DIR} )
-   set( ossimDependentLibs ${ossimDependentLibs} ${GEOS_LIBRARY} )
+   set( ossimDependentLibs ${ossimDependentLibs} GEOS::GEOS )
 else( GEOS_FOUND )
    message( FATAL_ERROR "Could not find required geos package!" )
 endif( GEOS_FOUND )
 
 # GEOFIFF - Required:
 set( OSSIM_HAS_GEOTIFF 0 )
-find_package( GEOTIFF )
+find_package( GeoTIFF REQUIRED )
 if( GEOTIFF_FOUND )
-   include_directories( ${GEOTIFF_INCLUDE_DIR} )
-   set( ossimDependentLibs ${ossimDependentLibs} ${GEOTIFF_LIBRARY} )
+   #include_directories( ${GEOTIFF_INCLUDE_DIR} )
+   set( ossimDependentLibs ${ossimDependentLibs} GeoTIFF::GeoTIFF)
    set( OSSIM_HAS_GEOTIFF 1 )
 else( GEOTIFF_FOUND )
    message( FATAL_ERROR "Could not find required geotiff package!" )
@@ -113,19 +113,19 @@ endif( GEOTIFF_FOUND )
 # endif( GEOTRANS_FOUND )
 
 # JPEG - Required package:
-find_package( JPEG )
+find_package( JPEG REQUIRED )
 if( JPEG_FOUND )
-   include_directories( ${JPEG_INCLUDE_DIR} )
-   set( ossimDependentLibs ${ossimDependentLibs} ${JPEG_LIBRARY} )
+   # include_directories( ${JPEG_INCLUDE_DIR} )
+   set( ossimDependentLibs ${ossimDependentLibs} JPEG::JPEG )
 else( JPEG_FOUND )
    message( FATAL_ERROR "Could not find required jpeg package!" )
 endif( JPEG_FOUND )
 
 # TIFF - Required:
-find_package( TIFF )
+find_package( TIFF REQUIRED)
 if( TIFF_FOUND )
-   include_directories( ${TIFF_INCLUDE_DIR} )
-   set( ossimDependentLibs ${ossimDependentLibs} ${TIFF_LIBRARY} )
+   # include_directories( ${TIFF_INCLUDE_DIR} )
+   set( ossimDependentLibs ${ossimDependentLibs} TIFF::TIFF )
 else( TIFF_FOUND )
    message( FATAL_ERROR "Could not find required tiff package!" )
 endif( TIFF_FOUND )
@@ -133,10 +133,10 @@ endif( TIFF_FOUND )
 # JSONCPP - Required. This will use the amalgamated form embedded in OSSIM. If an previously
 # installed JSONCPP package is preferred, add "-DUSE_OSSIM_JSONCPP=OFF" to the cmake command
 if(NOT USE_OSSIM_JSONCPP)
-   find_package( JsonCpp )
+   find_package( JsonCpp REQUIRED)
    if(JSONCPP_FOUND )
-      include_directories( ${JSONCPP_INCLUDE_DIR} )
-      set( ossimDependentLibs ${ossimDependentLibs} ${JSONCPP_LIBRARY} )
+      # include_directories( ${JSONCPP_INCLUDE_DIR} )
+      set( ossimDependentLibs ${ossimDependentLibs} JsonCpp::JsonCpp )
       message("-- Found JsonCpp: ${JSONCPP_INCLUDE_DIR}" )
    else( JSONCPP_FOUND )
       message( FATAL_ERROR "Could not find required JsonCpp package!" )
@@ -166,10 +166,10 @@ endif() # if (CMAKE_SYSTEM_NAME MATCHES "Linux")
 # FREETYPE - Optional:
 set( OSSIM_HAS_FREETYPE 0 )
 if( BUILD_OSSIM_FREETYPE_SUPPORT )
-   find_package(Freetype)
+   find_package(Freetype REQUIRED)
    if( FREETYPE_FOUND )
-      include_directories( ${FREETYPE_INCLUDE_DIRS} )
-      set( ossimDependentLibs ${ossimDependentLibs} ${FREETYPE_LIBRARIES} )
+      # include_directories( ${FREETYPE_INCLUDE_DIRS} )
+      set( ossimDependentLibs ${ossimDependentLibs} Freetype::Freetype )
       set( OSSIM_HAS_FREETYPE 1 )
    else( FREETYPE_FOUND )
       message( WARNING "Could not find optional freetype package!" )
@@ -179,7 +179,7 @@ endif( BUILD_OSSIM_FREETYPE_SUPPORT )
 # MPI - Optional:
 set( OSSIM_HAS_MPI 0 )
 if( BUILD_OSSIM_MPI_SUPPORT )
-   find_package(MPI)
+   find_package(MPI REQUIRED)
    if ( MPI_FOUND )
       # /usr/share/cmake/Modules/FindMPI.cmae are not consistent in terminology,
       # so we include multiple list names, knowing some will be empty
@@ -195,10 +195,10 @@ endif( BUILD_OSSIM_MPI_SUPPORT )
 
 # ZLIB - Optional:
 set( OSSIM_HAS_LIBZ 0 )
-find_package( ZLIB )
+find_package( ZLIB REQUIRED)
 if ( ZLIB_FOUND )
-   include_directories( ${ZLIB_INCLUDE_DIR} )
-   set( ossimDependentLibs ${ossimDependentLibs} ${ZLIB_LIBRARY} )
+   # include_directories( ${ZLIB_INCLUDE_DIR} )
+   set( ossimDependentLibs ${ossimDependentLibs} ZLIB::ZLIB )
    set( OSSIM_HAS_LIBZ 1 )
 else ( ZLIB_FOUND )
    message( WARNING "Could not find optional zlib package!" )
@@ -208,10 +208,10 @@ endif ( ZLIB_FOUND )
 set( OSSIM_HAS_HDF5 0 )
 if (BUILD_OSSIM_HDF5_SUPPORT)
   message( STATUS "Native HDF5 support requested. Searching for HDF5 library..." )
-  find_package( HDF5A )
-  if ( HDF5A_FOUND)
-     include_directories( ${HDF5A_INCLUDE_DIR} )
-     set( ossimDependentLibs ${ossimDependentLibs} ${HDF5A_LIBRARIES} )
+  find_package( HDF5 REQUIRED)
+  if ( HDF5_FOUND)
+     #include_directories( ${HDF5A_INCLUDE_DIR} )
+     set( ossimDependentLibs ${ossimDependentLibs} HDF5::HDF5 )
      set( OSSIM_HAS_HDF5 1 )
   else ( HDF5A_FOUND )
      message( WARNING "Could not find optional HDF5A package. Excluding native support." )
@@ -221,7 +221,7 @@ else (BUILD_OSSIM_HDF5_SUPPORT)
 endif ( BUILD_OSSIM_HDF5_SUPPORT )
 
 
-find_package( Threads )
+find_package( Threads REQUIRED)
 set( ossimDependentLibs ${ossimDependentLibs} ${CMAKE_THREAD_LIBS_INIT} )
 
 #---
