diff --git a/cpp/CMakeLists.txt b/cpp/CMakeLists.txt
index 029f13f..3518a23 100644
--- a/cpp/CMakeLists.txt
+++ b/cpp/CMakeLists.txt
@@ -659,7 +659,7 @@ endif()
 
 if(ARROW_WITH_BROTLI)
   # Order is important for static linking
-  set(ARROW_BROTLI_LIBS Brotli::brotlienc Brotli::brotlidec Brotli::brotlicommon)
+  set(ARROW_BROTLI_LIBS brotli::brotlienc brotli::brotlidec brotli::brotlicommon)
   list(APPEND ARROW_SHARED_LINK_LIBS ${ARROW_BROTLI_LIBS})
   list(APPEND ARROW_STATIC_LINK_LIBS ${ARROW_BROTLI_LIBS})
   if(Brotli_SOURCE STREQUAL "SYSTEM")
@@ -675,14 +675,21 @@ if(ARROW_WITH_BZ2)
 endif()
 
 if(ARROW_WITH_LZ4)
-  list(APPEND ARROW_STATIC_LINK_LIBS LZ4::lz4)
+if (TARGET LZ4::lz4_static)
+  list(APPEND ARROW_STATIC_LINK_LIBS LZ4::lz4_static)
   if(lz4_SOURCE STREQUAL "SYSTEM")
-    list(APPEND ARROW_STATIC_INSTALL_INTERFACE_LIBS LZ4::lz4)
+    list(APPEND ARROW_STATIC_INSTALL_INTERFACE_LIBS LZ4::lz4_static)
   endif()
+else()
+  list(APPEND ARROW_STATIC_LINK_LIBS LZ4::lz4_shared)
+  if(lz4_SOURCE STREQUAL "SYSTEM")
+    list(APPEND ARROW_STATIC_INSTALL_INTERFACE_LIBS LZ4::lz4_shared)
+  endif()
+endif()
 endif()
 
 if(ARROW_WITH_SNAPPY)
-  list(APPEND ARROW_STATIC_LINK_LIBS ${Snappy_TARGET})
+  list(APPEND ARROW_STATIC_LINK_LIBS Snappy::snappy)
   if(Snappy_SOURCE STREQUAL "SYSTEM")
     list(APPEND ARROW_STATIC_INSTALL_INTERFACE_LIBS ${Snappy_TARGET})
   endif()
diff --git a/cpp/cmake_modules/ThirdpartyToolchain.cmake b/cpp/cmake_modules/ThirdpartyToolchain.cmake
index b7cd31f..78f3df3 100644
--- a/cpp/cmake_modules/ThirdpartyToolchain.cmake
+++ b/cpp/cmake_modules/ThirdpartyToolchain.cmake
@@ -1162,10 +1162,12 @@ endmacro()
 
 if(ARROW_WITH_SNAPPY)
   resolve_dependency(Snappy
-                     HAVE_ALT
+                     USE_CONFIG
                      TRUE
                      PC_PACKAGE_NAMES
                      snappy)
+
+  if(0)
   if(${Snappy_SOURCE} STREQUAL "SYSTEM" AND NOT snappy_PC_FOUND)
     get_target_property(SNAPPY_TYPE ${Snappy_TARGET} TYPE)
     if(NOT SNAPPY_TYPE STREQUAL "INTERFACE_LIBRARY")
@@ -1180,6 +1182,9 @@ if(ARROW_WITH_SNAPPY)
       string(APPEND ARROW_PC_LIBS_PRIVATE " ${SNAPPY_LIB}")
     endif()
   endif()
+  else()
+  string(APPEND ARROW_PC_LIBS_PRIVATE " ${Snappy_LIBRARIES}")
+  endif()
 endif()
 
 # ----------------------------------------------------------------------
@@ -1242,7 +1247,7 @@ macro(build_brotli)
 endmacro()
 
 if(ARROW_WITH_BROTLI)
-  resolve_dependency(Brotli PC_PACKAGE_NAMES libbrotlidec libbrotlienc)
+  resolve_dependency(brotli PC_PACKAGE_NAMES libbrotlidec libbrotlienc)
 endif()
 
 if(PARQUET_REQUIRE_ENCRYPTION AND NOT ARROW_PARQUET)
@@ -1256,7 +1261,7 @@ if(PARQUET_REQUIRE_ENCRYPTION
    OR ARROW_GANDIVA)
   set(OpenSSL_SOURCE "SYSTEM")
   resolve_dependency(OpenSSL
-                     HAVE_ALT
+                     USE_CONFIG
                      TRUE
                      REQUIRED_VERSION
                      ${ARROW_OPENSSL_REQUIRED_VERSION})
@@ -1399,22 +1404,14 @@ endmacro()
 if(ARROW_NEED_GFLAGS)
   set(ARROW_GFLAGS_REQUIRED_VERSION "2.1.0")
   resolve_dependency(gflags
-                     HAVE_ALT
+                     USE_CONFIG
                      TRUE
                      REQUIRED_VERSION
                      ${ARROW_GFLAGS_REQUIRED_VERSION}
                      IS_RUNTIME_DEPENDENCY
                      FALSE)
 
-  if(NOT TARGET ${GFLAGS_LIBRARIES})
-    if(TARGET gflags::gflags_shared)
-      set(GFLAGS_LIBRARIES gflags::gflags_shared)
-    elseif(TARGET gflags-shared)
-      set(GFLAGS_LIBRARIES gflags-shared)
-    elseif(TARGET gflags_shared)
-      set(GFLAGS_LIBRARIES gflags_shared)
-    endif()
-  endif()
+  set(GFLAGS_LIBRARIES gflags::gflags)
 endif()
 
 # ----------------------------------------------------------------------
@@ -1638,7 +1635,7 @@ if(ARROW_WITH_PROTOBUF)
     set(ARROW_PROTOBUF_REQUIRED_VERSION "2.6.1")
   endif()
   resolve_dependency(Protobuf
-                     HAVE_ALT
+                     USE_CONFIG
                      TRUE
                      REQUIRED_VERSION
                      ${ARROW_PROTOBUF_REQUIRED_VERSION}
@@ -1770,7 +1767,7 @@ macro(build_substrait)
 
   add_custom_target(substrait_gen ALL DEPENDS ${SUBSTRAIT_PROTO_GEN_ALL})
 
-  set(SUBSTRAIT_INCLUDES ${SUBSTRAIT_CPP_DIR} ${PROTOBUF_INCLUDE_DIR})
+  set(SUBSTRAIT_INCLUDES ${SUBSTRAIT_CPP_DIR} ${protobuf_INCLUDE_DIR})
 
   add_library(substrait STATIC ${SUBSTRAIT_SOURCES})
   set_target_properties(substrait PROPERTIES POSITION_INDEPENDENT_CODE ON)
@@ -1781,6 +1778,8 @@ macro(build_substrait)
   list(APPEND ARROW_BUNDLED_STATIC_LIBS substrait)
 endmacro()
 
+set(CMAKE_VERBOSE_MAKEFILE ON)
+
 if(ARROW_SUBSTRAIT)
   # Currently, we can only build Substrait from source.
   set(Substrait_SOURCE "BUNDLED")
@@ -1866,7 +1865,10 @@ macro(build_jemalloc)
 endmacro()
 
 if(ARROW_JEMALLOC)
-  resolve_dependency(jemalloc)
+  #resolve_dependency(jemalloc)
+  find_package(jemalloc REQUIRED CONFIG)
+  include_directories(SYSTEM "${jemalloc_INCLUDE_DIR}")
+  list(APPEND ARROW_BUNDLED_STATIC_LIBS  ${jemalloc_LIBRARIES_TARGETS})
 endif()
 
 # ----------------------------------------------------------------------
@@ -2186,7 +2188,7 @@ endmacro()
 if(ARROW_WITH_RAPIDJSON)
   set(ARROW_RAPIDJSON_REQUIRED_VERSION "1.1.0")
   resolve_dependency(RapidJSON
-                     HAVE_ALT
+                     USE_CONFIG
                      TRUE
                      REQUIRED_VERSION
                      ${ARROW_RAPIDJSON_REQUIRED_VERSION}
@@ -2334,19 +2336,29 @@ macro(build_lz4)
                       BUILD_BYPRODUCTS ${LZ4_STATIC_LIB})
 
   file(MAKE_DIRECTORY "${LZ4_PREFIX}/include")
-  add_library(LZ4::lz4 STATIC IMPORTED)
-  set_target_properties(LZ4::lz4
-                        PROPERTIES IMPORTED_LOCATION "${LZ4_STATIC_LIB}"
-                                   INTERFACE_INCLUDE_DIRECTORIES "${LZ4_PREFIX}/include")
-  add_dependencies(toolchain lz4_ep)
-  add_dependencies(LZ4::lz4 lz4_ep)
-
-  list(APPEND ARROW_BUNDLED_STATIC_LIBS LZ4::lz4)
+  if (TARGET LZ4::lz4_static)
+    add_library(LZ4::lz4_static STATIC IMPORTED)
+    set_target_properties(LZ4::lz4_static
+                          PROPERTIES IMPORTED_LOCATION "${LZ4_STATIC_LIB}"
+                                     INTERFACE_INCLUDE_DIRECTORIES "${LZ4_PREFIX}/include")
+    add_dependencies(toolchain lz4_ep)
+    add_dependencies(LZ4::lz4_static lz4_ep)
+    list(APPEND ARROW_BUNDLED_STATIC_LIBS LZ4::lz4_static)
+  else()
+    add_library(LZ4::lz4_shared STATIC IMPORTED)
+    set_target_properties(LZ4::lz4_shared
+                          PROPERTIES IMPORTED_LOCATION "${LZ4_SHARED_LIB}"
+                                     INTERFACE_INCLUDE_DIRECTORIES "${LZ4_PREFIX}/include")
+    add_dependencies(toolchain lz4_ep)
+    add_dependencies(LZ4::lz4_shared lz4_ep)
+    list(APPEND ARROW_BUNDLED_STATIC_LIBS LZ4::lz4_shared)
+  endif()
+
 endmacro()
 
 if(ARROW_WITH_LZ4)
   resolve_dependency(lz4
-                     HAVE_ALT
+                     USE_CONFIG
                      TRUE
                      PC_PACKAGE_NAMES
                      liblz4)
@@ -2415,7 +2427,7 @@ endmacro()
 if(ARROW_WITH_ZSTD)
   # ARROW-13384: ZSTD_minCLevel was added in v1.4.0, required by ARROW-13091
   resolve_dependency(zstd
-                     HAVE_ALT
+                     USE_CONFIG
                      TRUE
                      PC_PACKAGE_NAMES
                      libzstd
@@ -2477,7 +2489,7 @@ if(ARROW_WITH_RE2)
   # Don't specify "PC_PACKAGE_NAMES re2" here because re2.pc may
   # include -std=c++11. It's not compatible with C source and C++
   # source not uses C++ 11.
-  resolve_dependency(re2 HAVE_ALT TRUE)
+  resolve_dependency(re2 USE_CONFIG TRUE)
   if(${re2_SOURCE} STREQUAL "SYSTEM")
     get_target_property(RE2_TYPE re2::re2 TYPE)
     if(NOT RE2_TYPE STREQUAL "INTERFACE_LIBRARY")
@@ -3922,7 +3934,7 @@ if(ARROW_WITH_GRPC)
     set(gRPC_SOURCE "${Protobuf_SOURCE}")
   endif()
   resolve_dependency(gRPC
-                     HAVE_ALT
+                     USE_CONFIG
                      TRUE
                      REQUIRED_VERSION
                      ${ARROW_GRPC_REQUIRED_VERSION}
@@ -3939,9 +3951,9 @@ if(ARROW_WITH_GRPC)
     get_target_property(GRPC_INCLUDE_DIR gRPC::grpc++ INTERFACE_INCLUDE_DIRECTORIES)
     if(GRPC_INCLUDE_DIR MATCHES "^\\$<"
        OR # generator expression
-          EXISTS "${GRPC_INCLUDE_DIR}/grpcpp/impl/codegen/config_protobuf.h")
+          EXISTS ${GRPC_INCLUDE_DIR}/grpcpp/impl/codegen/config_protobuf.h)
       set(GRPCPP_PP_INCLUDE TRUE)
-    elseif(EXISTS "${GRPC_INCLUDE_DIR}/grpc++/impl/codegen/config_protobuf.h")
+    elseif(EXISTS ${GRPC_INCLUDE_DIR}/grpc++/impl/codegen/config_protobuf.h)
       set(GRPCPP_PP_INCLUDE FALSE)
     else()
       message(FATAL_ERROR "Cannot find grpc++ headers in ${GRPC_INCLUDE_DIR}")
@@ -4282,8 +4294,11 @@ macro(build_orc)
   get_target_property(ORC_SNAPPY_INCLUDE_DIR ${Snappy_TARGET}
                       INTERFACE_INCLUDE_DIRECTORIES)
   get_filename_component(ORC_SNAPPY_ROOT "${ORC_SNAPPY_INCLUDE_DIR}" DIRECTORY)
-
-  get_target_property(ORC_LZ4_ROOT LZ4::lz4 INTERFACE_INCLUDE_DIRECTORIES)
+  if (TARGET LZ4::lz4_static)
+    get_target_property(ORC_LZ4_ROOT LZ4::lz4_static INTERFACE_INCLUDE_DIRECTORIES)
+  else()
+    get_target_property(ORC_LZ4_ROOT LZ4::lz4_shared INTERFACE_INCLUDE_DIRECTORIES)
+  endif()
   get_filename_component(ORC_LZ4_ROOT "${ORC_LZ4_ROOT}" DIRECTORY)
 
   get_target_property(ORC_ZSTD_ROOT ${ARROW_ZSTD_LIBZSTD} INTERFACE_INCLUDE_DIRECTORIES)
@@ -4321,16 +4336,29 @@ macro(build_orc)
   # Work around CMake bug
   file(MAKE_DIRECTORY ${ORC_INCLUDE_DIR})
 
-  externalproject_add(orc_ep
-                      URL ${ORC_SOURCE_URL}
-                      URL_HASH "SHA256=${ARROW_ORC_BUILD_SHA256_CHECKSUM}"
-                      BUILD_BYPRODUCTS ${ORC_STATIC_LIB}
-                      CMAKE_ARGS ${ORC_CMAKE_ARGS} ${EP_LOG_OPTIONS}
-                      DEPENDS ${ARROW_PROTOBUF_LIBPROTOBUF}
-                              ${ARROW_ZSTD_LIBZSTD}
-                              ${Snappy_TARGET}
-                              LZ4::lz4
-                              ZLIB::ZLIB)
+  if (TARGET LZ4::lz4_static)
+    externalproject_add(orc_ep
+                        URL ${ORC_SOURCE_URL}
+                        URL_HASH "SHA256=${ARROW_ORC_BUILD_SHA256_CHECKSUM}"
+                        BUILD_BYPRODUCTS ${ORC_STATIC_LIB}
+                        CMAKE_ARGS ${ORC_CMAKE_ARGS} ${EP_LOG_OPTIONS}
+                        DEPENDS ${ARROW_PROTOBUF_LIBPROTOBUF}
+                                ${ARROW_ZSTD_LIBZSTD}
+                                ${Snappy_TARGET}
+                                LZ4::lz4_static
+                                ZLIB::ZLIB)
+  else()
+    externalproject_add(orc_ep
+                        URL ${ORC_SOURCE_URL}
+                        URL_HASH "SHA256=${ARROW_ORC_BUILD_SHA256_CHECKSUM}"
+                        BUILD_BYPRODUCTS ${ORC_STATIC_LIB}
+                        CMAKE_ARGS ${ORC_CMAKE_ARGS} ${EP_LOG_OPTIONS}
+                        DEPENDS ${ARROW_PROTOBUF_LIBPROTOBUF}
+                                ${ARROW_ZSTD_LIBZSTD}
+                                ${Snappy_TARGET}
+                                LZ4::lz4_shared
+                                ZLIB::ZLIB)
+  endif()
 
   set(ORC_VENDORED 1)
 
@@ -4338,7 +4366,11 @@ macro(build_orc)
   set_target_properties(orc::liborc
                         PROPERTIES IMPORTED_LOCATION "${ORC_STATIC_LIB}"
                                    INTERFACE_INCLUDE_DIRECTORIES "${ORC_INCLUDE_DIR}")
-  set(ORC_LINK_LIBRARIES LZ4::lz4 ZLIB::ZLIB ${ARROW_ZSTD_LIBZSTD} ${Snappy_TARGET})
+  if (TARGET LZ4::lz4_static)
+    set(ORC_LINK_LIBRARIES LZ4::lz4_static ZLIB::ZLIB ${ARROW_ZSTD_LIBZSTD} ${Snappy_TARGET})
+  else()
+    set(ORC_LINK_LIBRARIES LZ4::lz4_shared ZLIB::ZLIB ${ARROW_ZSTD_LIBZSTD} ${Snappy_TARGET})
+  endif()
   if(NOT MSVC)
     if(NOT APPLE)
       list(APPEND ORC_LINK_LIBRARIES Threads::Threads)
@@ -4765,7 +4797,7 @@ macro(build_awssdk)
 endmacro()
 
 if(ARROW_S3)
-  resolve_dependency(AWSSDK HAVE_ALT TRUE)
+  resolve_dependency(AWSSDK USE_CONFIG TRUE)
 
   message(STATUS "Found AWS SDK headers: ${AWSSDK_INCLUDE_DIR}")
   message(STATUS "Found AWS SDK libraries: ${AWSSDK_LINK_LIBRARIES}")
