diff --git a/cpp/cmake_modules/ThirdpartyToolchain.cmake b/cpp/cmake_modules/ThirdpartyToolchain.cmake
index bc38952..3e9647a 100644
--- a/cpp/cmake_modules/ThirdpartyToolchain.cmake
+++ b/cpp/cmake_modules/ThirdpartyToolchain.cmake
@@ -1600,71 +1600,7 @@ endif()
 # jemalloc - Unix-only high-performance allocator
 
 if(ARROW_JEMALLOC)
-  message(STATUS "Building (vendored) jemalloc from source")
-  # We only use a vendored jemalloc as we want to control its version.
-  # Also our build of jemalloc is specially prefixed so that it will not
-  # conflict with the default allocator as well as other jemalloc
-  # installations.
-  # find_package(jemalloc)
-
-  set(ARROW_JEMALLOC_USE_SHARED OFF)
-  set(JEMALLOC_PREFIX
-      "${CMAKE_CURRENT_BINARY_DIR}/jemalloc_ep-prefix/src/jemalloc_ep/dist/")
-  set(JEMALLOC_LIB_DIR "${JEMALLOC_PREFIX}/lib")
-  set(JEMALLOC_STATIC_LIB
-      "${JEMALLOC_LIB_DIR}/libjemalloc_pic${CMAKE_STATIC_LIBRARY_SUFFIX}")
-  set(JEMALLOC_CONFIGURE_COMMAND ./configure "AR=${CMAKE_AR}" "CC=${CMAKE_C_COMPILER}")
-  if(CMAKE_OSX_SYSROOT)
-    list(APPEND JEMALLOC_CONFIGURE_COMMAND "SDKROOT=${CMAKE_OSX_SYSROOT}")
-  endif()
-  if(DEFINED ARROW_JEMALLOC_LG_PAGE)
-    # Used for arm64 manylinux wheels in order to make the wheel work on both
-    # 4k and 64k page arm64 systems.
-    list(APPEND JEMALLOC_CONFIGURE_COMMAND "--with-lg-page=${ARROW_JEMALLOC_LG_PAGE}")
-  endif()
-  list(APPEND
-       JEMALLOC_CONFIGURE_COMMAND
-       "--prefix=${JEMALLOC_PREFIX}"
-       "--libdir=${JEMALLOC_LIB_DIR}"
-       "--with-jemalloc-prefix=je_arrow_"
-       "--with-private-namespace=je_arrow_private_"
-       "--without-export"
-       "--disable-shared"
-       # Don't override operator new()
-       "--disable-cxx"
-       "--disable-libdl"
-       # See https://github.com/jemalloc/jemalloc/issues/1237
-       "--disable-initial-exec-tls"
-       ${EP_LOG_OPTIONS})
-  set(JEMALLOC_BUILD_COMMAND ${MAKE} ${MAKE_BUILD_ARGS})
-  if(CMAKE_OSX_SYSROOT)
-    list(APPEND JEMALLOC_BUILD_COMMAND "SDKROOT=${CMAKE_OSX_SYSROOT}")
-  endif()
-  externalproject_add(jemalloc_ep
-                      URL ${JEMALLOC_SOURCE_URL}
-                      URL_HASH "SHA256=${ARROW_JEMALLOC_BUILD_SHA256_CHECKSUM}"
-                      PATCH_COMMAND touch doc/jemalloc.3 doc/jemalloc.html
-                                    # The prefix "je_arrow_" must be kept in sync with the value in memory_pool.cc
-                      CONFIGURE_COMMAND ${JEMALLOC_CONFIGURE_COMMAND}
-                      BUILD_IN_SOURCE 1
-                      BUILD_COMMAND ${JEMALLOC_BUILD_COMMAND}
-                      BUILD_BYPRODUCTS "${JEMALLOC_STATIC_LIB}"
-                      INSTALL_COMMAND ${MAKE} -j1 install)
-
-  # Don't use the include directory directly so that we can point to a path
-  # that is unique to our codebase.
-  include_directories(SYSTEM "${CMAKE_CURRENT_BINARY_DIR}/jemalloc_ep-prefix/src/")
-  # The include directory must exist before it is referenced by a target.
-  file(MAKE_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/jemalloc_ep-prefix/src/")
-  add_library(jemalloc::jemalloc STATIC IMPORTED)
-  set_target_properties(jemalloc::jemalloc
-                        PROPERTIES INTERFACE_LINK_LIBRARIES Threads::Threads
-                                   IMPORTED_LOCATION "${JEMALLOC_STATIC_LIB}"
-                                   INTERFACE_INCLUDE_DIRECTORIES
-                                   "${CMAKE_CURRENT_BINARY_DIR}/jemalloc_ep-prefix/src")
-  add_dependencies(jemalloc::jemalloc jemalloc_ep)
-
-  list(APPEND ARROW_BUNDLED_STATIC_LIBS jemalloc::jemalloc)
+  find_package(jemalloc REQUIRED)
 endif()
 
 # ----------------------------------------------------------------------
diff --git a/cpp/src/arrow/CMakeLists.txt b/cpp/src/arrow/CMakeLists.txt
index b984bc1..84975e2 100644
--- a/cpp/src/arrow/CMakeLists.txt
+++ b/cpp/src/arrow/CMakeLists.txt
@@ -323,7 +323,7 @@ set(ARROW_TESTING_SRCS
 
 set(_allocator_dependencies "") # Empty list
 if(ARROW_JEMALLOC)
-  list(APPEND _allocator_dependencies jemalloc_ep)
+  list(APPEND _allocator_dependencies jemalloc::jemalloc)
 endif()
 if(ARROW_MIMALLOC)
   list(APPEND _allocator_dependencies mimalloc_ep)
diff --git a/cpp/src/arrow/memory_pool.cc b/cpp/src/arrow/memory_pool.cc
index cf8bf64..cf8966b 100644
--- a/cpp/src/arrow/memory_pool.cc
+++ b/cpp/src/arrow/memory_pool.cc
@@ -48,7 +48,7 @@
 // Needed to support jemalloc 3 and 4
 #define JEMALLOC_MANGLE
 // Explicitly link to our version of jemalloc
-#include "jemalloc_ep/dist/include/jemalloc/jemalloc.h"
+#include "jemalloc/jemalloc.h"
 #endif
 
 #ifdef ARROW_MIMALLOC
diff --git a/cpp/cmake_modules/Findjemalloc.cmake a/cpp/cmake_modules/Findjemalloc.cmake
deleted file mode 100644
index 84bb81f..0000000
--- a/cpp/cmake_modules/Findjemalloc.cmake
+++ /dev/null
@@ -1,94 +0,0 @@
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#
-# http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-#
-# Tries to find jemalloc headers and libraries.
-#
-# Usage of this module as follows:
-#
-#  find_package(jemalloc)
-#
-# Variables used by this module, they can change the default behaviour and need
-# to be set before calling find_package:
-#
-#  JEMALLOC_HOME -
-#   When set, this path is inspected instead of standard library locations as
-#   the root of the jemalloc installation.  The environment variable
-#   JEMALLOC_HOME overrides this veriable.
-#
-# This module defines
-#  JEMALLOC_INCLUDE_DIR, directory containing headers
-#  JEMALLOC_SHARED_LIB, path to libjemalloc.so/dylib
-#  JEMALLOC_FOUND, whether flatbuffers has been found
-
-if(NOT "${JEMALLOC_HOME}" STREQUAL "")
-  file(TO_CMAKE_PATH "${JEMALLOC_HOME}" _native_path)
-  list(APPEND _jemalloc_roots ${_native_path})
-elseif(JEMALLOC_HOME)
-  list(APPEND _jemalloc_roots ${JEMALLOC_HOME})
-endif()
-
-set(LIBJEMALLOC_NAMES jemalloc libjemalloc.so.1 libjemalloc.so.2 libjemalloc.dylib)
-
-# Try the parameterized roots, if they exist
-if(_jemalloc_roots)
-  find_path(JEMALLOC_INCLUDE_DIR
-            NAMES jemalloc/jemalloc.h
-            PATHS ${_jemalloc_roots}
-            NO_DEFAULT_PATH
-            PATH_SUFFIXES "include")
-  find_library(JEMALLOC_SHARED_LIB
-               NAMES ${LIBJEMALLOC_NAMES}
-               PATHS ${_jemalloc_roots}
-               NO_DEFAULT_PATH
-               PATH_SUFFIXES "lib")
-  find_library(JEMALLOC_STATIC_LIB
-               NAMES jemalloc_pic
-               PATHS ${_jemalloc_roots}
-               NO_DEFAULT_PATH
-               PATH_SUFFIXES "lib")
-else()
-  find_path(JEMALLOC_INCLUDE_DIR NAMES jemalloc/jemalloc.h)
-  message(STATUS ${JEMALLOC_INCLUDE_DIR})
-  find_library(JEMALLOC_SHARED_LIB NAMES ${LIBJEMALLOC_NAMES})
-  message(STATUS ${JEMALLOC_SHARED_LIB})
-  find_library(JEMALLOC_STATIC_LIB NAMES jemalloc_pic)
-  message(STATUS ${JEMALLOC_STATIC_LIB})
-endif()
-
-if(JEMALLOC_INCLUDE_DIR AND JEMALLOC_SHARED_LIB)
-  set(JEMALLOC_FOUND TRUE)
-else()
-  set(JEMALLOC_FOUND FALSE)
-endif()
-
-if(JEMALLOC_FOUND)
-  if(NOT jemalloc_FIND_QUIETLY)
-    message(STATUS "Found the jemalloc library: ${JEMALLOC_LIBRARIES}")
-  endif()
-else()
-  if(NOT jemalloc_FIND_QUIETLY)
-    set(JEMALLOC_ERR_MSG "Could not find the jemalloc library. Looked in ")
-    if(_flatbuffers_roots)
-      set(JEMALLOC_ERR_MSG "${JEMALLOC_ERR_MSG} in ${_jemalloc_roots}.")
-    else()
-      set(JEMALLOC_ERR_MSG "${JEMALLOC_ERR_MSG} system search paths.")
-    endif()
-    if(jemalloc_FIND_REQUIRED)
-      message(FATAL_ERROR "${JEMALLOC_ERR_MSG}")
-    else(jemalloc_FIND_REQUIRED)
-      message(STATUS "${JEMALLOC_ERR_MSG}")
-    endif(jemalloc_FIND_REQUIRED)
-  endif()
-endif()
-
-mark_as_advanced(JEMALLOC_INCLUDE_DIR JEMALLOC_SHARED_LIB)
