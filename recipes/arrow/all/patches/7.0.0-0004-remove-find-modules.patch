diff --git a/cpp/cmake_modules/FindBrotli.cmake a/cpp/cmake_modules/FindBrotli.cmake
deleted file mode 100644
index e2670b5..0000000
--- a/cpp/cmake_modules/FindBrotli.cmake
+++ /dev/null
@@ -1,130 +0,0 @@
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#
-# http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-#
-# Tries to find Brotli headers and libraries.
-#
-# Usage of this module as follows:
-#
-#  find_package(Brotli)
-
-if(ARROW_BROTLI_USE_SHARED)
-  set(BROTLI_COMMON_LIB_NAMES
-      brotlicommon
-      ${CMAKE_SHARED_LIBRARY_PREFIX}brotlicommon${CMAKE_SHARED_LIBRARY_SUFFIX})
-
-  set(BROTLI_ENC_LIB_NAMES
-      brotlienc ${CMAKE_SHARED_LIBRARY_PREFIX}brotlienc${CMAKE_SHARED_LIBRARY_SUFFIX})
-
-  set(BROTLI_DEC_LIB_NAMES
-      brotlidec ${CMAKE_SHARED_LIBRARY_PREFIX}brotlidec${CMAKE_SHARED_LIBRARY_SUFFIX})
-else()
-  set(BROTLI_COMMON_LIB_NAMES
-      brotlicommon-static
-      ${CMAKE_STATIC_LIBRARY_PREFIX}brotlicommon-static${CMAKE_STATIC_LIBRARY_SUFFIX}
-      ${CMAKE_STATIC_LIBRARY_PREFIX}brotlicommon_static${CMAKE_STATIC_LIBRARY_SUFFIX}
-      ${CMAKE_STATIC_LIBRARY_PREFIX}brotlicommon${CMAKE_STATIC_LIBRARY_SUFFIX})
-
-  set(BROTLI_ENC_LIB_NAMES
-      brotlienc-static
-      ${CMAKE_STATIC_LIBRARY_PREFIX}brotlienc-static${CMAKE_STATIC_LIBRARY_SUFFIX}
-      ${CMAKE_STATIC_LIBRARY_PREFIX}brotlienc_static${CMAKE_STATIC_LIBRARY_SUFFIX}
-      ${CMAKE_STATIC_LIBRARY_PREFIX}brotlienc${CMAKE_STATIC_LIBRARY_SUFFIX})
-
-  set(BROTLI_DEC_LIB_NAMES
-      brotlidec-static
-      ${CMAKE_STATIC_LIBRARY_PREFIX}brotlidec-static${CMAKE_STATIC_LIBRARY_SUFFIX}
-      ${CMAKE_STATIC_LIBRARY_PREFIX}brotlidec_static${CMAKE_STATIC_LIBRARY_SUFFIX}
-      ${CMAKE_STATIC_LIBRARY_PREFIX}brotlidec${CMAKE_STATIC_LIBRARY_SUFFIX})
-endif()
-
-if(BROTLI_ROOT)
-  find_library(BROTLI_COMMON_LIBRARY
-               NAMES ${BROTLI_COMMON_LIB_NAMES}
-               PATHS ${BROTLI_ROOT}
-               PATH_SUFFIXES ${ARROW_LIBRARY_PATH_SUFFIXES}
-               NO_DEFAULT_PATH)
-  find_library(BROTLI_ENC_LIBRARY
-               NAMES ${BROTLI_ENC_LIB_NAMES}
-               PATHS ${BROTLI_ROOT}
-               PATH_SUFFIXES ${ARROW_LIBRARY_PATH_SUFFIXES}
-               NO_DEFAULT_PATH)
-  find_library(BROTLI_DEC_LIBRARY
-               NAMES ${BROTLI_DEC_LIB_NAMES}
-               PATHS ${BROTLI_ROOT}
-               PATH_SUFFIXES ${ARROW_LIBRARY_PATH_SUFFIXES}
-               NO_DEFAULT_PATH)
-  find_path(BROTLI_INCLUDE_DIR
-            NAMES brotli/decode.h
-            PATHS ${BROTLI_ROOT}
-            PATH_SUFFIXES ${ARROW_INCLUDE_PATH_SUFFIXES}
-            NO_DEFAULT_PATH)
-else()
-  find_package(PkgConfig QUIET)
-  pkg_check_modules(BROTLI_PC libbrotlicommon libbrotlienc libbrotlidec)
-  if(BROTLI_PC_FOUND)
-    set(BROTLI_INCLUDE_DIR "${BROTLI_PC_libbrotlicommon_INCLUDEDIR}")
-
-    # Some systems (e.g. Fedora) don't fill Brotli_LIBRARY_DIRS, so add the other dirs here.
-    list(APPEND BROTLI_PC_LIBRARY_DIRS "${BROTLI_PC_libbrotlicommon_LIBDIR}")
-    list(APPEND BROTLI_PC_LIBRARY_DIRS "${BROTLI_PC_libbrotlienc_LIBDIR}")
-    list(APPEND BROTLI_PC_LIBRARY_DIRS "${BROTLI_PC_libbrotlidec_LIBDIR}")
-
-    find_library(BROTLI_COMMON_LIBRARY
-                 NAMES ${BROTLI_COMMON_LIB_NAMES}
-                 PATHS ${BROTLI_PC_LIBRARY_DIRS}
-                 PATH_SUFFIXES ${ARROW_LIBRARY_PATH_SUFFIXES}
-                 NO_DEFAULT_PATH)
-    find_library(BROTLI_ENC_LIBRARY
-                 NAMES ${BROTLI_ENC_LIB_NAMES}
-                 PATHS ${BROTLI_PC_LIBRARY_DIRS}
-                 PATH_SUFFIXES ${ARROW_LIBRARY_PATH_SUFFIXES}
-                 NO_DEFAULT_PATH)
-    find_library(BROTLI_DEC_LIBRARY
-                 NAMES ${BROTLI_DEC_LIB_NAMES}
-                 PATHS ${BROTLI_PC_LIBRARY_DIRS}
-                 PATH_SUFFIXES ${ARROW_LIBRARY_PATH_SUFFIXES}
-                 NO_DEFAULT_PATH)
-  else()
-    find_library(BROTLI_COMMON_LIBRARY
-                 NAMES ${BROTLI_COMMON_LIB_NAMES}
-                 PATH_SUFFIXES ${ARROW_LIBRARY_PATH_SUFFIXES})
-    find_library(BROTLI_ENC_LIBRARY
-                 NAMES ${BROTLI_ENC_LIB_NAMES}
-                 PATH_SUFFIXES ${ARROW_LIBRARY_PATH_SUFFIXES})
-    find_library(BROTLI_DEC_LIBRARY
-                 NAMES ${BROTLI_DEC_LIB_NAMES}
-                 PATH_SUFFIXES ${ARROW_LIBRARY_PATH_SUFFIXES})
-    find_path(BROTLI_INCLUDE_DIR
-              NAMES brotli/decode.h
-              PATH_SUFFIXES ${ARROW_INCLUDE_PATH_SUFFIXES})
-  endif()
-endif()
-
-find_package_handle_standard_args(
-  Brotli REQUIRED_VARS BROTLI_COMMON_LIBRARY BROTLI_ENC_LIBRARY BROTLI_DEC_LIBRARY
-                       BROTLI_INCLUDE_DIR)
-if(Brotli_FOUND OR BROTLI_FOUND)
-  set(Brotli_FOUND TRUE)
-  add_library(Brotli::brotlicommon UNKNOWN IMPORTED)
-  set_target_properties(Brotli::brotlicommon
-                        PROPERTIES IMPORTED_LOCATION "${BROTLI_COMMON_LIBRARY}"
-                                   INTERFACE_INCLUDE_DIRECTORIES "${BROTLI_INCLUDE_DIR}")
-  add_library(Brotli::brotlienc UNKNOWN IMPORTED)
-  set_target_properties(Brotli::brotlienc
-                        PROPERTIES IMPORTED_LOCATION "${BROTLI_ENC_LIBRARY}"
-                                   INTERFACE_INCLUDE_DIRECTORIES "${BROTLI_INCLUDE_DIR}")
-  add_library(Brotli::brotlidec UNKNOWN IMPORTED)
-  set_target_properties(Brotli::brotlidec
-                        PROPERTIES IMPORTED_LOCATION "${BROTLI_DEC_LIBRARY}"
-                                   INTERFACE_INCLUDE_DIRECTORIES "${BROTLI_INCLUDE_DIR}")
-endif()
diff --git a/cpp/cmake_modules/FindLz4.cmake a/cpp/cmake_modules/FindLz4.cmake
deleted file mode 100644
index bc8051f..0000000
--- a/cpp/cmake_modules/FindLz4.cmake
+++ /dev/null
@@ -1,84 +0,0 @@
-# Licensed to the Apache Software Foundation (ASF) under one
-# or more contributor license agreements.  See the NOTICE file
-# distributed with this work for additional information
-# regarding copyright ownership.  The ASF licenses this file
-# to you under the Apache License, Version 2.0 (the
-# "License"); you may not use this file except in compliance
-# with the License.  You may obtain a copy of the License at
-#
-#   http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing,
-# software distributed under the License is distributed on an
-# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-# KIND, either express or implied.  See the License for the
-# specific language governing permissions and limitations
-# under the License.
-
-if(MSVC_TOOLCHAIN AND NOT DEFINED LZ4_MSVC_LIB_PREFIX)
-  set(LZ4_MSVC_LIB_PREFIX "lib")
-endif()
-set(LZ4_LIB_NAME_BASE "${LZ4_MSVC_LIB_PREFIX}lz4")
-
-if(ARROW_LZ4_USE_SHARED)
-  set(LZ4_LIB_NAMES)
-  if(CMAKE_IMPORT_LIBRARY_SUFFIX)
-    list(APPEND
-         LZ4_LIB_NAMES
-         "${CMAKE_IMPORT_LIBRARY_PREFIX}${LZ4_LIB_NAME_BASE}${CMAKE_IMPORT_LIBRARY_SUFFIX}"
-    )
-  endif()
-  list(APPEND LZ4_LIB_NAMES
-       "${CMAKE_SHARED_LIBRARY_PREFIX}${LZ4_LIB_NAME_BASE}${CMAKE_SHARED_LIBRARY_SUFFIX}")
-else()
-  if(MSVC AND NOT DEFINED LZ4_MSVC_STATIC_LIB_SUFFIX)
-    set(LZ4_MSVC_STATIC_LIB_SUFFIX "_static")
-  endif()
-  set(LZ4_STATIC_LIB_SUFFIX "${LZ4_MSVC_STATIC_LIB_SUFFIX}${CMAKE_STATIC_LIBRARY_SUFFIX}")
-  set(LZ4_LIB_NAMES
-      "${CMAKE_STATIC_LIBRARY_PREFIX}${LZ4_LIB_NAME_BASE}${LZ4_STATIC_LIB_SUFFIX}")
-endif()
-
-if(LZ4_ROOT)
-  find_library(LZ4_LIB
-               NAMES ${LZ4_LIB_NAMES}
-               PATHS ${LZ4_ROOT}
-               PATH_SUFFIXES ${ARROW_LIBRARY_PATH_SUFFIXES}
-               NO_DEFAULT_PATH)
-  find_path(LZ4_INCLUDE_DIR
-            NAMES lz4.h
-            PATHS ${LZ4_ROOT}
-            NO_DEFAULT_PATH
-            PATH_SUFFIXES ${ARROW_INCLUDE_PATH_SUFFIXES})
-
-else()
-  find_package(PkgConfig QUIET)
-  pkg_check_modules(LZ4_PC liblz4)
-  if(LZ4_PC_FOUND)
-    set(LZ4_INCLUDE_DIR "${LZ4_PC_INCLUDEDIR}")
-
-    list(APPEND LZ4_PC_LIBRARY_DIRS "${LZ4_PC_LIBDIR}")
-    find_library(LZ4_LIB
-                 NAMES ${LZ4_LIB_NAMES}
-                 PATHS ${LZ4_PC_LIBRARY_DIRS}
-                 NO_DEFAULT_PATH
-                 PATH_SUFFIXES ${ARROW_LIBRARY_PATH_SUFFIXES})
-  else()
-    find_library(LZ4_LIB
-                 NAMES ${LZ4_LIB_NAMES}
-                 PATH_SUFFIXES ${ARROW_LIBRARY_PATH_SUFFIXES})
-    find_path(LZ4_INCLUDE_DIR
-              NAMES lz4.h
-              PATH_SUFFIXES ${ARROW_INCLUDE_PATH_SUFFIXES})
-  endif()
-endif()
-
-find_package_handle_standard_args(Lz4 REQUIRED_VARS LZ4_LIB LZ4_INCLUDE_DIR)
-
-if(Lz4_FOUND)
-  set(Lz4_FOUND TRUE)
-  add_library(LZ4::lz4 UNKNOWN IMPORTED)
-  set_target_properties(LZ4::lz4
-                        PROPERTIES IMPORTED_LOCATION "${LZ4_LIB}"
-                                   INTERFACE_INCLUDE_DIRECTORIES "${LZ4_INCLUDE_DIR}")
-endif()
diff --git a/cpp/cmake_modules/FindSnappy.cmake a/cpp/cmake_modules/FindSnappy.cmake
deleted file mode 100644
index 747df31..0000000
--- a/cpp/cmake_modules/FindSnappy.cmake
+++ /dev/null
@@ -1,62 +0,0 @@
-# Licensed to the Apache Software Foundation (ASF) under one
-# or more contributor license agreements.  See the NOTICE file
-# distributed with this work for additional information
-# regarding copyright ownership.  The ASF licenses this file
-# to you under the Apache License, Version 2.0 (the
-# "License"); you may not use this file except in compliance
-# with the License.  You may obtain a copy of the License at
-#
-#   http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing,
-# software distributed under the License is distributed on an
-# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-# KIND, either express or implied.  See the License for the
-# specific language governing permissions and limitations
-# under the License.
-
-if(ARROW_SNAPPY_USE_SHARED)
-  set(SNAPPY_LIB_NAMES)
-  if(CMAKE_IMPORT_LIBRARY_SUFFIX)
-    list(APPEND SNAPPY_LIB_NAMES
-         "${CMAKE_IMPORT_LIBRARY_PREFIX}snappy${CMAKE_IMPORT_LIBRARY_SUFFIX}")
-  endif()
-  list(APPEND SNAPPY_LIB_NAMES
-       "${CMAKE_SHARED_LIBRARY_PREFIX}snappy${CMAKE_SHARED_LIBRARY_SUFFIX}")
-else()
-  set(SNAPPY_STATIC_LIB_NAME_BASE "snappy")
-  if(MSVC)
-    set(SNAPPY_STATIC_LIB_NAME_BASE
-        "${SNAPPY_STATIC_LIB_NAME_BASE}${SNAPPY_MSVC_STATIC_LIB_SUFFIX}")
-  endif()
-  set(SNAPPY_LIB_NAMES
-      "${CMAKE_STATIC_LIBRARY_PREFIX}${SNAPPY_STATIC_LIB_NAME_BASE}${CMAKE_STATIC_LIBRARY_SUFFIX}"
-  )
-endif()
-
-if(Snappy_ROOT)
-  find_library(Snappy_LIB
-               NAMES ${SNAPPY_LIB_NAMES}
-               PATHS ${Snappy_ROOT}
-               PATH_SUFFIXES ${ARROW_LIBRARY_PATH_SUFFIXES}
-               NO_DEFAULT_PATH)
-  find_path(Snappy_INCLUDE_DIR
-            NAMES snappy.h
-            PATHS ${Snappy_ROOT}
-            NO_DEFAULT_PATH
-            PATH_SUFFIXES ${ARROW_INCLUDE_PATH_SUFFIXES})
-else()
-  find_library(Snappy_LIB NAMES ${SNAPPY_LIB_NAMES})
-  find_path(Snappy_INCLUDE_DIR
-            NAMES snappy.h
-            PATH_SUFFIXES ${ARROW_INCLUDE_PATH_SUFFIXES})
-endif()
-
-find_package_handle_standard_args(Snappy REQUIRED_VARS Snappy_LIB Snappy_INCLUDE_DIR)
-
-if(Snappy_FOUND)
-  add_library(Snappy::snappy UNKNOWN IMPORTED)
-  set_target_properties(Snappy::snappy
-                        PROPERTIES IMPORTED_LOCATION "${Snappy_LIB}"
-                                   INTERFACE_INCLUDE_DIRECTORIES "${Snappy_INCLUDE_DIR}")
-endif()
diff --git a/cpp/cmake_modules/Findjemalloc.cmake a/cpp/cmake_modules/Findjemalloc.cmake
deleted file mode 100644
index 84bb81f..0000000
--- a/cpp/cmake_modules/Findjemalloc.cmake
+++ /dev/null
@@ -1,94 +0,0 @@
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#
-# http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-#
-# Tries to find jemalloc headers and libraries.
-#
-# Usage of this module as follows:
-#
-#  find_package(jemalloc)
-#
-# Variables used by this module, they can change the default behaviour and need
-# to be set before calling find_package:
-#
-#  JEMALLOC_HOME -
-#   When set, this path is inspected instead of standard library locations as
-#   the root of the jemalloc installation.  The environment variable
-#   JEMALLOC_HOME overrides this veriable.
-#
-# This module defines
-#  JEMALLOC_INCLUDE_DIR, directory containing headers
-#  JEMALLOC_SHARED_LIB, path to libjemalloc.so/dylib
-#  JEMALLOC_FOUND, whether flatbuffers has been found
-
-if(NOT "${JEMALLOC_HOME}" STREQUAL "")
-  file(TO_CMAKE_PATH "${JEMALLOC_HOME}" _native_path)
-  list(APPEND _jemalloc_roots ${_native_path})
-elseif(JEMALLOC_HOME)
-  list(APPEND _jemalloc_roots ${JEMALLOC_HOME})
-endif()
-
-set(LIBJEMALLOC_NAMES jemalloc libjemalloc.so.1 libjemalloc.so.2 libjemalloc.dylib)
-
-# Try the parameterized roots, if they exist
-if(_jemalloc_roots)
-  find_path(JEMALLOC_INCLUDE_DIR
-            NAMES jemalloc/jemalloc.h
-            PATHS ${_jemalloc_roots}
-            NO_DEFAULT_PATH
-            PATH_SUFFIXES "include")
-  find_library(JEMALLOC_SHARED_LIB
-               NAMES ${LIBJEMALLOC_NAMES}
-               PATHS ${_jemalloc_roots}
-               NO_DEFAULT_PATH
-               PATH_SUFFIXES "lib")
-  find_library(JEMALLOC_STATIC_LIB
-               NAMES jemalloc_pic
-               PATHS ${_jemalloc_roots}
-               NO_DEFAULT_PATH
-               PATH_SUFFIXES "lib")
-else()
-  find_path(JEMALLOC_INCLUDE_DIR NAMES jemalloc/jemalloc.h)
-  message(STATUS ${JEMALLOC_INCLUDE_DIR})
-  find_library(JEMALLOC_SHARED_LIB NAMES ${LIBJEMALLOC_NAMES})
-  message(STATUS ${JEMALLOC_SHARED_LIB})
-  find_library(JEMALLOC_STATIC_LIB NAMES jemalloc_pic)
-  message(STATUS ${JEMALLOC_STATIC_LIB})
-endif()
-
-if(JEMALLOC_INCLUDE_DIR AND JEMALLOC_SHARED_LIB)
-  set(JEMALLOC_FOUND TRUE)
-else()
-  set(JEMALLOC_FOUND FALSE)
-endif()
-
-if(JEMALLOC_FOUND)
-  if(NOT jemalloc_FIND_QUIETLY)
-    message(STATUS "Found the jemalloc library: ${JEMALLOC_LIBRARIES}")
-  endif()
-else()
-  if(NOT jemalloc_FIND_QUIETLY)
-    set(JEMALLOC_ERR_MSG "Could not find the jemalloc library. Looked in ")
-    if(_flatbuffers_roots)
-      set(JEMALLOC_ERR_MSG "${JEMALLOC_ERR_MSG} in ${_jemalloc_roots}.")
-    else()
-      set(JEMALLOC_ERR_MSG "${JEMALLOC_ERR_MSG} system search paths.")
-    endif()
-    if(jemalloc_FIND_REQUIRED)
-      message(FATAL_ERROR "${JEMALLOC_ERR_MSG}")
-    else(jemalloc_FIND_REQUIRED)
-      message(STATUS "${JEMALLOC_ERR_MSG}")
-    endif(jemalloc_FIND_REQUIRED)
-  endif()
-endif()
-
-mark_as_advanced(JEMALLOC_INCLUDE_DIR JEMALLOC_SHARED_LIB)
diff --git a/cpp/cmake_modules/Findzstd.cmake a/cpp/cmake_modules/Findzstd.cmake
deleted file mode 100644
index 3fc14ec..0000000
--- a/cpp/cmake_modules/Findzstd.cmake
+++ /dev/null
@@ -1,89 +0,0 @@
-# Licensed to the Apache Software Foundation (ASF) under one
-# or more contributor license agreements.  See the NOTICE file
-# distributed with this work for additional information
-# regarding copyright ownership.  The ASF licenses this file
-# to you under the Apache License, Version 2.0 (the
-# "License"); you may not use this file except in compliance
-# with the License.  You may obtain a copy of the License at
-#
-#   http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing,
-# software distributed under the License is distributed on an
-# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-# KIND, either express or implied.  See the License for the
-# specific language governing permissions and limitations
-# under the License.
-
-if(MSVC AND NOT DEFINED ZSTD_MSVC_LIB_PREFIX)
-  set(ZSTD_MSVC_LIB_PREFIX "lib")
-endif()
-set(ZSTD_LIB_NAME_BASE "${ZSTD_MSVC_LIB_PREFIX}zstd")
-
-if(ARROW_ZSTD_USE_SHARED)
-  set(ZSTD_LIB_NAMES)
-  if(CMAKE_IMPORT_LIBRARY_SUFFIX)
-    list(APPEND
-         ZSTD_LIB_NAMES
-         "${CMAKE_IMPORT_LIBRARY_PREFIX}${ZSTD_LIB_NAME_BASE}${CMAKE_IMPORT_LIBRARY_SUFFIX}"
-    )
-  endif()
-  list(APPEND ZSTD_LIB_NAMES
-       "${CMAKE_SHARED_LIBRARY_PREFIX}${ZSTD_LIB_NAME_BASE}${CMAKE_SHARED_LIBRARY_SUFFIX}"
-  )
-else()
-  if(MSVC AND NOT DEFINED ZSTD_MSVC_STATIC_LIB_SUFFIX)
-    set(ZSTD_MSVC_STATIC_LIB_SUFFIX "_static")
-  endif()
-  set(ZSTD_STATIC_LIB_SUFFIX
-      "${ZSTD_MSVC_STATIC_LIB_SUFFIX}${CMAKE_STATIC_LIBRARY_SUFFIX}")
-  set(ZSTD_LIB_NAMES
-      "${CMAKE_STATIC_LIBRARY_PREFIX}${ZSTD_LIB_NAME_BASE}${ZSTD_STATIC_LIB_SUFFIX}")
-endif()
-
-# First, find via if specified ZSTD_ROOT
-if(ZSTD_ROOT)
-  message(STATUS "Using ZSTD_ROOT: ${ZSTD_ROOT}")
-  find_library(ZSTD_LIB
-               NAMES ${ZSTD_LIB_NAMES}
-               PATHS ${ZSTD_ROOT}
-               PATH_SUFFIXES ${ARROW_LIBRARY_PATH_SUFFIXES}
-               NO_DEFAULT_PATH)
-  find_path(ZSTD_INCLUDE_DIR
-            NAMES zstd.h
-            PATHS ${ZSTD_ROOT}
-            NO_DEFAULT_PATH
-            PATH_SUFFIXES ${ARROW_INCLUDE_PATH_SUFFIXES})
-
-else()
-  # Second, find via pkg_check_modules
-  find_package(PkgConfig QUIET)
-  pkg_check_modules(ZSTD_PC libzstd)
-  if(ZSTD_PC_FOUND)
-    set(ZSTD_INCLUDE_DIR "${ZSTD_PC_INCLUDEDIR}")
-
-    list(APPEND ZSTD_PC_LIBRARY_DIRS "${ZSTD_PC_LIBDIR}")
-    find_library(ZSTD_LIB
-                 NAMES ${ZSTD_LIB_NAMES}
-                 PATHS ${ZSTD_PC_LIBRARY_DIRS}
-                 NO_DEFAULT_PATH
-                 PATH_SUFFIXES ${ARROW_LIBRARY_PATH_SUFFIXES})
-  else()
-    # Third, check all other CMake paths
-    find_library(ZSTD_LIB
-                 NAMES ${ZSTD_LIB_NAMES}
-                 PATH_SUFFIXES ${ARROW_LIBRARY_PATH_SUFFIXES})
-    find_path(ZSTD_INCLUDE_DIR
-              NAMES zstd.h
-              PATH_SUFFIXES ${ARROW_INCLUDE_PATH_SUFFIXES})
-  endif()
-endif()
-
-find_package_handle_standard_args(zstd REQUIRED_VARS ZSTD_LIB ZSTD_INCLUDE_DIR)
-
-if(zstd_FOUND)
-  add_library(zstd::libzstd UNKNOWN IMPORTED)
-  set_target_properties(zstd::libzstd
-                        PROPERTIES IMPORTED_LOCATION "${ZSTD_LIB}"
-                                   INTERFACE_INCLUDE_DIRECTORIES "${ZSTD_INCLUDE_DIR}")
-endif()
