diff --git a/cpp/CMakeLists.txt b/cpp/CMakeLists.txt
index aba18c8..bb463d0 100644
--- a/cpp/CMakeLists.txt
+++ b/cpp/CMakeLists.txt
@@ -721,7 +721,7 @@ if(ARROW_WITH_BZ2)
 endif()
 
 if(ARROW_WITH_LZ4)
-  list(APPEND ARROW_STATIC_LINK_LIBS LZ4::lz4)
+  list(APPEND ARROW_STATIC_LINK_LIBS lz4::lz4)
   if(Lz4_SOURCE STREQUAL "SYSTEM")
     list(APPEND ARROW_STATIC_INSTALL_INTERFACE_LIBS LZ4::lz4)
   endif()
@@ -907,8 +907,8 @@ endif()
 if(ARROW_JEMALLOC)
   add_definitions(-DARROW_JEMALLOC)
   add_definitions(-DARROW_JEMALLOC_INCLUDE_DIR=${JEMALLOC_INCLUDE_DIR})
-  list(APPEND ARROW_LINK_LIBS jemalloc::jemalloc)
-  list(APPEND ARROW_STATIC_LINK_LIBS jemalloc::jemalloc)
+  list(APPEND ARROW_LINK_LIBS jemalloc)
+  list(APPEND ARROW_STATIC_LINK_LIBS jemalloc)
 endif()
 
 if(ARROW_MIMALLOC)
diff --git a/cpp/cmake_modules/ThirdpartyToolchain.cmake b/cpp/cmake_modules/ThirdpartyToolchain.cmake
index f070323..2e2a03b 100644
--- a/cpp/cmake_modules/ThirdpartyToolchain.cmake
+++ b/cpp/cmake_modules/ThirdpartyToolchain.cmake
@@ -974,6 +974,7 @@ else()
 endif()
 
 if(ARROW_BOOST_REQUIRED)
+if(0)
   resolve_dependency(Boost
                      HAVE_ALT
                      TRUE
@@ -982,6 +983,9 @@ if(ARROW_BOOST_REQUIRED)
                      IS_RUNTIME_DEPENDENCY
                      # libarrow.so doesn't depend on libboost*.
                      FALSE)
+else()
+  find_package(Boost REQUIRED CONFIG)
+endif()
 
   if(TARGET Boost::system)
     set(BOOST_SYSTEM_LIBRARY Boost::system)
@@ -1059,6 +1063,7 @@ macro(build_snappy)
 endmacro()
 
 if(ARROW_WITH_SNAPPY)
+if(0)
   resolve_dependency(Snappy PC_PACKAGE_NAMES snappy)
   if(${Snappy_SOURCE} STREQUAL "SYSTEM" AND NOT snappy_PC_FOUND)
     get_target_property(SNAPPY_LIB Snappy::snappy IMPORTED_LOCATION)
@@ -1067,6 +1072,9 @@ if(ARROW_WITH_SNAPPY)
   # TODO: Don't use global includes but rather target_include_directories
   get_target_property(SNAPPY_INCLUDE_DIRS Snappy::snappy INTERFACE_INCLUDE_DIRECTORIES)
   include_directories(SYSTEM ${SNAPPY_INCLUDE_DIRS})
+else()
+  find_package(Snappy REQUIRED)
+endif()
 endif()
 
 # ----------------------------------------------------------------------
@@ -1129,7 +1137,7 @@ macro(build_brotli)
 endmacro()
 
 if(ARROW_WITH_BROTLI)
-  resolve_dependency(Brotli PC_PACKAGE_NAMES libbrotlidec libbrotlienc)
+  find_package(Brotli REQUIRED)
   # TODO: Don't use global includes but rather target_include_directories
   get_target_property(BROTLI_INCLUDE_DIR Brotli::brotlicommon
                       INTERFACE_INCLUDE_DIRECTORIES)
@@ -1169,8 +1177,16 @@ if(PARQUET_REQUIRE_ENCRYPTION
     set(BUILD_SHARED_LIBS_KEEP ${BUILD_SHARED_LIBS})
     set(BUILD_SHARED_LIBS ON)
 
-    find_package(OpenSSL ${ARROW_OPENSSL_REQUIRED_VERSION} REQUIRED)
-    set(BUILD_SHARED_LIBS ${BUILD_SHARED_LIBS_KEEP})
+    find_package(OpenSSL REQUIRED CONFIG)
+    message("OPENSSL_FOUND: ${OPENSSL_FOUND}")
+    message("OPENSSL_INCLUDE_DIR: ${OPENSSL_INCLUDE_DIR}")
+    message("OPENSSL_CRYPTO_LIBRARY: ${OPENSSL_CRYPTO_LIBRARY}")
+    message("OPENSSL_CRYPTO_LIBRARIES: ${OPENSSL_CRYPTO_LIBRARIES}")
+    message("OPENSSL_SSL_LIBRARY: ${OPENSSL_SSL_LIBRARY}")
+    message("OPENSSL_SSL_LIBRARIES: ${OPENSSL_SSL_LIBRARIES}")
+    message("OPENSSL_LIBRARIES: ${OPENSSL_LIBRARIES}")
+    message("OPENSSL_VERSION: ${OPENSSL_VERSION}")
+        set(BUILD_SHARED_LIBS ${BUILD_SHARED_LIBS_KEEP})
     unset(BUILD_SHARED_LIBS_KEEP)
   else()
     # Find static OpenSSL headers and libs
@@ -1249,10 +1265,14 @@ macro(build_glog)
 endmacro()
 
 if(ARROW_USE_GLOG)
+if(0)
   resolve_dependency(GLOG PC_PACKAGE_NAMES libglog)
   # TODO: Don't use global includes but rather target_include_directories
   get_target_property(GLOG_INCLUDE_DIR glog::glog INTERFACE_INCLUDE_DIRECTORIES)
   include_directories(SYSTEM ${GLOG_INCLUDE_DIR})
+else()
+  find_package(glog REQUIRED)
+endif()
 endif()
 
 # ----------------------------------------------------------------------
@@ -1321,6 +1341,7 @@ macro(build_gflags)
 endmacro()
 
 if(ARROW_NEED_GFLAGS)
+if(0)
   set(ARROW_GFLAGS_REQUIRED_VERSION "2.1.0")
   resolve_dependency(gflags
                      HAVE_ALT
@@ -1339,6 +1360,10 @@ if(ARROW_NEED_GFLAGS)
       set(GFLAGS_LIBRARIES gflags_shared)
     endif()
   endif()
+else()
+  find_package(gflags REQUIRED)
+  set(GFLAGS_LIBRARIES gflags::gflags)
+endif()
 endif()
 
 # ----------------------------------------------------------------------
@@ -1718,6 +1756,7 @@ if(ARROW_JEMALLOC)
   # installations.
   # find_package(jemalloc)
 
+if(0)
   set(ARROW_JEMALLOC_USE_SHARED OFF)
   set(JEMALLOC_PREFIX
       "${CMAKE_CURRENT_BINARY_DIR}/jemalloc_ep-prefix/src/jemalloc_ep/dist/")
@@ -1778,6 +1817,9 @@ if(ARROW_JEMALLOC)
                                    INTERFACE_INCLUDE_DIRECTORIES
                                    "${CMAKE_CURRENT_BINARY_DIR}/jemalloc_ep-prefix/src")
   add_dependencies(jemalloc::jemalloc jemalloc_ep)
+else()
+  find_package(jemalloc REQUIRED)
+endif()
 
   list(APPEND ARROW_BUNDLED_STATIC_LIBS jemalloc::jemalloc)
 endif()
@@ -1786,6 +1828,7 @@ endif()
 # mimalloc - Cross-platform high-performance allocator, from Microsoft
 
 if(ARROW_MIMALLOC)
+if(0)
   message(STATUS "Building (vendored) mimalloc from source")
   # We only use a vendored mimalloc as we want to control its build options.
 
@@ -1834,6 +1877,10 @@ if(ARROW_MIMALLOC)
   endif()
   add_dependencies(mimalloc::mimalloc mimalloc_ep)
   add_dependencies(toolchain mimalloc_ep)
+else()
+  find_package(mimalloc REQUIRED CONFIG)
+  add_dependencies(toolchain mimalloc::mimalloc)
+endif()
 
   list(APPEND ARROW_BUNDLED_STATIC_LIBS mimalloc::mimalloc)
 endif()
@@ -2119,6 +2166,7 @@ macro(build_rapidjson)
 endmacro()
 
 if(ARROW_WITH_RAPIDJSON)
+if(0)
   set(ARROW_RAPIDJSON_REQUIRED_VERSION "1.1.0")
   resolve_dependency(RapidJSON
                      HAVE_ALT
@@ -2131,6 +2179,10 @@ if(ARROW_WITH_RAPIDJSON)
   if(RapidJSON_INCLUDE_DIR)
     set(RAPIDJSON_INCLUDE_DIR "${RapidJSON_INCLUDE_DIR}")
   endif()
+else()
+  find_package(RapidJSON REQUIRED)
+  set(RAPIDJSON_INCLUDE_DIR "${RapidJSON_INCLUDE_DIR}")
+endif()
 
   # TODO: Don't use global includes but rather target_include_directories
   include_directories(SYSTEM ${RAPIDJSON_INCLUDE_DIR})
@@ -2158,8 +2210,14 @@ endmacro()
 
 if((NOT ARROW_SIMD_LEVEL STREQUAL "NONE") OR (NOT ARROW_RUNTIME_SIMD_LEVEL STREQUAL "NONE"
                                              ))
+if(0)
   set(xsimd_SOURCE "BUNDLED")
   resolve_dependency(xsimd)
+else()
+  find_package(xsimd)
+  set(XSIMD_INCLUDE_DIR "${xsimd_INCLUDE_DIR}")
+  add_dependencies(toolchain xsimd)
+endif()
   # TODO: Don't use global includes but rather target_include_directories
   include_directories(SYSTEM ${XSIMD_INCLUDE_DIR})
 endif()
@@ -2202,11 +2260,15 @@ macro(build_zlib)
 endmacro()
 
 if(ARROW_WITH_ZLIB)
+if(0)
   resolve_dependency(ZLIB PC_PACKAGE_NAMES zlib)
 
   # TODO: Don't use global includes but rather target_include_directories
   get_target_property(ZLIB_INCLUDE_DIR ZLIB::ZLIB INTERFACE_INCLUDE_DIRECTORIES)
   include_directories(SYSTEM ${ZLIB_INCLUDE_DIR})
+else()
+  find_package(ZLIB REQUIRED)
+endif()
 endif()
 
 macro(build_lz4)
@@ -2260,11 +2322,15 @@ macro(build_lz4)
 endmacro()
 
 if(ARROW_WITH_LZ4)
+if(0)
   resolve_dependency(Lz4 PC_PACKAGE_NAMES liblz4)
 
   # TODO: Don't use global includes but rather target_include_directories
   get_target_property(LZ4_INCLUDE_DIR LZ4::lz4 INTERFACE_INCLUDE_DIRECTORIES)
   include_directories(SYSTEM ${LZ4_INCLUDE_DIR})
+else()
+  find_package(lz4 REQUIRED)
+endif()
 endif()
 
 macro(build_zstd)
@@ -2325,6 +2391,7 @@ macro(build_zstd)
 endmacro()
 
 if(ARROW_WITH_ZSTD)
+if(0)
   # ARROW-13384: ZSTD_minCLevel was added in v1.4.0, required by ARROW-13091
   resolve_dependency(zstd
                      PC_PACKAGE_NAMES
@@ -2352,6 +2419,9 @@ if(ARROW_WITH_ZSTD)
   get_target_property(ZSTD_INCLUDE_DIR ${ARROW_ZSTD_LIBZSTD}
                       INTERFACE_INCLUDE_DIRECTORIES)
   include_directories(SYSTEM ${ZSTD_INCLUDE_DIR})
+else()
+  find_package(zstd REQUIRED)
+endif()
 endif()
 
 # ----------------------------------------------------------------------
@@ -2391,6 +2461,7 @@ macro(build_re2)
 endmacro()
 
 if(ARROW_WITH_RE2)
+if(0)
   # Don't specify "PC_PACKAGE_NAMES re2" here because re2.pc may
   # include -std=c++11. It's not compatible with C source and C++
   # source not uses C++ 11.
@@ -2411,6 +2482,9 @@ if(ARROW_WITH_RE2)
   # TODO: Don't use global includes but rather target_include_directories
   get_target_property(RE2_INCLUDE_DIR re2::re2 INTERFACE_INCLUDE_DIRECTORIES)
   include_directories(SYSTEM ${RE2_INCLUDE_DIR})
+else()
+  find_package(re2 REQUIRED)
+endif()
 endif()
 
 macro(build_bzip2)
@@ -2462,6 +2536,7 @@ macro(build_bzip2)
 endmacro()
 
 if(ARROW_WITH_BZ2)
+if(0)
   resolve_dependency(BZip2)
   if(${BZip2_SOURCE} STREQUAL "SYSTEM")
     string(APPEND ARROW_PC_LIBS_PRIVATE " ${BZIP2_LIBRARIES}")
@@ -2474,6 +2549,9 @@ if(ARROW_WITH_BZ2)
                                      INTERFACE_INCLUDE_DIRECTORIES "${BZIP2_INCLUDE_DIR}")
   endif()
   include_directories(SYSTEM "${BZIP2_INCLUDE_DIR}")
+else()
+  find_package(BZip2 REQUIRED)
+endif()
 endif()
 
 macro(build_utf8proc)
@@ -2517,6 +2595,7 @@ macro(build_utf8proc)
 endmacro()
 
 if(ARROW_WITH_UTF8PROC)
+if(0)
   resolve_dependency(utf8proc
                      REQUIRED_VERSION
                      "2.2.0"
@@ -2538,6 +2617,10 @@ if(ARROW_WITH_UTF8PROC)
   get_target_property(UTF8PROC_INCLUDE_DIR utf8proc::utf8proc
                       INTERFACE_INCLUDE_DIRECTORIES)
   include_directories(SYSTEM ${UTF8PROC_INCLUDE_DIR})
+else()
+  find_package(utf8proc REQUIRED CONFIG)
+  add_definitions(-DARROW_WITH_UTF8PROC)
+endif()
 endif()
 
 macro(build_cares)
@@ -3702,6 +3785,7 @@ macro(build_grpc)
 endmacro()
 
 if(ARROW_WITH_GRPC)
+if(0)
   set(ARROW_GRPC_REQUIRED_VERSION "1.17.0")
   if(NOT Protobuf_SOURCE STREQUAL gRPC_SOURCE)
     # ARROW-15495: Protobuf/gRPC must come from the same source
@@ -3735,6 +3819,9 @@ if(ARROW_WITH_GRPC)
       message(FATAL_ERROR "Cannot find grpc++ headers in ${GRPC_INCLUDE_DIR}")
     endif()
   endif()
+else()
+  find_package(gRPC REQUIRED CONFIG)
+endif()
 endif()
 
 # ----------------------------------------------------------------------
@@ -3937,10 +4024,14 @@ macro(build_google_cloud_cpp_storage)
 endmacro()
 
 if(ARROW_WITH_GOOGLE_CLOUD_CPP)
+if(0)
   resolve_dependency(google_cloud_cpp_storage)
   get_target_property(google_cloud_cpp_storage_INCLUDE_DIR google-cloud-cpp::storage
                       INTERFACE_INCLUDE_DIRECTORIES)
   include_directories(SYSTEM ${google_cloud_cpp_storage_INCLUDE_DIR})
+else()
+  find_package(google-cloud-cpp REQUIRED)
+endif()
   get_target_property(absl_base_INCLUDE_DIR absl::base INTERFACE_INCLUDE_DIRECTORIES)
   include_directories(SYSTEM ${absl_base_INCLUDE_DIR})
   message(STATUS "Found google-cloud-cpp::storage headers: ${google_cloud_cpp_storage_INCLUDE_DIR}"
@@ -4261,6 +4352,7 @@ macro(build_opentelemetry)
 endmacro()
 
 if(ARROW_WITH_OPENTELEMETRY)
+if(0)
   # cURL is required whether we build from source or use an existing installation
   # (OTel's cmake files do not call find_curl for you)
   find_curl()
@@ -4269,7 +4361,10 @@ if(ARROW_WITH_OPENTELEMETRY)
   get_target_property(OPENTELEMETRY_INCLUDE_DIR opentelemetry-cpp::api
                       INTERFACE_INCLUDE_DIRECTORIES)
   include_directories(SYSTEM ${OPENTELEMETRY_INCLUDE_DIR})
-  message(STATUS "Found OpenTelemetry headers: ${OPENTELEMETRY_INCLUDE_DIR}")
+else()
+  find_package(opentelemetry-cpp REQUIRED)
+endif()
+    message(STATUS "Found OpenTelemetry headers: ${OPENTELEMETRY_INCLUDE_DIR}")
 endif()
 
 # ----------------------------------------------------------------------
diff --git a/cpp/src/arrow/CMakeLists.txt b/cpp/src/arrow/CMakeLists.txt
index c518b7d..40b4853 100644
--- a/cpp/src/arrow/CMakeLists.txt
+++ b/cpp/src/arrow/CMakeLists.txt
@@ -584,6 +584,10 @@ foreach(LIB_TARGET ${ARROW_LIBRARIES})
   target_compile_definitions(${LIB_TARGET} PRIVATE ARROW_EXPORTING)
 endforeach()
 
+if(ARROW_BUILD_SHARED AND WIN32)
+  target_compile_definitions(arrow_shared PRIVATE ARROW_EXPORTING)
+endif()
+
 if(ARROW_WITH_BACKTRACE)
   find_package(Backtrace)
 
@@ -594,7 +598,7 @@ if(ARROW_WITH_BACKTRACE)
   endforeach()
 endif()
 
-if(ARROW_BUILD_BUNDLED_DEPENDENCIES)
+if(0)
   arrow_car(_FIRST_LIB ${ARROW_BUNDLED_STATIC_LIBS})
   arrow_cdr(_OTHER_LIBS ${ARROW_BUNDLED_STATIC_LIBS})
   create_merged_static_lib(arrow_bundled_dependencies
