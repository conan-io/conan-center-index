diff --git a/cpp/CMakeLists.txt b/cpp/CMakeLists.txt
index 515e6af..7488161 100644
--- a/cpp/CMakeLists.txt
+++ b/cpp/CMakeLists.txt
@@ -109,7 +109,7 @@ set(BUILD_SUPPORT_DIR "${CMAKE_SOURCE_DIR}/build-support")
 set(ARROW_CMAKE_INSTALL_DIR "${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}")
 set(ARROW_DOC_DIR "share/doc/${PROJECT_NAME}")
 
-set(ARROW_LLVM_VERSIONS "10" "9" "8" "7")
+set(ARROW_LLVM_VERSIONS "13" "12" "11" "10" "9" "8" "7")
 list(GET ARROW_LLVM_VERSIONS 0 ARROW_LLVM_VERSION_PRIMARY)
 string(REGEX
        REPLACE "^([0-9]+)(\\..+)?" "\\1" ARROW_LLVM_VERSION_PRIMARY_MAJOR
@@ -667,7 +667,7 @@ endif()
 
 if(ARROW_WITH_BROTLI)
   # Order is important for static linking
-  set(ARROW_BROTLI_LIBS Brotli::brotlienc Brotli::brotlidec Brotli::brotlicommon)
+  set(ARROW_BROTLI_LIBS brotli::brotlienc brotli::brotlidec brotli::brotlicommon)
   list(APPEND ARROW_LINK_LIBS ${ARROW_BROTLI_LIBS})
   list(APPEND ARROW_STATIC_LINK_LIBS ${ARROW_BROTLI_LIBS})
   if(Brotli_SOURCE STREQUAL "SYSTEM")
@@ -683,9 +683,9 @@ if(ARROW_WITH_BZ2)
 endif()
 
 if(ARROW_WITH_LZ4)
-  list(APPEND ARROW_STATIC_LINK_LIBS LZ4::lz4)
+  list(APPEND ARROW_STATIC_LINK_LIBS lz4::lz4)
   if(Lz4_SOURCE STREQUAL "SYSTEM")
-    list(APPEND ARROW_STATIC_INSTALL_INTERFACE_LIBS LZ4::lz4)
+    list(APPEND ARROW_STATIC_INSTALL_INTERFACE_LIBS lz4::lz4)
   endif()
 endif()
 
@@ -842,8 +842,14 @@ endif()
 
 if(ARROW_MIMALLOC)
   add_definitions(-DARROW_MIMALLOC)
-  list(APPEND ARROW_LINK_LIBS mimalloc::mimalloc)
-  list(APPEND ARROW_STATIC_LINK_LIBS mimalloc::mimalloc)
+  if (TARGET mimalloc-static)
+    list(APPEND ARROW_LINK_LIBS mimalloc-static)
+    list(APPEND ARROW_STATIC_LINK_LIBS mimalloc-static)
+    else()
+    list(APPEND ARROW_LINK_LIBS mimalloc)
+    list(APPEND ARROW_STATIC_LINK_LIBS mimalloc)
+  endif()
+
 endif()
 
 # ----------------------------------------------------------------------
diff --git a/cpp/cmake_modules/ThirdpartyToolchain.cmake b/cpp/cmake_modules/ThirdpartyToolchain.cmake
index cc37a3c..8fe6db9 100644
--- a/cpp/cmake_modules/ThirdpartyToolchain.cmake
+++ b/cpp/cmake_modules/ThirdpartyToolchain.cmake
@@ -171,6 +171,7 @@ macro(provide_find_module DEPENDENCY_NAME)
 endmacro()
 
 macro(resolve_dependency DEPENDENCY_NAME)
+if(0)
   set(options)
   set(one_value_args REQUIRED_VERSION)
   cmake_parse_arguments(ARG
@@ -207,6 +208,14 @@ macro(resolve_dependency DEPENDENCY_NAME)
     provide_find_module(${DEPENDENCY_NAME})
     list(APPEND ARROW_SYSTEM_DEPENDENCIES ${DEPENDENCY_NAME})
   endif()
+else()
+  if(ARG_REQUIRED_VERSION)
+    find_package(${DEPENDENCY_NAME} ${ARG_REQUIRED_VERSION} REQUIRED)
+  else()
+    find_package(${DEPENDENCY_NAME} REQUIRED)
+  endif()
+  list(APPEND ARROW_SYSTEM_DEPENDENCIES ${DEPENDENCY_NAME})
+endif()
 endmacro()
 
 # ----------------------------------------------------------------------
@@ -826,6 +835,7 @@ endif()
 # - Tests need Boost at runtime.
 # - S3FS and Flight benchmarks need Boost at runtime.
 if(ARROW_BUILD_INTEGRATION
+   OR ARROW_BOOST_REQUIRED
    OR ARROW_BUILD_TESTS
    OR ARROW_GANDIVA
    OR (ARROW_FLIGHT AND ARROW_BUILD_BENCHMARKS)
@@ -846,7 +856,7 @@ if(ARROW_BOOST_REQUIRED)
   elseif(BOOST_SOURCE STREQUAL "BUNDLED")
     build_boost()
   elseif(BOOST_SOURCE STREQUAL "SYSTEM")
-    find_package(BoostAlt ${ARROW_BOOST_REQUIRED_VERSION} REQUIRED)
+    find_package(Boost ${ARROW_BOOST_REQUIRED_VERSION} REQUIRED)
   endif()
 
   if(TARGET Boost::system)
@@ -973,11 +983,11 @@ macro(build_brotli)
 endmacro()
 
 if(ARROW_WITH_BROTLI)
-  resolve_dependency(Brotli)
+  resolve_dependency(brotli)
   # TODO: Don't use global includes but rather target_include_directories
-  get_target_property(BROTLI_INCLUDE_DIR Brotli::brotlicommon
+  get_target_property(BROTLI_INCLUDE_DIR brotli::brotlicommon
                       INTERFACE_INCLUDE_DIRECTORIES)
-  include_directories(SYSTEM ${BROTLI_INCLUDE_DIR})
+  include_directories(SYSTEM ${brotli_INCLUDE_DIR})
 endif()
 
 if(PARQUET_REQUIRE_ENCRYPTION AND NOT ARROW_PARQUET)
@@ -1200,9 +1210,10 @@ if(ARROW_NEED_GFLAGS)
     endif()
   endif()
   # TODO: Don't use global includes but rather target_include_directories
-  include_directories(SYSTEM ${GFLAGS_INCLUDE_DIR})
+  include_directories(SYSTEM ${gflags_INCLUDE_DIR})
+  set(GFLAGS_LIBRARIES ${gflags_LIBRARIES})
 
-  if(NOT TARGET ${GFLAGS_LIBRARIES})
+  if(0)
     if(TARGET gflags-shared)
       set(GFLAGS_LIBRARIES gflags-shared)
     elseif(TARGET gflags_shared)
@@ -1291,12 +1302,13 @@ endmacro()
 if(ARROW_WITH_THRIFT)
   # We already may have looked for Thrift earlier, when considering whether
   # to build Boost, so don't look again if already found.
-  if(NOT Thrift_FOUND AND NOT THRIFT_FOUND)
+  if(0)
     # Thrift c++ code generated by 0.13 requires 0.11 or greater
     resolve_dependency(Thrift REQUIRED_VERSION 0.11.0)
   endif()
+  find_package(Thrift CONFIG REQUIRED)
   # TODO: Don't use global includes but rather target_include_directories
-  include_directories(SYSTEM ${THRIFT_INCLUDE_DIR})
+  include_directories(SYSTEM ${Thrift_INCLUDE_DIR})
 endif()
 
 # ----------------------------------------------------------------------
@@ -1461,6 +1473,7 @@ endif()
 # jemalloc - Unix-only high-performance allocator
 
 if(ARROW_JEMALLOC)
+if(0)
   message(STATUS "Building (vendored) jemalloc from source")
   # We only use a vendored jemalloc as we want to control its version.
   # Also our build of jemalloc is specially prefixed so that it will not
@@ -1519,12 +1532,18 @@ if(ARROW_JEMALLOC)
   add_dependencies(jemalloc::jemalloc jemalloc_ep)
 
   list(APPEND ARROW_BUNDLED_STATIC_LIBS jemalloc::jemalloc)
+else()
+  find_package(jemalloc REQUIRED CONFIG)
+  include_directories(SYSTEM "${jemalloc_INCLUDE_DIR}")
+  list(APPEND ARROW_BUNDLED_STATIC_LIBS  ${jemalloc_LIBRARIES_TARGETS} )
+endif()
 endif()
 
 # ----------------------------------------------------------------------
 # mimalloc - Cross-platform high-performance allocator, from Microsoft
 
 if(ARROW_MIMALLOC)
+if(0)
   message(STATUS "Building (vendored) mimalloc from source")
   # We only use a vendored mimalloc as we want to control its build options.
 
@@ -1572,6 +1591,11 @@ if(ARROW_MIMALLOC)
   add_dependencies(toolchain mimalloc_ep)
 
   list(APPEND ARROW_BUNDLED_STATIC_LIBS mimalloc::mimalloc)
+else()
+  find_package(mimalloc REQUIRED CONFIG)
+  include_directories(SYSTEM "${mimalloc_INCLUDE_DIR}")
+  list(APPEND ARROW_BUNDLED_STATIC_LIBS  ${mimalloc_LIBRARIES_TARGETS} )
+endif()
 endif()
 
 # ----------------------------------------------------------------------
@@ -1971,11 +1995,16 @@ macro(build_lz4)
 endmacro()
 
 if(ARROW_WITH_LZ4)
-  resolve_dependency(Lz4)
+  resolve_dependency(lz4)
 
   # TODO: Don't use global includes but rather target_include_directories
-  get_target_property(LZ4_INCLUDE_DIR LZ4::lz4 INTERFACE_INCLUDE_DIRECTORIES)
-  include_directories(SYSTEM ${LZ4_INCLUDE_DIR})
+  if(TARGET LZ4::lz4_static)
+    get_target_property(LZ4_INCLUDE_DIR LZ4::lz4_static INTERFACE_INCLUDE_DIRECTORIES)
+  else()
+    get_target_property(LZ4_INCLUDE_DIR LZ4::lz4_shared INTERFACE_INCLUDE_DIRECTORIES)
+  endif()
+  include_directories(SYSTEM ${lz4_INCLUDE_DIR})
+  list(APPEND ARROW_BUNDLED_STATIC_LIBS  ${lz4_LIBRARIES_TARGETS} )
 endif()
 
 macro(build_zstd)
@@ -2090,10 +2119,10 @@ macro(build_re2)
 endmacro()
 
 if(ARROW_GANDIVA)
-  resolve_dependency(RE2)
+  resolve_dependency(re2)
 
   # TODO: Don't use global includes but rather target_include_directories
-  get_target_property(RE2_INCLUDE_DIR RE2::re2 INTERFACE_INCLUDE_DIRECTORIES)
+  get_target_property(RE2_INCLUDE_DIR re2::re2 INTERFACE_INCLUDE_DIRECTORIES)
   include_directories(SYSTEM ${RE2_INCLUDE_DIR})
 endif()
 
@@ -2541,17 +2570,24 @@ if(ARROW_WITH_GRPC)
   endif()
 
   # TODO: Don't use global includes but rather target_include_directories
-  get_target_property(GRPC_INCLUDE_DIR gRPC::grpc INTERFACE_INCLUDE_DIRECTORIES)
+  if(grpc_INCLUDE_DIRS_RELEASE)
+    set(GRPC_INCLUDE_DIR ${grpc_INCLUDE_DIRS_RELEASE})
+  elseif(grpc_INCLUDE_DIRS_DEBUG)
+    set(GRPC_INCLUDE_DIR ${grpc_INCLUDE_DIRS_DEBUG})
+  endif()
+
   include_directories(SYSTEM ${GRPC_INCLUDE_DIR})
+  include_directories(SYSTEM ${absl_INCLUDE_DIR})
+  include_directories(SYSTEM ${protobuf_INCLUDE_DIR})
 
   if(GRPC_VENDORED)
     set(GRPCPP_PP_INCLUDE TRUE)
   else()
     # grpc++ headers may reside in ${GRPC_INCLUDE_DIR}/grpc++ or ${GRPC_INCLUDE_DIR}/grpcpp
     # depending on the gRPC version.
-    if(EXISTS "${GRPC_INCLUDE_DIR}/grpcpp/impl/codegen/config_protobuf.h")
+    if(EXISTS ${gRPC_INCLUDE_DIR}/grpcpp/impl/codegen/config_protobuf.h)
       set(GRPCPP_PP_INCLUDE TRUE)
-    elseif(EXISTS "${GRPC_INCLUDE_DIR}/grpc++/impl/codegen/config_protobuf.h")
+    elseif(EXISTS ${gRPC_INCLUDE_DIR}/grpc++/impl/codegen/config_protobuf.h)
       set(GRPCPP_PP_INCLUDE FALSE)
     else()
       message(FATAL_ERROR "Cannot find grpc++ headers in ${GRPC_INCLUDE_DIR}")
diff --git a/cpp/src/arrow/CMakeLists.txt b/cpp/src/arrow/CMakeLists.txt
index 2751254..842fc9e 100644
--- a/cpp/src/arrow/CMakeLists.txt
+++ b/cpp/src/arrow/CMakeLists.txt
@@ -307,10 +307,14 @@ set(ARROW_TESTING_SRCS
 
 set(_allocator_dependencies "") # Empty list
 if(ARROW_JEMALLOC)
-  list(APPEND _allocator_dependencies jemalloc_ep)
+  list(APPEND _allocator_dependencies jemalloc::jemalloc)
 endif()
 if(ARROW_MIMALLOC)
-  list(APPEND _allocator_dependencies mimalloc_ep)
+  if (TARGET mimalloc-static)
+    list(APPEND _allocator_dependencies mimalloc-static)
+  else()
+    list(APPEND _allocator_dependencies mimalloc)
+  endif()
 endif()
 
 if(_allocator_dependencies)
diff --git a/cpp/src/arrow/memory_pool.cc b/cpp/src/arrow/memory_pool.cc
index 784bf7b..8f005a5 100644
--- a/cpp/src/arrow/memory_pool.cc
+++ b/cpp/src/arrow/memory_pool.cc
@@ -31,7 +31,7 @@
 // Needed to support jemalloc 3 and 4
 #define JEMALLOC_MANGLE
 // Explicitly link to our version of jemalloc
-#include "jemalloc_ep/dist/include/jemalloc/jemalloc.h"
+#include "jemalloc/jemalloc.h"
 #endif
 
 #ifdef ARROW_MIMALLOC
