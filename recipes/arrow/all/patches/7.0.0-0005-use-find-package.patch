diff --git a/cpp/CMakeLists.txt b/cpp/CMakeLists.txt
index 2d7baf1..c2e86e0 100644
--- a/cpp/CMakeLists.txt
+++ b/cpp/CMakeLists.txt
@@ -715,7 +715,7 @@ if(ARROW_WITH_BZ2)
 endif()
 
 if(ARROW_WITH_LZ4)
-  list(APPEND ARROW_STATIC_LINK_LIBS LZ4::lz4)
+  list(APPEND ARROW_STATIC_LINK_LIBS lz4::lz4)
   if(Lz4_SOURCE STREQUAL "SYSTEM")
     list(APPEND ARROW_STATIC_INSTALL_INTERFACE_LIBS LZ4::lz4)
   endif()
@@ -901,8 +901,8 @@ endif()
 if(ARROW_JEMALLOC)
   add_definitions(-DARROW_JEMALLOC)
   add_definitions(-DARROW_JEMALLOC_INCLUDE_DIR=${JEMALLOC_INCLUDE_DIR})
-  list(APPEND ARROW_LINK_LIBS jemalloc::jemalloc)
-  list(APPEND ARROW_STATIC_LINK_LIBS jemalloc::jemalloc)
+  list(APPEND ARROW_LINK_LIBS jemalloc)
+  list(APPEND ARROW_STATIC_LINK_LIBS jemalloc)
 endif()
 
 if(ARROW_MIMALLOC)
diff --git a/cpp/cmake_modules/ThirdpartyToolchain.cmake b/cpp/cmake_modules/ThirdpartyToolchain.cmake
index bc38952..8196e09 100644
--- a/cpp/cmake_modules/ThirdpartyToolchain.cmake
+++ b/cpp/cmake_modules/ThirdpartyToolchain.cmake
@@ -953,14 +953,7 @@ else()
 endif()
 
 if(ARROW_BOOST_REQUIRED)
-  resolve_dependency(Boost
-                     HAVE_ALT
-                     TRUE
-                     REQUIRED_VERSION
-                     ${ARROW_BOOST_REQUIRED_VERSION}
-                     IS_RUNTIME_DEPENDENCY
-                     # libarrow.so doesn't depend on libboost*.
-                     FALSE)
+  find_package(Boost CONFIG REQUIRED)
 
   if(TARGET Boost::system)
     set(BOOST_SYSTEM_LIBRARY Boost::system)
@@ -1038,6 +1031,7 @@ macro(build_snappy)
 endmacro()
 
 if(ARROW_WITH_SNAPPY)
+  if(0)
   resolve_dependency(Snappy PC_PACKAGE_NAMES snappy)
   if(${Snappy_SOURCE} STREQUAL "SYSTEM" AND NOT snappy_PC_FOUND)
     get_target_property(SNAPPY_LIB Snappy::snappy IMPORTED_LOCATION)
@@ -1046,6 +1040,8 @@ if(ARROW_WITH_SNAPPY)
   # TODO: Don't use global includes but rather target_include_directories
   get_target_property(SNAPPY_INCLUDE_DIRS Snappy::snappy INTERFACE_INCLUDE_DIRECTORIES)
   include_directories(SYSTEM ${SNAPPY_INCLUDE_DIRS})
+  endif()
+  find_package(Snappy REQUIRED)
 endif()
 
 # ----------------------------------------------------------------------
@@ -1108,7 +1104,7 @@ macro(build_brotli)
 endmacro()
 
 if(ARROW_WITH_BROTLI)
-  resolve_dependency(Brotli PC_PACKAGE_NAMES libbrotlidec libbrotlienc)
+  find_package(Brotli REQUIRED)
   # TODO: Don't use global includes but rather target_include_directories
   get_target_property(BROTLI_INCLUDE_DIR Brotli::brotlicommon
                       INTERFACE_INCLUDE_DIRECTORIES)
@@ -1228,10 +1224,13 @@ macro(build_glog)
 endmacro()
 
 if(ARROW_USE_GLOG)
+  if(0)
   resolve_dependency(GLOG PC_PACKAGE_NAMES libglog)
   # TODO: Don't use global includes but rather target_include_directories
   get_target_property(GLOG_INCLUDE_DIR glog::glog INTERFACE_INCLUDE_DIRECTORIES)
   include_directories(SYSTEM ${GLOG_INCLUDE_DIR})
+  endif()
+  find_package(glog REQUIRED)
 endif()
 
 # ----------------------------------------------------------------------
@@ -1300,14 +1299,7 @@ macro(build_gflags)
 endmacro()
 
 if(ARROW_NEED_GFLAGS)
-  set(ARROW_GFLAGS_REQUIRED_VERSION "2.1.0")
-  resolve_dependency(gflags
-                     HAVE_ALT
-                     TRUE
-                     REQUIRED_VERSION
-                     ${ARROW_GFLAGS_REQUIRED_VERSION}
-                     IS_RUNTIME_DEPENDENCY
-                     FALSE)
+  find_package(gflags REQUIRED)
   # TODO: Don't use global includes but rather target_include_directories
   include_directories(SYSTEM ${GFLAGS_INCLUDE_DIR})
 
@@ -1606,7 +1598,7 @@ if(ARROW_JEMALLOC)
   # conflict with the default allocator as well as other jemalloc
   # installations.
   # find_package(jemalloc)
-
+  if (0)
   set(ARROW_JEMALLOC_USE_SHARED OFF)
   set(JEMALLOC_PREFIX
       "${CMAKE_CURRENT_BINARY_DIR}/jemalloc_ep-prefix/src/jemalloc_ep/dist/")
@@ -1664,6 +1656,9 @@ if(ARROW_JEMALLOC)
                                    "${CMAKE_CURRENT_BINARY_DIR}/jemalloc_ep-prefix/src")
   add_dependencies(jemalloc::jemalloc jemalloc_ep)
 
+  endif()
+  find_package(jemalloc REQUIRED)
+
   list(APPEND ARROW_BUNDLED_STATIC_LIBS jemalloc::jemalloc)
 endif()
 
@@ -1671,6 +1666,8 @@ endif()
 # mimalloc - Cross-platform high-performance allocator, from Microsoft
 
 if(ARROW_MIMALLOC)
+  if (0)
+
   message(STATUS "Building (vendored) mimalloc from source")
   # We only use a vendored mimalloc as we want to control its build options.
 
@@ -1715,6 +1712,13 @@ if(ARROW_MIMALLOC)
   add_dependencies(mimalloc::mimalloc mimalloc_ep)
   add_dependencies(toolchain mimalloc_ep)
 
+  else()
+  
+  find_package(mimalloc CONFIG REQUIRED)
+  add_dependencies(toolchain mimalloc::mimalloc)
+  
+  endif()
+
   list(APPEND ARROW_BUNDLED_STATIC_LIBS mimalloc::mimalloc)
 endif()
 
@@ -2036,10 +2040,21 @@ macro(build_xsimd)
   set(XSIMD_VENDORED TRUE)
 endmacro()
 
-if((NOT ARROW_SIMD_LEVEL STREQUAL "NONE") OR (NOT ARROW_RUNTIME_SIMD_LEVEL STREQUAL "NONE"
-                                             ))
+if((NOT ARROW_SIMD_LEVEL STREQUAL "NONE") OR (NOT ARROW_RUNTIME_SIMD_LEVEL STREQUAL "NONE"))
+
+  if (0)
+
   set(xsimd_SOURCE "BUNDLED")
   resolve_dependency(xsimd)
+
+  else()
+
+  find_package(xsimd)
+  set(XSIMD_INCLUDE_DIR "${xsimd_INCLUDE_DIR}")
+  add_dependencies(toolchain xsimd)
+
+  endif()
+
   # TODO: Don't use global includes but rather target_include_directories
   include_directories(SYSTEM ${XSIMD_INCLUDE_DIR})
 endif()
@@ -2082,11 +2097,14 @@ macro(build_zlib)
 endmacro()
 
 if(ARROW_WITH_ZLIB)
+  if(0)
   resolve_dependency(ZLIB PC_PACKAGE_NAMES zlib)
 
   # TODO: Don't use global includes but rather target_include_directories
   get_target_property(ZLIB_INCLUDE_DIR ZLIB::ZLIB INTERFACE_INCLUDE_DIRECTORIES)
   include_directories(SYSTEM ${ZLIB_INCLUDE_DIR})
+  endif()
+  find_package(ZLIB REQUIRED)
 endif()
 
 macro(build_lz4)
@@ -2140,11 +2158,14 @@ macro(build_lz4)
 endmacro()
 
 if(ARROW_WITH_LZ4)
+  if(0)
   resolve_dependency(Lz4 PC_PACKAGE_NAMES liblz4)
 
   # TODO: Don't use global includes but rather target_include_directories
   get_target_property(LZ4_INCLUDE_DIR LZ4::lz4 INTERFACE_INCLUDE_DIRECTORIES)
   include_directories(SYSTEM ${LZ4_INCLUDE_DIR})
+  endif()
+  find_package(lz4 REQUIRED)
 endif()
 
 macro(build_zstd)
@@ -2205,6 +2226,7 @@ macro(build_zstd)
 endmacro()
 
 if(ARROW_WITH_ZSTD)
+  if(0)
   # ARROW-13384: ZSTD_minCLevel was added in v1.4.0, required by ARROW-13091
   resolve_dependency(zstd
                      PC_PACKAGE_NAMES
@@ -2232,6 +2254,8 @@ if(ARROW_WITH_ZSTD)
   get_target_property(ZSTD_INCLUDE_DIR ${ARROW_ZSTD_LIBZSTD}
                       INTERFACE_INCLUDE_DIRECTORIES)
   include_directories(SYSTEM ${ZSTD_INCLUDE_DIR})
+  endif()
+  find_package(zstd REQUIRED)
 endif()
 
 # ----------------------------------------------------------------------
@@ -2271,6 +2295,7 @@ macro(build_re2)
 endmacro()
 
 if(ARROW_WITH_RE2)
+  if(0)
   # Don't specify "PC_PACKAGE_NAMES re2" here because re2.pc may
   # include -std=c++11. It's not compatible with C source and C++
   # source not uses C++ 11.
@@ -2284,6 +2309,8 @@ if(ARROW_WITH_RE2)
   # TODO: Don't use global includes but rather target_include_directories
   get_target_property(RE2_INCLUDE_DIR re2::re2 INTERFACE_INCLUDE_DIRECTORIES)
   include_directories(SYSTEM ${RE2_INCLUDE_DIR})
+  endif()
+  find_package(re2 REQUIRED)
 endif()
 
 macro(build_bzip2)
@@ -2335,10 +2362,7 @@ macro(build_bzip2)
 endmacro()
 
 if(ARROW_WITH_BZ2)
-  resolve_dependency(BZip2)
-  if(${BZip2_SOURCE} STREQUAL "SYSTEM")
-    string(APPEND ARROW_PC_LIBS_PRIVATE " ${BZIP2_LIBRARIES}")
-  endif()
+  find_package(BZip2 REQUIRED)
 
   if(NOT TARGET BZip2::BZip2)
     add_library(BZip2::BZip2 UNKNOWN IMPORTED)
@@ -2390,11 +2414,7 @@ macro(build_utf8proc)
 endmacro()
 
 if(ARROW_WITH_UTF8PROC)
-  resolve_dependency(utf8proc
-                     REQUIRED_VERSION
-                     "2.2.0"
-                     PC_PACKAGE_NAMES
-                     libutf8proc)
+  find_package(BZip2 REQUIRED CONFIG)
 
   add_definitions(-DARROW_WITH_UTF8PROC)
 
@@ -3554,33 +3574,12 @@ if(ARROW_WITH_GRPC)
     message(STATUS "Forcing gRPC_SOURCE to Protobuf_SOURCE (${Protobuf_SOURCE})")
     set(gRPC_SOURCE "${Protobuf_SOURCE}")
   endif()
-  resolve_dependency(gRPC
-                     HAVE_ALT
-                     TRUE
-                     REQUIRED_VERSION
-                     ${ARROW_GRPC_REQUIRED_VERSION}
-                     PC_PACKAGE_NAMES
-                     grpc++)
+  find_package(gRPC CONFIG REQUIRED)
 
   # TODO: Don't use global includes but rather target_include_directories
   get_target_property(GRPC_INCLUDE_DIR gRPC::grpc++ INTERFACE_INCLUDE_DIRECTORIES)
   include_directories(SYSTEM ${GRPC_INCLUDE_DIR})
 
-  if(GRPC_VENDORED)
-    set(GRPCPP_PP_INCLUDE TRUE)
-    # Examples need to link to static Arrow if we're using static gRPC
-    set(ARROW_GRPC_USE_SHARED OFF)
-  else()
-    # grpc++ headers may reside in ${GRPC_INCLUDE_DIR}/grpc++ or ${GRPC_INCLUDE_DIR}/grpcpp
-    # depending on the gRPC version.
-    if(EXISTS "${GRPC_INCLUDE_DIR}/grpcpp/impl/codegen/config_protobuf.h")
-      set(GRPCPP_PP_INCLUDE TRUE)
-    elseif(EXISTS "${GRPC_INCLUDE_DIR}/grpc++/impl/codegen/config_protobuf.h")
-      set(GRPCPP_PP_INCLUDE FALSE)
-    else()
-      message(FATAL_ERROR "Cannot find grpc++ headers in ${GRPC_INCLUDE_DIR}")
-    endif()
-  endif()
 endif()
 
 # ----------------------------------------------------------------------
diff --git a/cpp/src/arrow/CMakeLists.txt b/cpp/src/arrow/CMakeLists.txt
index 84975e2..7779c08 100644
--- a/cpp/src/arrow/CMakeLists.txt
+++ b/cpp/src/arrow/CMakeLists.txt
@@ -575,6 +575,10 @@ foreach(LIB_TARGET ${ARROW_LIBRARIES})
   target_compile_definitions(${LIB_TARGET} PRIVATE ARROW_EXPORTING)
 endforeach()
 
+if(ARROW_BUILD_SHARED AND WIN32)
+  target_compile_definitions(arrow_shared PRIVATE ARROW_EXPORTING)
+endif()
+
 if(ARROW_WITH_BACKTRACE)
   find_package(Backtrace)
 
@@ -585,6 +589,7 @@ if(ARROW_WITH_BACKTRACE)
   endforeach()
 endif()
 
+if(0)
 if(ARROW_BUILD_BUNDLED_DEPENDENCIES)
   arrow_car(_FIRST_LIB ${ARROW_BUNDLED_STATIC_LIBS})
   arrow_cdr(_OTHER_LIBS ${ARROW_BUNDLED_STATIC_LIBS})
@@ -596,6 +601,7 @@ if(ARROW_BUILD_BUNDLED_DEPENDENCIES)
                            TO_MERGE
                            ${_OTHER_LIBS})
 endif()
+endif()
 
 if(ARROW_TESTING)
   # that depend on gtest
