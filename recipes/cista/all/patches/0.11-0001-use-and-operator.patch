diff --git a/cista.h b/cista.h
index 860e2ce..daa28d0 100644
--- a/cista.h
+++ b/cista.h
@@ -3656,7 +3656,7 @@ inline constexpr auto to_tuple_works_v = detail::has_cista_members_v<T> ||
                                           !std::is_polymorphic_v<T>);
 
 template <typename T,
-          std::enable_if_t<detail::has_cista_members_v<T> && std::is_const_v<T>,
+          std::enable_if_t<detail::has_cista_members_v<T> and std::is_const_v<T>,
                            void*> = nullptr>
 constexpr auto to_tuple(T& t) {
   return detail::add_const(
@@ -3664,7 +3664,7 @@ constexpr auto to_tuple(T& t) {
           .cista_members());
 }
 
-template <typename T, std::enable_if_t<detail::has_cista_members_v<T> &&
+template <typename T, std::enable_if_t<detail::has_cista_members_v<T> and
                                            !std::is_const_v<T>,
                                        void*> = nullptr>
 constexpr auto to_tuple(T&& t) {
@@ -5937,7 +5937,7 @@ constexpr decltype(auto) eq(std::index_sequence<I...>, T1&& a, T2&& b) {
 }
 
 template <typename T1, typename T2>
-std::enable_if_t<is_tuple_v<decay_t<T1>> && is_tuple_v<decay_t<T2>>, bool>
+std::enable_if_t<is_tuple_v<decay_t<T1>> and is_tuple_v<decay_t<T2>>, bool>
 operator==(T1&& a, T2&& b) {
   return eq(
       std::make_index_sequence<tuple_size_v<std::remove_reference_t<T1>>>{},

