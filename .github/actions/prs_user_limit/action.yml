name: 'Limit PRs open per user'
description: 'Get all changed files in a Pull Request'
author: 'danimtb'
inputs:
  files:
    description: "Limit the number of open pull-request that user can have open at the same time"
    required: false
    default: ""
  limit:
    description: "Maximum number of PRs an author can open"
    required: true
    default: "10"
  comment:
    description: "Comment to post in the github PR when the limit of open PRs is reached"
    required: true
    default: "This is a comment"
runs:
  using: "composite"
  steps:
    - uses: actions/setup-python@v4
      with:
        python-version: "3.8"

    - name: Install requirements
      shell: bash
      run: |
        pip install PyGithub==2.1.1

    - name: Check open PRs
      id: check-prs
      shell: python
      env:
        GITHUB_TOKEN: ${{ github.token }}
      run: |
        import os
        from github import Github

        # Create a Github instance with your token
        g = Github(os.environ["GITHUB_TOKEN"])

        # Get the repository full name and pull request number from the event payload
        with open(os.environ["GITHUB_EVENT_PATH"], "r") as event_file:
            event_payload = json.load(event_file)
        repo_full_name = event_payload["repository"]["full_name"]
        pr_number = event_payload["pull_request"]["number"]

        # Define the username whose PRs you want to check
        username = "${{ github.event.pull_request.user.login }}"

        # Get the repository and pull request objects
        repo = g.get_repo(repo_full_name)
        pr = repo.get_pull(pr_number)

        # Get the list of open pull requests created by the user
        open_prs = [pr for pr in repo.get_pulls(state="open", user=username)]

        # Check the number of open PRs and the specified limit
        limit = int(os.environ["limit"])
        if len(open_prs) >= limit:
            # Post a comment on the current pull request if the limit is reached
            comment_text = os.environ["comment"]
            pr.create_issue_comment(comment_text)
